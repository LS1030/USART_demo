
USART_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022f4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080024d8  080024d8  000124d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002504  08002504  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002504  08002504  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002504  08002504  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800250c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  08002518  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08002518  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c03e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c1d  00000000  00000000  0002c073  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  0002dc90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  0002e880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019d45  00000000  00000000  0002f378  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000add1  00000000  00000000  000490bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a63c  00000000  00000000  00053e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee4ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f0  00000000  00000000  000ee548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080024c0 	.word	0x080024c0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080024c0 	.word	0x080024c0

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <MX_GPIO_Init+0x70>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a19      	ldr	r2, [pc, #100]	; (8000294 <MX_GPIO_Init+0x70>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b17      	ldr	r3, [pc, #92]	; (8000294 <MX_GPIO_Init+0x70>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0310 	and.w	r3, r3, #16
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <MX_GPIO_Init+0x70>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a13      	ldr	r2, [pc, #76]	; (8000294 <MX_GPIO_Init+0x70>)
 8000248:	f043 0320 	orr.w	r3, r3, #32
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_GPIO_Init+0x70>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0320 	and.w	r3, r3, #32
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_GPIO_Init+0x70>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <MX_GPIO_Init+0x70>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_GPIO_Init+0x70>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0304 	and.w	r3, r3, #4
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <MX_GPIO_Init+0x70>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <MX_GPIO_Init+0x70>)
 8000278:	f043 0308 	orr.w	r3, r3, #8
 800027c:	6193      	str	r3, [r2, #24]
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <MX_GPIO_Init+0x70>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f003 0308 	and.w	r3, r3, #8
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40021000 	.word	0x40021000

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 fa48 	bl	8000730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f822 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f7ff ffbe 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002a8:	f000 f94c 	bl	8000544 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (USART1_Rx_flag == HAL_OK)
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <main+0x40>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d1fb      	bne.n	80002ac <main+0x14>
    {
      // uint8_t USART1_Data[USART1_RX_DATA_SIZE];
      // uint16_t USART1_Data_Length;

      // USART1_Data_Length = kfifo_out_usart1(USART1_Data, USART1_RX_DATA_SIZE);
      HAL_UART_Transmit(&huart1, USART1_RxBuff, USART1_RX_DATA_SIZE, 500);
 80002b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002bc:	4907      	ldr	r1, [pc, #28]	; (80002dc <main+0x44>)
 80002be:	4808      	ldr	r0, [pc, #32]	; (80002e0 <main+0x48>)
 80002c0:	f001 fce9 	bl	8001c96 <HAL_UART_Transmit>

      USART1_Rx_flag = HAL_BUSY; //Start USART1 Receive
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <main+0x40>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart1, &USART1_Rx_temp, 1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	4905      	ldr	r1, [pc, #20]	; (80002e4 <main+0x4c>)
 80002ce:	4804      	ldr	r0, [pc, #16]	; (80002e0 <main+0x48>)
 80002d0:	f001 fd73 	bl	8001dba <HAL_UART_Receive_IT>
    if (USART1_Rx_flag == HAL_OK)
 80002d4:	e7ea      	b.n	80002ac <main+0x14>
 80002d6:	bf00      	nop
 80002d8:	20000029 	.word	0x20000029
 80002dc:	20000074 	.word	0x20000074
 80002e0:	20000174 	.word	0x20000174
 80002e4:	20000028 	.word	0x20000028

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	; 0x40
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 f8da 	bl	80024b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030a:	2301      	movs	r3, #1
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031c:	2302      	movs	r3, #2
 800031e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000326:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0318 	add.w	r3, r7, #24
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fd81 	bl	8000e38 <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800033c:	f000 f82e 	bl	800039c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	2302      	movs	r3, #2
 8000346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2102      	movs	r1, #2
 800035a:	4618      	mov	r0, r3
 800035c:	f000 ffec 	bl	8001338 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000366:	f000 f819 	bl	800039c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800036a:	f001 f8cf 	bl	800150c <HAL_RCC_EnableCSS>
}
 800036e:	bf00      	nop
 8000370:	3740      	adds	r7, #64	; 0x40
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d101      	bne.n	800038e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800038a:	f000 f9e7 	bl	800075c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40001400 	.word	0x40001400

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a14      	ldr	r2, [pc, #80]	; (8000404 <HAL_MspInit+0x5c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <HAL_MspInit+0x5c>)
 80003cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d0:	61d3      	str	r3, [r2, #28]
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <HAL_MspInit+0x60>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <HAL_MspInit+0x60>)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000
 8000408:	40010000 	.word	0x40010000

0800040c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08c      	sub	sp, #48	; 0x30
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800041c:	2200      	movs	r2, #0
 800041e:	6879      	ldr	r1, [r7, #4]
 8000420:	2037      	movs	r0, #55	; 0x37
 8000422:	f000 fa6c 	bl	80008fe <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000426:	2037      	movs	r0, #55	; 0x37
 8000428:	f000 fa85 	bl	8000936 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800042c:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <HAL_InitTick+0xa0>)
 800042e:	69db      	ldr	r3, [r3, #28]
 8000430:	4a1e      	ldr	r2, [pc, #120]	; (80004ac <HAL_InitTick+0xa0>)
 8000432:	f043 0320 	orr.w	r3, r3, #32
 8000436:	61d3      	str	r3, [r2, #28]
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <HAL_InitTick+0xa0>)
 800043a:	69db      	ldr	r3, [r3, #28]
 800043c:	f003 0320 	and.w	r3, r3, #32
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000444:	f107 0210 	add.w	r2, r7, #16
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	4611      	mov	r1, r2
 800044e:	4618      	mov	r0, r3
 8000450:	f001 f8fc 	bl	800164c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000454:	f001 f8d2 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 8000458:	4603      	mov	r3, r0
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800045e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000460:	4a13      	ldr	r2, [pc, #76]	; (80004b0 <HAL_InitTick+0xa4>)
 8000462:	fba2 2303 	umull	r2, r3, r2, r3
 8000466:	0c9b      	lsrs	r3, r3, #18
 8000468:	3b01      	subs	r3, #1
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <HAL_InitTick+0xa8>)
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <HAL_InitTick+0xac>)
 8000470:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <HAL_InitTick+0xa8>)
 8000474:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000478:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800047a:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <HAL_InitTick+0xa8>)
 800047c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800047e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <HAL_InitTick+0xa8>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <HAL_InitTick+0xa8>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800048c:	4809      	ldr	r0, [pc, #36]	; (80004b4 <HAL_InitTick+0xa8>)
 800048e:	f001 f945 	bl	800171c <HAL_TIM_Base_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d104      	bne.n	80004a2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000498:	4806      	ldr	r0, [pc, #24]	; (80004b4 <HAL_InitTick+0xa8>)
 800049a:	f001 f997 	bl	80017cc <HAL_TIM_Base_Start_IT>
 800049e:	4603      	mov	r3, r0
 80004a0:	e000      	b.n	80004a4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80004a2:	2301      	movs	r3, #1
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3730      	adds	r7, #48	; 0x30
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000
 80004b0:	431bde83 	.word	0x431bde83
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	40001400 	.word	0x40001400

080004bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80004c0:	f001 f8f4 	bl	80016ac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <HardFault_Handler+0x4>

080004ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d2:	e7fe      	b.n	80004d2 <MemManage_Handler+0x4>

080004d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <BusFault_Handler+0x4>

080004da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <UsageFault_Handler+0x4>

080004e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <USART1_IRQHandler+0x10>)
 8000516:	f001 fca5 	bl	8001e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  // USER_UART_IRQHandler(&huart1);
  /* USER CODE END USART1_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000174 	.word	0x20000174

08000524 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <TIM7_IRQHandler+0x10>)
 800052a:	f001 f9af 	bl	800188c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c

08000538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <MX_USART1_UART_Init+0x50>)
 800054c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 8000550:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 800056a:	220c      	movs	r2, #12
 800056c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 800057c:	f001 fb3e 	bl	8001bfc <HAL_UART_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000586:	f7ff ff09 	bl	800039c <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000174 	.word	0x20000174
 8000594:	40013800 	.word	0x40013800

08000598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
  if (uartHandle->Instance == USART1)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a20      	ldr	r2, [pc, #128]	; (8000634 <HAL_UART_MspInit+0x9c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d139      	bne.n	800062c <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a18      	ldr	r2, [pc, #96]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0304 	and.w	r3, r3, #4
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f2:	2303      	movs	r3, #3
 80005f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <HAL_UART_MspInit+0xa4>)
 80005fe:	f000 fab1 	bl	8000b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	4809      	ldr	r0, [pc, #36]	; (800063c <HAL_UART_MspInit+0xa4>)
 8000618:	f000 faa4 	bl	8000b64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2101      	movs	r1, #1
 8000620:	2025      	movs	r0, #37	; 0x25
 8000622:	f000 f96c 	bl	80008fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000626:	2025      	movs	r0, #37	; 0x25
 8000628:	f000 f985 	bl	8000936 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }
}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40013800 	.word	0x40013800
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800

08000640 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <HAL_UART_RxCpltCallback+0x8c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d138      	bne.n	80006c4 <HAL_UART_RxCpltCallback+0x84>
  {
    static uint16_t USART1_Rx_Number = 0;

    if (USART1_Rx_flag != HAL_OK)
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <HAL_UART_RxCpltCallback+0x90>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d034      	beq.n	80006c4 <HAL_UART_RxCpltCallback+0x84>
    {
      if (USART1_Rx_Number != 0) //Receive the following data
 800065a:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <HAL_UART_RxCpltCallback+0x94>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d018      	beq.n	8000694 <HAL_UART_RxCpltCallback+0x54>
      {
        // kfifo_in(&usart1_Rxkfifo, &USART1_Rx_temp, 1);
        USART1_RxBuff[USART1_Rx_Number] = USART1_Rx_temp;
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_UART_RxCpltCallback+0x94>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	461a      	mov	r2, r3
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <HAL_UART_RxCpltCallback+0x98>)
 800066a:	7819      	ldrb	r1, [r3, #0]
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_UART_RxCpltCallback+0x9c>)
 800066e:	5499      	strb	r1, [r3, r2]
        USART1_Rx_Number++;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <HAL_UART_RxCpltCallback+0x94>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <HAL_UART_RxCpltCallback+0x94>)
 800067a:	801a      	strh	r2, [r3, #0]

        if (USART1_Rx_Number == USART1_RX_DATA_SIZE) //Receive all data
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_UART_RxCpltCallback+0x94>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000684:	d119      	bne.n	80006ba <HAL_UART_RxCpltCallback+0x7a>
        {
          USART1_Rx_Number = 0;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <HAL_UART_RxCpltCallback+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	801a      	strh	r2, [r3, #0]
          USART1_Rx_flag = HAL_OK;
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <HAL_UART_RxCpltCallback+0x90>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
          return; // if the last data is 0xA5, the function should be return
 8000692:	e017      	b.n	80006c4 <HAL_UART_RxCpltCallback+0x84>
        }
      }
      else if (USART1_Rx_temp == 0xA5 && USART1_Rx_Number == 0) //Receive the first data
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <HAL_UART_RxCpltCallback+0x98>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2ba5      	cmp	r3, #165	; 0xa5
 800069a:	d10b      	bne.n	80006b4 <HAL_UART_RxCpltCallback+0x74>
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <HAL_UART_RxCpltCallback+0x94>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d107      	bne.n	80006b4 <HAL_UART_RxCpltCallback+0x74>
      {
        // kfifo_in(&usart1_Rxkfifo, &USART1_Rx_temp, 1);
        USART1_RxBuff[0] = USART1_Rx_temp;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_UART_RxCpltCallback+0x98>)
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_UART_RxCpltCallback+0x9c>)
 80006aa:	701a      	strb	r2, [r3, #0]
        USART1_Rx_Number = 1;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_UART_RxCpltCallback+0x94>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	801a      	strh	r2, [r3, #0]
 80006b2:	e002      	b.n	80006ba <HAL_UART_RxCpltCallback+0x7a>
      }
      else
      {
        USART1_Rx_flag = HAL_ERROR;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_UART_RxCpltCallback+0x90>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
      }
      HAL_UART_Receive_IT(&huart1, &USART1_Rx_temp, 1);
 80006ba:	2201      	movs	r2, #1
 80006bc:	4906      	ldr	r1, [pc, #24]	; (80006d8 <HAL_UART_RxCpltCallback+0x98>)
 80006be:	4808      	ldr	r0, [pc, #32]	; (80006e0 <HAL_UART_RxCpltCallback+0xa0>)
 80006c0:	f001 fb7b 	bl	8001dba <HAL_UART_Receive_IT>
    }
  }
}
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40013800 	.word	0x40013800
 80006d0:	20000029 	.word	0x20000029
 80006d4:	2000002a 	.word	0x2000002a
 80006d8:	20000028 	.word	0x20000028
 80006dc:	20000074 	.word	0x20000074
 80006e0:	20000174 	.word	0x20000174

080006e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006e6:	e003      	b.n	80006f0 <LoopCopyDataInit>

080006e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006ee:	3104      	adds	r1, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006f0:	480a      	ldr	r0, [pc, #40]	; (800071c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006f8:	d3f6      	bcc.n	80006e8 <CopyDataInit>
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006fc:	e002      	b.n	8000704 <LoopFillZerobss>

080006fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000700:	f842 3b04 	str.w	r3, [r2], #4

08000704 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000706:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000708:	d3f9      	bcc.n	80006fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800070a:	f7ff ff15 	bl	8000538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800070e:	f001 feab 	bl	8002468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000712:	f7ff fdc1 	bl	8000298 <main>
  bx lr
 8000716:	4770      	bx	lr
  ldr r3, =_sidata
 8000718:	0800250c 	.word	0x0800250c
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000720:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000724:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000728:	200001b8 	.word	0x200001b8

0800072c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_2_IRQHandler>
	...

08000730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <HAL_Init+0x28>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a07      	ldr	r2, [pc, #28]	; (8000758 <HAL_Init+0x28>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f8d1 	bl	80008e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff fe60 	bl	800040c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800074c:	f7ff fe2c 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x1c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x20>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a03      	ldr	r2, [pc, #12]	; (800077c <HAL_IncTick+0x20>)
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	20000008 	.word	0x20000008
 800077c:	200001b4 	.word	0x200001b4

08000780 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <HAL_GetTick+0x10>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	200001b4 	.word	0x200001b4

08000794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	60d3      	str	r3, [r2, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <__NVIC_GetPriorityGrouping+0x18>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	f003 0307 	and.w	r3, r3, #7
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	2b00      	cmp	r3, #0
 8000808:	db0b      	blt.n	8000822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 021f 	and.w	r2, r3, #31
 8000810:	4906      	ldr	r1, [pc, #24]	; (800082c <__NVIC_EnableIRQ+0x34>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	095b      	lsrs	r3, r3, #5
 8000818:	2001      	movs	r0, #1
 800081a:	fa00 f202 	lsl.w	r2, r0, r2
 800081e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	e000e100 	.word	0xe000e100

08000830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	db0a      	blt.n	800085a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <__NVIC_SetPriority+0x4c>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000858:	e00a      	b.n	8000870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4908      	ldr	r1, [pc, #32]	; (8000880 <__NVIC_SetPriority+0x50>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3b04      	subs	r3, #4
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	440b      	add	r3, r1
 800086e:	761a      	strb	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	bf28      	it	cs
 80008a2:	2304      	movcs	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3304      	adds	r3, #4
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d902      	bls.n	80008b4 <NVIC_EncodePriority+0x30>
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3b03      	subs	r3, #3
 80008b2:	e000      	b.n	80008b6 <NVIC_EncodePriority+0x32>
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43da      	mvns	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	4313      	orrs	r3, r2
         );
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3724      	adds	r7, #36	; 0x24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff4f 	bl	8000794 <__NVIC_SetPriorityGrouping>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000910:	f7ff ff64 	bl	80007dc <__NVIC_GetPriorityGrouping>
 8000914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff ffb2 	bl	8000884 <NVIC_EncodePriority>
 8000920:	4602      	mov	r2, r0
 8000922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff81 	bl	8000830 <__NVIC_SetPriority>
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	4603      	mov	r3, r0
 800093e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff57 	bl	80007f8 <__NVIC_EnableIRQ>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800095c:	2300      	movs	r3, #0
 800095e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000966:	2b02      	cmp	r3, #2
 8000968:	d005      	beq.n	8000976 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2204      	movs	r2, #4
 800096e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	73fb      	strb	r3, [r7, #15]
 8000974:	e0d6      	b.n	8000b24 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f022 020e 	bic.w	r2, r2, #14
 8000984:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0201 	bic.w	r2, r2, #1
 8000994:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	4b64      	ldr	r3, [pc, #400]	; (8000b30 <HAL_DMA_Abort_IT+0x1dc>)
 800099e:	429a      	cmp	r2, r3
 80009a0:	d958      	bls.n	8000a54 <HAL_DMA_Abort_IT+0x100>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a63      	ldr	r2, [pc, #396]	; (8000b34 <HAL_DMA_Abort_IT+0x1e0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d04f      	beq.n	8000a4c <HAL_DMA_Abort_IT+0xf8>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a61      	ldr	r2, [pc, #388]	; (8000b38 <HAL_DMA_Abort_IT+0x1e4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d048      	beq.n	8000a48 <HAL_DMA_Abort_IT+0xf4>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a60      	ldr	r2, [pc, #384]	; (8000b3c <HAL_DMA_Abort_IT+0x1e8>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d040      	beq.n	8000a42 <HAL_DMA_Abort_IT+0xee>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a5e      	ldr	r2, [pc, #376]	; (8000b40 <HAL_DMA_Abort_IT+0x1ec>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d038      	beq.n	8000a3c <HAL_DMA_Abort_IT+0xe8>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a5d      	ldr	r2, [pc, #372]	; (8000b44 <HAL_DMA_Abort_IT+0x1f0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d030      	beq.n	8000a36 <HAL_DMA_Abort_IT+0xe2>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a5b      	ldr	r2, [pc, #364]	; (8000b48 <HAL_DMA_Abort_IT+0x1f4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d028      	beq.n	8000a30 <HAL_DMA_Abort_IT+0xdc>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a53      	ldr	r2, [pc, #332]	; (8000b30 <HAL_DMA_Abort_IT+0x1dc>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d020      	beq.n	8000a2a <HAL_DMA_Abort_IT+0xd6>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a57      	ldr	r2, [pc, #348]	; (8000b4c <HAL_DMA_Abort_IT+0x1f8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d019      	beq.n	8000a26 <HAL_DMA_Abort_IT+0xd2>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a56      	ldr	r2, [pc, #344]	; (8000b50 <HAL_DMA_Abort_IT+0x1fc>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d012      	beq.n	8000a22 <HAL_DMA_Abort_IT+0xce>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a54      	ldr	r2, [pc, #336]	; (8000b54 <HAL_DMA_Abort_IT+0x200>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d00a      	beq.n	8000a1c <HAL_DMA_Abort_IT+0xc8>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a53      	ldr	r2, [pc, #332]	; (8000b58 <HAL_DMA_Abort_IT+0x204>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d102      	bne.n	8000a16 <HAL_DMA_Abort_IT+0xc2>
 8000a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a14:	e01b      	b.n	8000a4e <HAL_DMA_Abort_IT+0xfa>
 8000a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1a:	e018      	b.n	8000a4e <HAL_DMA_Abort_IT+0xfa>
 8000a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a20:	e015      	b.n	8000a4e <HAL_DMA_Abort_IT+0xfa>
 8000a22:	2310      	movs	r3, #16
 8000a24:	e013      	b.n	8000a4e <HAL_DMA_Abort_IT+0xfa>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e011      	b.n	8000a4e <HAL_DMA_Abort_IT+0xfa>
 8000a2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a2e:	e00e      	b.n	8000a4e <HAL_DMA_Abort_IT+0xfa>
 8000a30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a34:	e00b      	b.n	8000a4e <HAL_DMA_Abort_IT+0xfa>
 8000a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3a:	e008      	b.n	8000a4e <HAL_DMA_Abort_IT+0xfa>
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	e005      	b.n	8000a4e <HAL_DMA_Abort_IT+0xfa>
 8000a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a46:	e002      	b.n	8000a4e <HAL_DMA_Abort_IT+0xfa>
 8000a48:	2310      	movs	r3, #16
 8000a4a:	e000      	b.n	8000a4e <HAL_DMA_Abort_IT+0xfa>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	4a43      	ldr	r2, [pc, #268]	; (8000b5c <HAL_DMA_Abort_IT+0x208>)
 8000a50:	6053      	str	r3, [r2, #4]
 8000a52:	e057      	b.n	8000b04 <HAL_DMA_Abort_IT+0x1b0>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a36      	ldr	r2, [pc, #216]	; (8000b34 <HAL_DMA_Abort_IT+0x1e0>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d04f      	beq.n	8000afe <HAL_DMA_Abort_IT+0x1aa>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a35      	ldr	r2, [pc, #212]	; (8000b38 <HAL_DMA_Abort_IT+0x1e4>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d048      	beq.n	8000afa <HAL_DMA_Abort_IT+0x1a6>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a33      	ldr	r2, [pc, #204]	; (8000b3c <HAL_DMA_Abort_IT+0x1e8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d040      	beq.n	8000af4 <HAL_DMA_Abort_IT+0x1a0>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a32      	ldr	r2, [pc, #200]	; (8000b40 <HAL_DMA_Abort_IT+0x1ec>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d038      	beq.n	8000aee <HAL_DMA_Abort_IT+0x19a>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a30      	ldr	r2, [pc, #192]	; (8000b44 <HAL_DMA_Abort_IT+0x1f0>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d030      	beq.n	8000ae8 <HAL_DMA_Abort_IT+0x194>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a2f      	ldr	r2, [pc, #188]	; (8000b48 <HAL_DMA_Abort_IT+0x1f4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d028      	beq.n	8000ae2 <HAL_DMA_Abort_IT+0x18e>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <HAL_DMA_Abort_IT+0x1dc>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d020      	beq.n	8000adc <HAL_DMA_Abort_IT+0x188>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a2b      	ldr	r2, [pc, #172]	; (8000b4c <HAL_DMA_Abort_IT+0x1f8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d019      	beq.n	8000ad8 <HAL_DMA_Abort_IT+0x184>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a29      	ldr	r2, [pc, #164]	; (8000b50 <HAL_DMA_Abort_IT+0x1fc>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d012      	beq.n	8000ad4 <HAL_DMA_Abort_IT+0x180>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a28      	ldr	r2, [pc, #160]	; (8000b54 <HAL_DMA_Abort_IT+0x200>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d00a      	beq.n	8000ace <HAL_DMA_Abort_IT+0x17a>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <HAL_DMA_Abort_IT+0x204>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d102      	bne.n	8000ac8 <HAL_DMA_Abort_IT+0x174>
 8000ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac6:	e01b      	b.n	8000b00 <HAL_DMA_Abort_IT+0x1ac>
 8000ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000acc:	e018      	b.n	8000b00 <HAL_DMA_Abort_IT+0x1ac>
 8000ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad2:	e015      	b.n	8000b00 <HAL_DMA_Abort_IT+0x1ac>
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	e013      	b.n	8000b00 <HAL_DMA_Abort_IT+0x1ac>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e011      	b.n	8000b00 <HAL_DMA_Abort_IT+0x1ac>
 8000adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae0:	e00e      	b.n	8000b00 <HAL_DMA_Abort_IT+0x1ac>
 8000ae2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ae6:	e00b      	b.n	8000b00 <HAL_DMA_Abort_IT+0x1ac>
 8000ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aec:	e008      	b.n	8000b00 <HAL_DMA_Abort_IT+0x1ac>
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	e005      	b.n	8000b00 <HAL_DMA_Abort_IT+0x1ac>
 8000af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af8:	e002      	b.n	8000b00 <HAL_DMA_Abort_IT+0x1ac>
 8000afa:	2310      	movs	r3, #16
 8000afc:	e000      	b.n	8000b00 <HAL_DMA_Abort_IT+0x1ac>
 8000afe:	2301      	movs	r3, #1
 8000b00:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <HAL_DMA_Abort_IT+0x20c>)
 8000b02:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	4798      	blx	r3
    } 
  }
  return status;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020080 	.word	0x40020080
 8000b34:	40020008 	.word	0x40020008
 8000b38:	4002001c 	.word	0x4002001c
 8000b3c:	40020030 	.word	0x40020030
 8000b40:	40020044 	.word	0x40020044
 8000b44:	40020058 	.word	0x40020058
 8000b48:	4002006c 	.word	0x4002006c
 8000b4c:	40020408 	.word	0x40020408
 8000b50:	4002041c 	.word	0x4002041c
 8000b54:	40020430 	.word	0x40020430
 8000b58:	40020444 	.word	0x40020444
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	40020000 	.word	0x40020000

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b08b      	sub	sp, #44	; 0x2c
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e133      	b.n	8000de0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	f040 8122 	bne.w	8000dda <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b12      	cmp	r3, #18
 8000b9c:	d034      	beq.n	8000c08 <HAL_GPIO_Init+0xa4>
 8000b9e:	2b12      	cmp	r3, #18
 8000ba0:	d80d      	bhi.n	8000bbe <HAL_GPIO_Init+0x5a>
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d02b      	beq.n	8000bfe <HAL_GPIO_Init+0x9a>
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d804      	bhi.n	8000bb4 <HAL_GPIO_Init+0x50>
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d031      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d01c      	beq.n	8000bec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bb2:	e048      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d043      	beq.n	8000c40 <HAL_GPIO_Init+0xdc>
 8000bb8:	2b11      	cmp	r3, #17
 8000bba:	d01b      	beq.n	8000bf4 <HAL_GPIO_Init+0x90>
          break;
 8000bbc:	e043      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bbe:	4a8f      	ldr	r2, [pc, #572]	; (8000dfc <HAL_GPIO_Init+0x298>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d026      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
 8000bc4:	4a8d      	ldr	r2, [pc, #564]	; (8000dfc <HAL_GPIO_Init+0x298>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d806      	bhi.n	8000bd8 <HAL_GPIO_Init+0x74>
 8000bca:	4a8d      	ldr	r2, [pc, #564]	; (8000e00 <HAL_GPIO_Init+0x29c>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d020      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
 8000bd0:	4a8c      	ldr	r2, [pc, #560]	; (8000e04 <HAL_GPIO_Init+0x2a0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d01d      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
          break;
 8000bd6:	e036      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bd8:	4a8b      	ldr	r2, [pc, #556]	; (8000e08 <HAL_GPIO_Init+0x2a4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d019      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
 8000bde:	4a8b      	ldr	r2, [pc, #556]	; (8000e0c <HAL_GPIO_Init+0x2a8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d016      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
 8000be4:	4a8a      	ldr	r2, [pc, #552]	; (8000e10 <HAL_GPIO_Init+0x2ac>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d013      	beq.n	8000c12 <HAL_GPIO_Init+0xae>
          break;
 8000bea:	e02c      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e028      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	623b      	str	r3, [r7, #32]
          break;
 8000bfc:	e023      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	3308      	adds	r3, #8
 8000c04:	623b      	str	r3, [r7, #32]
          break;
 8000c06:	e01e      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	330c      	adds	r3, #12
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e019      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	623b      	str	r3, [r7, #32]
          break;
 8000c1e:	e012      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d105      	bne.n	8000c34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	611a      	str	r2, [r3, #16]
          break;
 8000c32:	e008      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c34:	2308      	movs	r3, #8
 8000c36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	615a      	str	r2, [r3, #20]
          break;
 8000c3e:	e002      	b.n	8000c46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2bff      	cmp	r3, #255	; 0xff
 8000c4a:	d801      	bhi.n	8000c50 <HAL_GPIO_Init+0xec>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	e001      	b.n	8000c54 <HAL_GPIO_Init+0xf0>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3304      	adds	r3, #4
 8000c54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	2bff      	cmp	r3, #255	; 0xff
 8000c5a:	d802      	bhi.n	8000c62 <HAL_GPIO_Init+0xfe>
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	e002      	b.n	8000c68 <HAL_GPIO_Init+0x104>
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	3b08      	subs	r3, #8
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	210f      	movs	r1, #15
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	401a      	ands	r2, r3
 8000c7a:	6a39      	ldr	r1, [r7, #32]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	431a      	orrs	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80a2 	beq.w	8000dda <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c96:	4b5f      	ldr	r3, [pc, #380]	; (8000e14 <HAL_GPIO_Init+0x2b0>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a5e      	ldr	r2, [pc, #376]	; (8000e14 <HAL_GPIO_Init+0x2b0>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b5c      	ldr	r3, [pc, #368]	; (8000e14 <HAL_GPIO_Init+0x2b0>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cae:	4a5a      	ldr	r2, [pc, #360]	; (8000e18 <HAL_GPIO_Init+0x2b4>)
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a51      	ldr	r2, [pc, #324]	; (8000e1c <HAL_GPIO_Init+0x2b8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d01f      	beq.n	8000d1a <HAL_GPIO_Init+0x1b6>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a50      	ldr	r2, [pc, #320]	; (8000e20 <HAL_GPIO_Init+0x2bc>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d019      	beq.n	8000d16 <HAL_GPIO_Init+0x1b2>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <HAL_GPIO_Init+0x2c0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d013      	beq.n	8000d12 <HAL_GPIO_Init+0x1ae>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4e      	ldr	r2, [pc, #312]	; (8000e28 <HAL_GPIO_Init+0x2c4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d00d      	beq.n	8000d0e <HAL_GPIO_Init+0x1aa>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4d      	ldr	r2, [pc, #308]	; (8000e2c <HAL_GPIO_Init+0x2c8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d007      	beq.n	8000d0a <HAL_GPIO_Init+0x1a6>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a4c      	ldr	r2, [pc, #304]	; (8000e30 <HAL_GPIO_Init+0x2cc>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_GPIO_Init+0x1a2>
 8000d02:	2305      	movs	r3, #5
 8000d04:	e00a      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d06:	2306      	movs	r3, #6
 8000d08:	e008      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e004      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e002      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <HAL_GPIO_Init+0x1b8>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1e:	f002 0203 	and.w	r2, r2, #3
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	4093      	lsls	r3, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d2c:	493a      	ldr	r1, [pc, #232]	; (8000e18 <HAL_GPIO_Init+0x2b4>)
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	3302      	adds	r3, #2
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d46:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	493a      	ldr	r1, [pc, #232]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
 8000d52:	e006      	b.n	8000d62 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d54:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4935      	ldr	r1, [pc, #212]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d006      	beq.n	8000d7c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d6e:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	4930      	ldr	r1, [pc, #192]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	604b      	str	r3, [r1, #4]
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	492b      	ldr	r1, [pc, #172]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	4926      	ldr	r1, [pc, #152]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	608b      	str	r3, [r1, #8]
 8000da2:	e006      	b.n	8000db2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	4921      	ldr	r1, [pc, #132]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	491c      	ldr	r1, [pc, #112]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60cb      	str	r3, [r1, #12]
 8000dca:	e006      	b.n	8000dda <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	4917      	ldr	r1, [pc, #92]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	3301      	adds	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f47f aec4 	bne.w	8000b78 <HAL_GPIO_Init+0x14>
  }
}
 8000df0:	bf00      	nop
 8000df2:	372c      	adds	r7, #44	; 0x2c
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	10210000 	.word	0x10210000
 8000e00:	10110000 	.word	0x10110000
 8000e04:	10120000 	.word	0x10120000
 8000e08:	10310000 	.word	0x10310000
 8000e0c:	10320000 	.word	0x10320000
 8000e10:	10220000 	.word	0x10220000
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	40010c00 	.word	0x40010c00
 8000e24:	40011000 	.word	0x40011000
 8000e28:	40011400 	.word	0x40011400
 8000e2c:	40011800 	.word	0x40011800
 8000e30:	40011c00 	.word	0x40011c00
 8000e34:	40010400 	.word	0x40010400

08000e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e26c      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 8087 	beq.w	8000f66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e58:	4b92      	ldr	r3, [pc, #584]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 030c 	and.w	r3, r3, #12
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d00c      	beq.n	8000e7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e64:	4b8f      	ldr	r3, [pc, #572]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 030c 	and.w	r3, r3, #12
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d112      	bne.n	8000e96 <HAL_RCC_OscConfig+0x5e>
 8000e70:	4b8c      	ldr	r3, [pc, #560]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7c:	d10b      	bne.n	8000e96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7e:	4b89      	ldr	r3, [pc, #548]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d06c      	beq.n	8000f64 <HAL_RCC_OscConfig+0x12c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d168      	bne.n	8000f64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e246      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9e:	d106      	bne.n	8000eae <HAL_RCC_OscConfig+0x76>
 8000ea0:	4b80      	ldr	r3, [pc, #512]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a7f      	ldr	r2, [pc, #508]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	e02e      	b.n	8000f0c <HAL_RCC_OscConfig+0xd4>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x98>
 8000eb6:	4b7b      	ldr	r3, [pc, #492]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a7a      	ldr	r2, [pc, #488]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b78      	ldr	r3, [pc, #480]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a77      	ldr	r2, [pc, #476]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e01d      	b.n	8000f0c <HAL_RCC_OscConfig+0xd4>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0xbc>
 8000eda:	4b72      	ldr	r3, [pc, #456]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a71      	ldr	r2, [pc, #452]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	4b6f      	ldr	r3, [pc, #444]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a6e      	ldr	r2, [pc, #440]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e00b      	b.n	8000f0c <HAL_RCC_OscConfig+0xd4>
 8000ef4:	4b6b      	ldr	r3, [pc, #428]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a6a      	ldr	r2, [pc, #424]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4b68      	ldr	r3, [pc, #416]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a67      	ldr	r2, [pc, #412]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d013      	beq.n	8000f3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fc34 	bl	8000780 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fc30 	bl	8000780 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e1fa      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2e:	4b5d      	ldr	r3, [pc, #372]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0f0      	beq.n	8000f1c <HAL_RCC_OscConfig+0xe4>
 8000f3a:	e014      	b.n	8000f66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc20 	bl	8000780 <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f44:	f7ff fc1c 	bl	8000780 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b64      	cmp	r3, #100	; 0x64
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e1e6      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f56:	4b53      	ldr	r3, [pc, #332]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f0      	bne.n	8000f44 <HAL_RCC_OscConfig+0x10c>
 8000f62:	e000      	b.n	8000f66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d063      	beq.n	800103a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f72:	4b4c      	ldr	r3, [pc, #304]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 030c 	and.w	r3, r3, #12
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00b      	beq.n	8000f96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f7e:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d11c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x18c>
 8000f8a:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d116      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <HAL_RCC_OscConfig+0x176>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d001      	beq.n	8000fae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e1ba      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fae:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	4939      	ldr	r1, [pc, #228]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc2:	e03a      	b.n	800103a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d020      	beq.n	800100e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fcc:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <HAL_RCC_OscConfig+0x270>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fbd5 	bl	8000780 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fda:	f7ff fbd1 	bl	8000780 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e19b      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4927      	ldr	r1, [pc, #156]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8001008:	4313      	orrs	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
 800100c:	e015      	b.n	800103a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_RCC_OscConfig+0x270>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fbb4 	bl	8000780 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101c:	f7ff fbb0 	bl	8000780 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e17a      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	2b00      	cmp	r3, #0
 8001044:	d03a      	beq.n	80010bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d019      	beq.n	8001082 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_RCC_OscConfig+0x274>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001054:	f7ff fb94 	bl	8000780 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105c:	f7ff fb90 	bl	8000780 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e15a      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_RCC_OscConfig+0x26c>)
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f0      	beq.n	800105c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f000 fb2a 	bl	80016d4 <RCC_Delay>
 8001080:	e01c      	b.n	80010bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_RCC_OscConfig+0x274>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001088:	f7ff fb7a 	bl	8000780 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108e:	e00f      	b.n	80010b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001090:	f7ff fb76 	bl	8000780 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d908      	bls.n	80010b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e140      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	42420000 	.word	0x42420000
 80010ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b0:	4b9e      	ldr	r3, [pc, #632]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1e9      	bne.n	8001090 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80a6 	beq.w	8001216 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ce:	4b97      	ldr	r3, [pc, #604]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10d      	bne.n	80010f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b94      	ldr	r3, [pc, #592]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a93      	ldr	r2, [pc, #588]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b91      	ldr	r3, [pc, #580]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010f2:	2301      	movs	r3, #1
 80010f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f6:	4b8e      	ldr	r3, [pc, #568]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d118      	bne.n	8001134 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001102:	4b8b      	ldr	r3, [pc, #556]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a8a      	ldr	r2, [pc, #552]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800110e:	f7ff fb37 	bl	8000780 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001116:	f7ff fb33 	bl	8000780 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b64      	cmp	r3, #100	; 0x64
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e0fd      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001128:	4b81      	ldr	r3, [pc, #516]	; (8001330 <HAL_RCC_OscConfig+0x4f8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d106      	bne.n	800114a <HAL_RCC_OscConfig+0x312>
 800113c:	4b7b      	ldr	r3, [pc, #492]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	4a7a      	ldr	r2, [pc, #488]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6213      	str	r3, [r2, #32]
 8001148:	e02d      	b.n	80011a6 <HAL_RCC_OscConfig+0x36e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0x334>
 8001152:	4b76      	ldr	r3, [pc, #472]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	4a75      	ldr	r2, [pc, #468]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001158:	f023 0301 	bic.w	r3, r3, #1
 800115c:	6213      	str	r3, [r2, #32]
 800115e:	4b73      	ldr	r3, [pc, #460]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	4a72      	ldr	r2, [pc, #456]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001164:	f023 0304 	bic.w	r3, r3, #4
 8001168:	6213      	str	r3, [r2, #32]
 800116a:	e01c      	b.n	80011a6 <HAL_RCC_OscConfig+0x36e>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b05      	cmp	r3, #5
 8001172:	d10c      	bne.n	800118e <HAL_RCC_OscConfig+0x356>
 8001174:	4b6d      	ldr	r3, [pc, #436]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4a6c      	ldr	r2, [pc, #432]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6213      	str	r3, [r2, #32]
 8001180:	4b6a      	ldr	r3, [pc, #424]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4a69      	ldr	r2, [pc, #420]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6213      	str	r3, [r2, #32]
 800118c:	e00b      	b.n	80011a6 <HAL_RCC_OscConfig+0x36e>
 800118e:	4b67      	ldr	r3, [pc, #412]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	4a66      	ldr	r2, [pc, #408]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	6213      	str	r3, [r2, #32]
 800119a:	4b64      	ldr	r3, [pc, #400]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	4a63      	ldr	r2, [pc, #396]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	f023 0304 	bic.w	r3, r3, #4
 80011a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d015      	beq.n	80011da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fae7 	bl	8000780 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b4:	e00a      	b.n	80011cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b6:	f7ff fae3 	bl	8000780 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e0ab      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011cc:	4b57      	ldr	r3, [pc, #348]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0ee      	beq.n	80011b6 <HAL_RCC_OscConfig+0x37e>
 80011d8:	e014      	b.n	8001204 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011da:	f7ff fad1 	bl	8000780 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e0:	e00a      	b.n	80011f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e2:	f7ff facd 	bl	8000780 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e095      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f8:	4b4c      	ldr	r3, [pc, #304]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1ee      	bne.n	80011e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d105      	bne.n	8001216 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800120a:	4b48      	ldr	r3, [pc, #288]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a47      	ldr	r2, [pc, #284]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001214:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8081 	beq.w	8001322 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001220:	4b42      	ldr	r3, [pc, #264]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 030c 	and.w	r3, r3, #12
 8001228:	2b08      	cmp	r3, #8
 800122a:	d061      	beq.n	80012f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d146      	bne.n	80012c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001234:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <HAL_RCC_OscConfig+0x4fc>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff faa1 	bl	8000780 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001242:	f7ff fa9d 	bl	8000780 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e067      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001254:	4b35      	ldr	r3, [pc, #212]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f0      	bne.n	8001242 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001268:	d108      	bne.n	800127c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	492d      	ldr	r1, [pc, #180]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800127c:	4b2b      	ldr	r3, [pc, #172]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a19      	ldr	r1, [r3, #32]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	430b      	orrs	r3, r1
 800128e:	4927      	ldr	r1, [pc, #156]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <HAL_RCC_OscConfig+0x4fc>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fa71 	bl	8000780 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a2:	f7ff fa6d 	bl	8000780 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e037      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x46a>
 80012c0:	e02f      	b.n	8001322 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_RCC_OscConfig+0x4fc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fa5a 	bl	8000780 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d0:	f7ff fa56 	bl	8000780 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e020      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x498>
 80012ee:	e018      	b.n	8001322 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e013      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	429a      	cmp	r2, r3
 800130e:	d106      	bne.n	800131e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131a:	429a      	cmp	r2, r3
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000
 8001330:	40007000 	.word	0x40007000
 8001334:	42420060 	.word	0x42420060

08001338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e0d0      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d910      	bls.n	800137c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135a:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 0207 	bic.w	r2, r3, #7
 8001362:	4965      	ldr	r1, [pc, #404]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800136a:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0b8      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d020      	beq.n	80013ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001394:	4b59      	ldr	r3, [pc, #356]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a58      	ldr	r2, [pc, #352]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800139e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a52      	ldr	r2, [pc, #328]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b8:	4b50      	ldr	r3, [pc, #320]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	494d      	ldr	r1, [pc, #308]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d040      	beq.n	8001458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d115      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e07f      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e073      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e06b      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f023 0203 	bic.w	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4936      	ldr	r1, [pc, #216]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001428:	f7ff f9aa 	bl	8000780 <HAL_GetTick>
 800142c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	e00a      	b.n	8001446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001430:	f7ff f9a6 	bl	8000780 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	; 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e053      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 020c 	and.w	r2, r3, #12
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	429a      	cmp	r2, r3
 8001456:	d1eb      	bne.n	8001430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d210      	bcs.n	8001488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 0207 	bic.w	r2, r3, #7
 800146e:	4922      	ldr	r1, [pc, #136]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e032      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	4916      	ldr	r1, [pc, #88]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	490e      	ldr	r1, [pc, #56]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014c6:	f000 f82d 	bl	8001524 <HAL_RCC_GetSysClockFreq>
 80014ca:	4601      	mov	r1, r0
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_RCC_ClockConfig+0x1c8>)
 80014d8:	5cd3      	ldrb	r3, [r2, r3]
 80014da:	fa21 f303 	lsr.w	r3, r1, r3
 80014de:	4a09      	ldr	r2, [pc, #36]	; (8001504 <HAL_RCC_ClockConfig+0x1cc>)
 80014e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_RCC_ClockConfig+0x1d0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ff90 	bl	800040c <HAL_InitTick>

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000
 80014fc:	40021000 	.word	0x40021000
 8001500:	080024ec 	.word	0x080024ec
 8001504:	20000000 	.word	0x20000000
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_RCC_EnableCSS+0x14>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	4242004c 	.word	0x4242004c

08001524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001524:	b490      	push	{r4, r7}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800152a:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800152c:	1d3c      	adds	r4, r7, #4
 800152e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001534:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b04      	cmp	r3, #4
 800155c:	d002      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x40>
 800155e:	2b08      	cmp	r3, #8
 8001560:	d003      	beq.n	800156a <HAL_RCC_GetSysClockFreq+0x46>
 8001562:	e02d      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001566:	623b      	str	r3, [r7, #32]
      break;
 8001568:	e02d      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	0c9b      	lsrs	r3, r3, #18
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001576:	4413      	add	r3, r2
 8001578:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800157c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	0c5b      	lsrs	r3, r3, #17
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001596:	4413      	add	r3, r2
 8001598:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800159c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015a2:	fb02 f203 	mul.w	r2, r2, r3
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	e004      	b.n	80015ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	623b      	str	r3, [r7, #32]
      break;
 80015be:	e002      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015c2:	623b      	str	r3, [r7, #32]
      break;
 80015c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c6:	6a3b      	ldr	r3, [r7, #32]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3728      	adds	r7, #40	; 0x28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc90      	pop	{r4, r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	080024d8 	.word	0x080024d8
 80015d8:	080024e8 	.word	0x080024e8
 80015dc:	40021000 	.word	0x40021000
 80015e0:	007a1200 	.word	0x007a1200
 80015e4:	003d0900 	.word	0x003d0900

080015e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015ec:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000000 	.word	0x20000000

080015fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001600:	f7ff fff2 	bl	80015e8 <HAL_RCC_GetHCLKFreq>
 8001604:	4601      	mov	r1, r0
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	4a03      	ldr	r2, [pc, #12]	; (8001620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001612:	5cd3      	ldrb	r3, [r2, r3]
 8001614:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000
 8001620:	080024fc 	.word	0x080024fc

08001624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001628:	f7ff ffde 	bl	80015e8 <HAL_RCC_GetHCLKFreq>
 800162c:	4601      	mov	r1, r0
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0adb      	lsrs	r3, r3, #11
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	4a03      	ldr	r2, [pc, #12]	; (8001648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	080024fc 	.word	0x080024fc

0800164c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	220f      	movs	r2, #15
 800165a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_RCC_GetClockConfig+0x58>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0207 	and.w	r2, r3, #7
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_RCC_NMI_IRQHandler+0x20>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b8:	2b80      	cmp	r3, #128	; 0x80
 80016ba:	d104      	bne.n	80016c6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80016bc:	f000 f828 	bl	8001710 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	701a      	strb	r2, [r3, #0]
  }
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	4002100a 	.word	0x4002100a

080016d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <RCC_Delay+0x34>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <RCC_Delay+0x38>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0a5b      	lsrs	r3, r3, #9
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	fb02 f303 	mul.w	r3, r2, r3
 80016ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016f0:	bf00      	nop
  }
  while (Delay --);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	60fa      	str	r2, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f9      	bne.n	80016f0 <RCC_Delay+0x1c>
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000000 	.word	0x20000000
 800170c:	10624dd3 	.word	0x10624dd3

08001710 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e041      	b.n	80017b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f839 	bl	80017ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3304      	adds	r3, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f000 f9c2 	bl	8001ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d001      	beq.n	80017e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e044      	b.n	800186e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <HAL_TIM_Base_Start_IT+0xac>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d018      	beq.n	8001838 <HAL_TIM_Base_Start_IT+0x6c>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1c      	ldr	r2, [pc, #112]	; (800187c <HAL_TIM_Base_Start_IT+0xb0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d013      	beq.n	8001838 <HAL_TIM_Base_Start_IT+0x6c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001818:	d00e      	beq.n	8001838 <HAL_TIM_Base_Start_IT+0x6c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <HAL_TIM_Base_Start_IT+0xb4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d009      	beq.n	8001838 <HAL_TIM_Base_Start_IT+0x6c>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a16      	ldr	r2, [pc, #88]	; (8001884 <HAL_TIM_Base_Start_IT+0xb8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d004      	beq.n	8001838 <HAL_TIM_Base_Start_IT+0x6c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a15      	ldr	r2, [pc, #84]	; (8001888 <HAL_TIM_Base_Start_IT+0xbc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d111      	bne.n	800185c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b06      	cmp	r3, #6
 8001848:	d010      	beq.n	800186c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0201 	orr.w	r2, r2, #1
 8001858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800185a:	e007      	b.n	800186c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	40012c00 	.word	0x40012c00
 800187c:	40013400 	.word	0x40013400
 8001880:	40000400 	.word	0x40000400
 8001884:	40000800 	.word	0x40000800
 8001888:	40000c00 	.word	0x40000c00

0800188c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d122      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d11b      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0202 	mvn.w	r2, #2
 80018b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8ed 	bl	8001aae <HAL_TIM_IC_CaptureCallback>
 80018d4:	e005      	b.n	80018e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f8e0 	bl	8001a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f8ef 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d122      	bne.n	800193c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b04      	cmp	r3, #4
 8001902:	d11b      	bne.n	800193c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0204 	mvn.w	r2, #4
 800190c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2202      	movs	r2, #2
 8001912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8c3 	bl	8001aae <HAL_TIM_IC_CaptureCallback>
 8001928:	e005      	b.n	8001936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f8b6 	bl	8001a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f8c5 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b08      	cmp	r3, #8
 8001948:	d122      	bne.n	8001990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b08      	cmp	r3, #8
 8001956:	d11b      	bne.n	8001990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f06f 0208 	mvn.w	r2, #8
 8001960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2204      	movs	r2, #4
 8001966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f899 	bl	8001aae <HAL_TIM_IC_CaptureCallback>
 800197c:	e005      	b.n	800198a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f88c 	bl	8001a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f89b 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b10      	cmp	r3, #16
 800199c:	d122      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	d11b      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f06f 0210 	mvn.w	r2, #16
 80019b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2208      	movs	r2, #8
 80019ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f86f 	bl	8001aae <HAL_TIM_IC_CaptureCallback>
 80019d0:	e005      	b.n	80019de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f862 	bl	8001a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f871 	bl	8001ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d10e      	bne.n	8001a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d107      	bne.n	8001a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f06f 0201 	mvn.w	r2, #1
 8001a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7fe fcb4 	bl	8000378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	2b80      	cmp	r3, #128	; 0x80
 8001a1c:	d10e      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a28:	2b80      	cmp	r3, #128	; 0x80
 8001a2a:	d107      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f8d7 	bl	8001bea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a46:	2b40      	cmp	r3, #64	; 0x40
 8001a48:	d10e      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a54:	2b40      	cmp	r3, #64	; 0x40
 8001a56:	d107      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f835 	bl	8001ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	d10e      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d107      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0220 	mvn.w	r2, #32
 8001a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f8a2 	bl	8001bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a33      	ldr	r2, [pc, #204]	; (8001bc4 <TIM_Base_SetConfig+0xe0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d013      	beq.n	8001b24 <TIM_Base_SetConfig+0x40>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a32      	ldr	r2, [pc, #200]	; (8001bc8 <TIM_Base_SetConfig+0xe4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00f      	beq.n	8001b24 <TIM_Base_SetConfig+0x40>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0a:	d00b      	beq.n	8001b24 <TIM_Base_SetConfig+0x40>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a2f      	ldr	r2, [pc, #188]	; (8001bcc <TIM_Base_SetConfig+0xe8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <TIM_Base_SetConfig+0x40>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a2e      	ldr	r2, [pc, #184]	; (8001bd0 <TIM_Base_SetConfig+0xec>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d003      	beq.n	8001b24 <TIM_Base_SetConfig+0x40>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a2d      	ldr	r2, [pc, #180]	; (8001bd4 <TIM_Base_SetConfig+0xf0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d108      	bne.n	8001b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <TIM_Base_SetConfig+0xe0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <TIM_Base_SetConfig+0x82>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <TIM_Base_SetConfig+0xe4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00f      	beq.n	8001b66 <TIM_Base_SetConfig+0x82>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4c:	d00b      	beq.n	8001b66 <TIM_Base_SetConfig+0x82>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <TIM_Base_SetConfig+0xe8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <TIM_Base_SetConfig+0x82>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <TIM_Base_SetConfig+0xec>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d003      	beq.n	8001b66 <TIM_Base_SetConfig+0x82>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <TIM_Base_SetConfig+0xf0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d108      	bne.n	8001b78 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <TIM_Base_SetConfig+0xe0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d003      	beq.n	8001bac <TIM_Base_SetConfig+0xc8>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <TIM_Base_SetConfig+0xe4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d103      	bne.n	8001bb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	615a      	str	r2, [r3, #20]
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	40012c00 	.word	0x40012c00
 8001bc8:	40013400 	.word	0x40013400
 8001bcc:	40000400 	.word	0x40000400
 8001bd0:	40000800 	.word	0x40000800
 8001bd4:	40000c00 	.word	0x40000c00

08001bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e03f      	b.n	8001c8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe fcb8 	bl	8000598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2224      	movs	r2, #36	; 0x24
 8001c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fb83 	bl	800234c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b08a      	sub	sp, #40	; 0x28
 8001c9a:	af02      	add	r7, sp, #8
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d17c      	bne.n	8001db0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <HAL_UART_Transmit+0x2c>
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e075      	b.n	8001db2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_UART_Transmit+0x3e>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e06e      	b.n	8001db2 <HAL_UART_Transmit+0x11c>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2221      	movs	r2, #33	; 0x21
 8001ce6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001cea:	f7fe fd49 	bl	8000780 <HAL_GetTick>
 8001cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d04:	d108      	bne.n	8001d18 <HAL_UART_Transmit+0x82>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d104      	bne.n	8001d18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	e003      	b.n	8001d20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001d28:	e02a      	b.n	8001d80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2200      	movs	r2, #0
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f9a7 	bl	8002088 <UART_WaitOnFlagUntilTimeout>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e036      	b.n	8001db2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10b      	bne.n	8001d62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	e007      	b.n	8001d72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	781a      	ldrb	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1cf      	bne.n	8001d2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2200      	movs	r2, #0
 8001d92:	2140      	movs	r1, #64	; 0x40
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f977 	bl	8002088 <UART_WaitOnFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e006      	b.n	8001db2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e000      	b.n	8001db2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001db0:	2302      	movs	r3, #2
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3720      	adds	r7, #32
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	d140      	bne.n	8001e56 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <HAL_UART_Receive_IT+0x26>
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e039      	b.n	8001e58 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_UART_Receive_IT+0x38>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e032      	b.n	8001e58 <HAL_UART_Receive_IT+0x9e>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	88fa      	ldrh	r2, [r7, #6]
 8001e04:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	88fa      	ldrh	r2, [r7, #6]
 8001e0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2222      	movs	r2, #34	; 0x22
 8001e16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e30:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001e56:	2302      	movs	r3, #2
  }
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10d      	bne.n	8001eb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_UART_IRQHandler+0x52>
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f9cc 	bl	800224c <UART_Receive_IT>
      return;
 8001eb4:	e0d1      	b.n	800205a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80b0 	beq.w	800201e <HAL_UART_IRQHandler+0x1ba>
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_UART_IRQHandler+0x70>
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80a5 	beq.w	800201e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HAL_UART_IRQHandler+0x90>
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	f043 0201 	orr.w	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_UART_IRQHandler+0xb0>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0c:	f043 0202 	orr.w	r2, r3, #2
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_UART_IRQHandler+0xd0>
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	f043 0204 	orr.w	r2, r3, #4
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00f      	beq.n	8001f5e <HAL_UART_IRQHandler+0xfa>
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <HAL_UART_IRQHandler+0xee>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f56:	f043 0208 	orr.w	r2, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d078      	beq.n	8002058 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <HAL_UART_IRQHandler+0x11c>
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f966 	bl	800224c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf14      	ite	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	2300      	moveq	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <HAL_UART_IRQHandler+0x144>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d031      	beq.n	800200c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f8b7 	bl	800211c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d023      	beq.n	8002004 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd8:	4a21      	ldr	r2, [pc, #132]	; (8002060 <HAL_UART_IRQHandler+0x1fc>)
 8001fda:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fcb7 	bl	8000954 <HAL_DMA_Abort_IT>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d016      	beq.n	800201a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ffa:	e00e      	b.n	800201a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f83a 	bl	8002076 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002002:	e00a      	b.n	800201a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f836 	bl	8002076 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800200a:	e006      	b.n	800201a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f832 	bl	8002076 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002018:	e01e      	b.n	8002058 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800201a:	bf00      	nop
    return;
 800201c:	e01c      	b.n	8002058 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_UART_IRQHandler+0x1d6>
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8a3 	bl	800217e <UART_Transmit_IT>
    return;
 8002038:	e00f      	b.n	800205a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_UART_IRQHandler+0x1f6>
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8e4 	bl	800221c <UART_EndTransmit_IT>
    return;
 8002054:	bf00      	nop
 8002056:	e000      	b.n	800205a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002058:	bf00      	nop
  }
}
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	08002157 	.word	0x08002157

08002064 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002098:	e02c      	b.n	80020f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d028      	beq.n	80020f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80020a8:	f7fe fb6a 	bl	8000780 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d21d      	bcs.n	80020f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e00f      	b.n	8002114 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	429a      	cmp	r2, r3
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	429a      	cmp	r2, r3
 8002110:	d0c3      	beq.n	800209a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002132:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f7ff ff80 	bl	8002076 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b21      	cmp	r3, #33	; 0x21
 8002190:	d13e      	bne.n	8002210 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219a:	d114      	bne.n	80021c6 <UART_Transmit_IT+0x48>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d110      	bne.n	80021c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	1c9a      	adds	r2, r3, #2
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	621a      	str	r2, [r3, #32]
 80021c4:	e008      	b.n	80021d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	1c59      	adds	r1, r3, #1
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6211      	str	r1, [r2, #32]
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4619      	mov	r1, r3
 80021e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10f      	bne.n	800220c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800220a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e000      	b.n	8002212 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
  }
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002232:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff11 	bl	8002064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b22      	cmp	r3, #34	; 0x22
 800225e:	d170      	bne.n	8002342 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002268:	d117      	bne.n	800229a <UART_Receive_IT+0x4e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d113      	bne.n	800229a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	b29b      	uxth	r3, r3
 8002284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002288:	b29a      	uxth	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	1c9a      	adds	r2, r3, #2
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
 8002298:	e026      	b.n	80022e8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ac:	d007      	beq.n	80022be <UART_Receive_IT+0x72>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10a      	bne.n	80022cc <UART_Receive_IT+0x80>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e008      	b.n	80022de <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4619      	mov	r1, r3
 80022f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d120      	bne.n	800233e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0220 	bic.w	r2, r2, #32
 800230a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800231a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7fe f983 	bl	8000640 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e002      	b.n	8002344 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e000      	b.n	8002344 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002342:	2302      	movs	r3, #2
  }
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002386:	f023 030c 	bic.w	r3, r3, #12
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	430b      	orrs	r3, r1
 8002392:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2c      	ldr	r2, [pc, #176]	; (8002460 <UART_SetConfig+0x114>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d103      	bne.n	80023bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023b4:	f7ff f936 	bl	8001624 <HAL_RCC_GetPCLK2Freq>
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	e002      	b.n	80023c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023bc:	f7ff f91e 	bl	80015fc <HAL_RCC_GetPCLK1Freq>
 80023c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	009a      	lsls	r2, r3, #2
 80023cc:	441a      	add	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	4a22      	ldr	r2, [pc, #136]	; (8002464 <UART_SetConfig+0x118>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	0119      	lsls	r1, r3, #4
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009a      	lsls	r2, r3, #2
 80023ec:	441a      	add	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <UART_SetConfig+0x118>)
 80023fa:	fba3 0302 	umull	r0, r3, r3, r2
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2064      	movs	r0, #100	; 0x64
 8002402:	fb00 f303 	mul.w	r3, r0, r3
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	3332      	adds	r3, #50	; 0x32
 800240c:	4a15      	ldr	r2, [pc, #84]	; (8002464 <UART_SetConfig+0x118>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002418:	4419      	add	r1, r3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	009a      	lsls	r2, r3, #2
 8002424:	441a      	add	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <UART_SetConfig+0x118>)
 8002432:	fba3 0302 	umull	r0, r3, r3, r2
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2064      	movs	r0, #100	; 0x64
 800243a:	fb00 f303 	mul.w	r3, r0, r3
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	3332      	adds	r3, #50	; 0x32
 8002444:	4a07      	ldr	r2, [pc, #28]	; (8002464 <UART_SetConfig+0x118>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	f003 020f 	and.w	r2, r3, #15
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	440a      	add	r2, r1
 8002456:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40013800 	.word	0x40013800
 8002464:	51eb851f 	.word	0x51eb851f

08002468 <__libc_init_array>:
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	2500      	movs	r5, #0
 800246c:	4e0c      	ldr	r6, [pc, #48]	; (80024a0 <__libc_init_array+0x38>)
 800246e:	4c0d      	ldr	r4, [pc, #52]	; (80024a4 <__libc_init_array+0x3c>)
 8002470:	1ba4      	subs	r4, r4, r6
 8002472:	10a4      	asrs	r4, r4, #2
 8002474:	42a5      	cmp	r5, r4
 8002476:	d109      	bne.n	800248c <__libc_init_array+0x24>
 8002478:	f000 f822 	bl	80024c0 <_init>
 800247c:	2500      	movs	r5, #0
 800247e:	4e0a      	ldr	r6, [pc, #40]	; (80024a8 <__libc_init_array+0x40>)
 8002480:	4c0a      	ldr	r4, [pc, #40]	; (80024ac <__libc_init_array+0x44>)
 8002482:	1ba4      	subs	r4, r4, r6
 8002484:	10a4      	asrs	r4, r4, #2
 8002486:	42a5      	cmp	r5, r4
 8002488:	d105      	bne.n	8002496 <__libc_init_array+0x2e>
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002490:	4798      	blx	r3
 8002492:	3501      	adds	r5, #1
 8002494:	e7ee      	b.n	8002474 <__libc_init_array+0xc>
 8002496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800249a:	4798      	blx	r3
 800249c:	3501      	adds	r5, #1
 800249e:	e7f2      	b.n	8002486 <__libc_init_array+0x1e>
 80024a0:	08002504 	.word	0x08002504
 80024a4:	08002504 	.word	0x08002504
 80024a8:	08002504 	.word	0x08002504
 80024ac:	08002508 	.word	0x08002508

080024b0 <memset>:
 80024b0:	4603      	mov	r3, r0
 80024b2:	4402      	add	r2, r0
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d100      	bne.n	80024ba <memset+0xa>
 80024b8:	4770      	bx	lr
 80024ba:	f803 1b01 	strb.w	r1, [r3], #1
 80024be:	e7f9      	b.n	80024b4 <memset+0x4>

080024c0 <_init>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	bf00      	nop
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr

080024cc <_fini>:
 80024cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ce:	bf00      	nop
 80024d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d2:	bc08      	pop	{r3}
 80024d4:	469e      	mov	lr, r3
 80024d6:	4770      	bx	lr
