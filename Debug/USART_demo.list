
USART_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002764  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002974  08002974  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  08002974  08002974  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002974  08002974  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800297c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000220  08002b9c  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08002b9c  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d19d  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fc6  00000000  00000000  0002d3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  0002f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  00030058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001acb7  00000000  00000000  00030bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b4ef  00000000  00000000  0004b8af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a8ae  00000000  00000000  00056d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f164c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003418  00000000  00000000  000f16c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000220 	.word	0x20000220
 8000200:	00000000 	.word	0x00000000
 8000204:	08002930 	.word	0x08002930

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000224 	.word	0x20000224
 8000220:	08002930 	.word	0x08002930

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <MX_GPIO_Init+0x70>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a19      	ldr	r2, [pc, #100]	; (8000294 <MX_GPIO_Init+0x70>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b17      	ldr	r3, [pc, #92]	; (8000294 <MX_GPIO_Init+0x70>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0310 	and.w	r3, r3, #16
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <MX_GPIO_Init+0x70>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a13      	ldr	r2, [pc, #76]	; (8000294 <MX_GPIO_Init+0x70>)
 8000248:	f043 0320 	orr.w	r3, r3, #32
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_GPIO_Init+0x70>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0320 	and.w	r3, r3, #32
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_GPIO_Init+0x70>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <MX_GPIO_Init+0x70>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_GPIO_Init+0x70>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0304 	and.w	r3, r3, #4
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <MX_GPIO_Init+0x70>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <MX_GPIO_Init+0x70>)
 8000278:	f043 0308 	orr.w	r3, r3, #8
 800027c:	6193      	str	r3, [r2, #24]
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <MX_GPIO_Init+0x70>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f003 0308 	and.w	r3, r3, #8
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40021000 	.word	0x40021000

08000298 <kfifo_unused>:

/*
 * internal helper to calculate the unused elements in a fifo
 */
static inline unsigned int kfifo_unused(struct __kfifo *fifo)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	return (fifo->mask + 1) - (fifo->in - fifo->out);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689a      	ldr	r2, [r3, #8]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	6859      	ldr	r1, [r3, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	1acb      	subs	r3, r1, r3
 80002ae:	4413      	add	r3, r2
 80002b0:	3301      	adds	r3, #1
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <kfifo_copy_in>:
}
// EXPORT_SYMBOL(__kfifo_init);

static void kfifo_copy_in(struct __kfifo *fifo, const void *src,
		unsigned int len, unsigned int off)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08a      	sub	sp, #40	; 0x28
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
 80002c8:	603b      	str	r3, [r7, #0]
	unsigned int size = fifo->mask + 1;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	3301      	adds	r3, #1
 80002d0:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int esize = fifo->esize;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	623b      	str	r3, [r7, #32]
	unsigned int l;

	off &= fifo->mask;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	683a      	ldr	r2, [r7, #0]
 80002de:	4013      	ands	r3, r2
 80002e0:	603b      	str	r3, [r7, #0]
	if (esize != 1) {
 80002e2:	6a3b      	ldr	r3, [r7, #32]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d00e      	beq.n	8000306 <kfifo_copy_in+0x4a>
		off *= esize;
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	6a3a      	ldr	r2, [r7, #32]
 80002ec:	fb02 f303 	mul.w	r3, r2, r3
 80002f0:	603b      	str	r3, [r7, #0]
		size *= esize;
 80002f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f4:	6a3a      	ldr	r2, [r7, #32]
 80002f6:	fb02 f303 	mul.w	r3, r2, r3
 80002fa:	627b      	str	r3, [r7, #36]	; 0x24
		len *= esize;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	6a3a      	ldr	r2, [r7, #32]
 8000300:	fb02 f303 	mul.w	r3, r2, r3
 8000304:	607b      	str	r3, [r7, #4]
	}
	l = min(len, size - off);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	61bb      	str	r3, [r7, #24]
 800030a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	1ad3      	subs	r3, r2, r3
 8000310:	617b      	str	r3, [r7, #20]
 8000312:	697a      	ldr	r2, [r7, #20]
 8000314:	69bb      	ldr	r3, [r7, #24]
 8000316:	4293      	cmp	r3, r2
 8000318:	bf28      	it	cs
 800031a:	4613      	movcs	r3, r2
 800031c:	61fb      	str	r3, [r7, #28]

	memcpy(fifo->data + off, src, l);
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	691a      	ldr	r2, [r3, #16]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	4413      	add	r3, r2
 8000326:	69fa      	ldr	r2, [r7, #28]
 8000328:	68b9      	ldr	r1, [r7, #8]
 800032a:	4618      	mov	r0, r3
 800032c:	f002 faec 	bl	8002908 <memcpy>
	memcpy(fifo->data, src + l, len - l);
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	6918      	ldr	r0, [r3, #16]
 8000334:	68ba      	ldr	r2, [r7, #8]
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	18d1      	adds	r1, r2, r3
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	1ad3      	subs	r3, r2, r3
 8000340:	461a      	mov	r2, r3
 8000342:	f002 fae1 	bl	8002908 <memcpy>
	/*
	 * make sure that the data in the fifo is up to date before
	 * incrementing the fifo->in index counter
	 */
	smp_wmb();
 8000346:	f3bf 8f5b 	dmb	ish
}
 800034a:	bf00      	nop
 800034c:	3728      	adds	r7, #40	; 0x28
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}

08000352 <__kfifo_in>:

unsigned int __kfifo_in(struct __kfifo *fifo,
		const void *buf, unsigned int len)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b086      	sub	sp, #24
 8000356:	af00      	add	r7, sp, #0
 8000358:	60f8      	str	r0, [r7, #12]
 800035a:	60b9      	str	r1, [r7, #8]
 800035c:	607a      	str	r2, [r7, #4]
	unsigned int l;

	l = kfifo_unused(fifo);
 800035e:	68f8      	ldr	r0, [r7, #12]
 8000360:	f7ff ff9a 	bl	8000298 <kfifo_unused>
 8000364:	6178      	str	r0, [r7, #20]
	if (len > l)
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	429a      	cmp	r2, r3
 800036c:	d901      	bls.n	8000372 <__kfifo_in+0x20>
		len = l;
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	607b      	str	r3, [r7, #4]

	kfifo_copy_in(fifo, buf, len, fifo->in);
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	68b9      	ldr	r1, [r7, #8]
 800037a:	68f8      	ldr	r0, [r7, #12]
 800037c:	f7ff ff9e 	bl	80002bc <kfifo_copy_in>
	fifo->in += len;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	441a      	add	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	601a      	str	r2, [r3, #0]
	return len;
 800038c:	687b      	ldr	r3, [r7, #4]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <kfifo_copy_out>:
// EXPORT_SYMBOL(__kfifo_in);

static void kfifo_copy_out(struct __kfifo *fifo, void *dst,
		unsigned int len, unsigned int off)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b08a      	sub	sp, #40	; 0x28
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
 80003a2:	603b      	str	r3, [r7, #0]
	unsigned int size = fifo->mask + 1;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	3301      	adds	r3, #1
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int esize = fifo->esize;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	623b      	str	r3, [r7, #32]
	unsigned int l;

	off &= fifo->mask;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	683a      	ldr	r2, [r7, #0]
 80003b8:	4013      	ands	r3, r2
 80003ba:	603b      	str	r3, [r7, #0]
	if (esize != 1) {
 80003bc:	6a3b      	ldr	r3, [r7, #32]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d00e      	beq.n	80003e0 <kfifo_copy_out+0x4a>
		off *= esize;
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	6a3a      	ldr	r2, [r7, #32]
 80003c6:	fb02 f303 	mul.w	r3, r2, r3
 80003ca:	603b      	str	r3, [r7, #0]
		size *= esize;
 80003cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ce:	6a3a      	ldr	r2, [r7, #32]
 80003d0:	fb02 f303 	mul.w	r3, r2, r3
 80003d4:	627b      	str	r3, [r7, #36]	; 0x24
		len *= esize;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6a3a      	ldr	r2, [r7, #32]
 80003da:	fb02 f303 	mul.w	r3, r2, r3
 80003de:	607b      	str	r3, [r7, #4]
	}
	l = min(len, size - off);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	61bb      	str	r3, [r7, #24]
 80003e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	697a      	ldr	r2, [r7, #20]
 80003ee:	69bb      	ldr	r3, [r7, #24]
 80003f0:	4293      	cmp	r3, r2
 80003f2:	bf28      	it	cs
 80003f4:	4613      	movcs	r3, r2
 80003f6:	61fb      	str	r3, [r7, #28]

	memcpy(dst, fifo->data + off, l);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	691a      	ldr	r2, [r3, #16]
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	4413      	add	r3, r2
 8000400:	69fa      	ldr	r2, [r7, #28]
 8000402:	4619      	mov	r1, r3
 8000404:	68b8      	ldr	r0, [r7, #8]
 8000406:	f002 fa7f 	bl	8002908 <memcpy>
	memcpy(dst + l, fifo->data, len - l);
 800040a:	68ba      	ldr	r2, [r7, #8]
 800040c:	69fb      	ldr	r3, [r7, #28]
 800040e:	18d0      	adds	r0, r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6919      	ldr	r1, [r3, #16]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	461a      	mov	r2, r3
 800041c:	f002 fa74 	bl	8002908 <memcpy>
	/*
	 * make sure that the data is copied before
	 * incrementing the fifo->out index counter
	 */
	smp_wmb();
 8000420:	f3bf 8f5b 	dmb	ish
}
 8000424:	bf00      	nop
 8000426:	3728      	adds	r7, #40	; 0x28
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <__kfifo_out_peek>:

unsigned int __kfifo_out_peek(struct __kfifo *fifo,
		void *buf, unsigned int len)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
	unsigned int l;

	l = fifo->in - fifo->out;
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	617b      	str	r3, [r7, #20]
	if (len > l)
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	429a      	cmp	r2, r3
 800044a:	d901      	bls.n	8000450 <__kfifo_out_peek+0x24>
		len = l;
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	607b      	str	r3, [r7, #4]

	kfifo_copy_out(fifo, buf, len, fifo->out);
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	68b9      	ldr	r1, [r7, #8]
 8000458:	68f8      	ldr	r0, [r7, #12]
 800045a:	f7ff ff9c 	bl	8000396 <kfifo_copy_out>
	return len;
 800045e:	687b      	ldr	r3, [r7, #4]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3718      	adds	r7, #24
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <__kfifo_out>:
// EXPORT_SYMBOL(__kfifo_out_peek);

unsigned int __kfifo_out(struct __kfifo *fifo,
		void *buf, unsigned int len)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
	len = __kfifo_out_peek(fifo, buf, len);
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	68b9      	ldr	r1, [r7, #8]
 8000478:	68f8      	ldr	r0, [r7, #12]
 800047a:	f7ff ffd7 	bl	800042c <__kfifo_out_peek>
 800047e:	6078      	str	r0, [r7, #4]
	fifo->out += len;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	685a      	ldr	r2, [r3, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	441a      	add	r2, r3
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	605a      	str	r2, [r3, #4]
	return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <__kfifo_peek_n>:
/*
 * __kfifo_peek_n internal helper function for determinate the length of
 * the next record in the fifo
 */
static unsigned int __kfifo_peek_n(struct __kfifo *fifo, size_t recsize)
{
 8000496:	b480      	push	{r7}
 8000498:	b087      	sub	sp, #28
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	6039      	str	r1, [r7, #0]
	unsigned int l;
	unsigned int mask = fifo->mask;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	613b      	str	r3, [r7, #16]
	unsigned char *data = fifo->data;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	691b      	ldr	r3, [r3, #16]
 80004aa:	60fb      	str	r3, [r7, #12]

	l = __KFIFO_PEEK(data, fifo->out, mask);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	685a      	ldr	r2, [r3, #4]
 80004b0:	693b      	ldr	r3, [r7, #16]
 80004b2:	4013      	ands	r3, r2
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	4413      	add	r3, r2
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	617b      	str	r3, [r7, #20]

	if (--recsize)
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	3b01      	subs	r3, #1
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d00c      	beq.n	80004e2 <__kfifo_peek_n+0x4c>
		l |= __KFIFO_PEEK(data, fifo->out + 1, mask) << 8;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	4013      	ands	r3, r2
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	4413      	add	r3, r2
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	021b      	lsls	r3, r3, #8
 80004da:	461a      	mov	r2, r3
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	4313      	orrs	r3, r2
 80004e0:	617b      	str	r3, [r7, #20]

	return l;
 80004e2:	697b      	ldr	r3, [r7, #20]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	371c      	adds	r7, #28
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <__kfifo_poke_n>:
/*
 * __kfifo_poke_n internal helper function for storeing the length of
 * the record into the fifo
 */
static void __kfifo_poke_n(struct __kfifo *fifo, unsigned int n, size_t recsize)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b087      	sub	sp, #28
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	60b9      	str	r1, [r7, #8]
 80004f8:	607a      	str	r2, [r7, #4]
	unsigned int mask = fifo->mask;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	617b      	str	r3, [r7, #20]
	unsigned char *data = fifo->data;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	691b      	ldr	r3, [r3, #16]
 8000504:	613b      	str	r3, [r7, #16]

	__KFIFO_POKE(data, fifo->in, mask, n);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	4013      	ands	r3, r2
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	4413      	add	r3, r2
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	701a      	strb	r2, [r3, #0]

	if (recsize > 1)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d90a      	bls.n	8000534 <__kfifo_poke_n+0x46>
		__KFIFO_POKE(data, fifo->in + 1, mask, n >> 8);
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	0a19      	lsrs	r1, r3, #8
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	4013      	ands	r3, r2
 800052c:	693a      	ldr	r2, [r7, #16]
 800052e:	4413      	add	r3, r2
 8000530:	b2ca      	uxtb	r2, r1
 8000532:	701a      	strb	r2, [r3, #0]
}
 8000534:	bf00      	nop
 8000536:	371c      	adds	r7, #28
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <__kfifo_in_r>:
}
// EXPORT_SYMBOL(__kfifo_len_r);

unsigned int __kfifo_in_r(struct __kfifo *fifo, const void *buf,
		unsigned int len, size_t recsize)
{
 800053e:	b590      	push	{r4, r7, lr}
 8000540:	b085      	sub	sp, #20
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
 800054a:	603b      	str	r3, [r7, #0]
	if (len + recsize > kfifo_unused(fifo))
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	18d4      	adds	r4, r2, r3
 8000552:	68f8      	ldr	r0, [r7, #12]
 8000554:	f7ff fea0 	bl	8000298 <kfifo_unused>
 8000558:	4603      	mov	r3, r0
 800055a:	429c      	cmp	r4, r3
 800055c:	d901      	bls.n	8000562 <__kfifo_in_r+0x24>
		return 0;
 800055e:	2300      	movs	r3, #0
 8000560:	e016      	b.n	8000590 <__kfifo_in_r+0x52>

	__kfifo_poke_n(fifo, len, recsize);
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f7ff ffc1 	bl	80004ee <__kfifo_poke_n>

	kfifo_copy_in(fifo, buf, len, fifo->in + recsize);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	4413      	add	r3, r2
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	68b9      	ldr	r1, [r7, #8]
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f7ff fe9f 	bl	80002bc <kfifo_copy_in>
	fifo->in += len + recsize;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	440b      	add	r3, r1
 8000588:	441a      	add	r2, r3
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	601a      	str	r2, [r3, #0]
	return len;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bd90      	pop	{r4, r7, pc}

08000598 <kfifo_out_copy_r>:
// EXPORT_SYMBOL(__kfifo_in_r);

static unsigned int kfifo_out_copy_r(struct __kfifo *fifo,
	void *buf, unsigned int len, size_t recsize, unsigned int *n)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	603b      	str	r3, [r7, #0]
	*n = __kfifo_peek_n(fifo, recsize);
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	68f8      	ldr	r0, [r7, #12]
 80005aa:	f7ff ff74 	bl	8000496 <__kfifo_peek_n>
 80005ae:	4602      	mov	r2, r0
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	601a      	str	r2, [r3, #0]

	if (len > *n)
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d902      	bls.n	80005c4 <kfifo_out_copy_r+0x2c>
		len = *n;
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	607b      	str	r3, [r7, #4]

	kfifo_copy_out(fifo, buf, len, fifo->out + recsize);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	68b9      	ldr	r1, [r7, #8]
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	f7ff fee0 	bl	8000396 <kfifo_copy_out>
	return len;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <__kfifo_out_r>:
}
// EXPORT_SYMBOL(__kfifo_out_peek_r);

unsigned int __kfifo_out_r(struct __kfifo *fifo, void *buf,
		unsigned int len, size_t recsize)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
 80005ec:	603b      	str	r3, [r7, #0]
	unsigned int n;

	if (fifo->in == fifo->out)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d101      	bne.n	80005fe <__kfifo_out_r+0x1e>
		return 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e012      	b.n	8000624 <__kfifo_out_r+0x44>

	len = kfifo_out_copy_r(fifo, buf, len, recsize, &n);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	68b9      	ldr	r1, [r7, #8]
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f7ff ffc4 	bl	8000598 <kfifo_out_copy_r>
 8000610:	6078      	str	r0, [r7, #4]
	fifo->out += n + recsize;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	685a      	ldr	r2, [r3, #4]
 8000616:	6979      	ldr	r1, [r7, #20]
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	440b      	add	r3, r1
 800061c:	441a      	add	r2, r3
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	605a      	str	r2, [r3, #4]
	return len;
 8000622:	687b      	ldr	r3, [r7, #4]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0c2      	sub	sp, #264	; 0x108
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 faa9 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f827 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f7ff fdf3 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800063e:	f000 f95b 	bl	80008f8 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (USART1_Rx_flag == HAL_OK)
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <main+0x50>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1fb      	bne.n	8000642 <main+0x16>
    {
      uint8_t USART1_Data[USART1_RX_DATA_SIZE];
      uint16_t USART1_Data_Length;

      USART1_Data_Length = kfifo_out_usart1(USART1_Data, USART1_RX_DATA_SIZE);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fa47 	bl	8000ae4 <kfifo_out_usart1>
 8000656:	4603      	mov	r3, r0
 8000658:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
      HAL_UART_Transmit(&huart1, USART1_Data, USART1_Data_Length, 100);
 800065c:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8000660:	1d39      	adds	r1, r7, #4
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <main+0x54>)
 8000666:	f001 fd42 	bl	80020ee <HAL_UART_Transmit>

      USART1_Rx_flag = HAL_BUSY; //Start USART1 Receive
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <main+0x50>)
 800066c:	2202      	movs	r2, #2
 800066e:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart1, &USART1_Rx_temp, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	4904      	ldr	r1, [pc, #16]	; (8000684 <main+0x58>)
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <main+0x54>)
 8000676:	f001 fdcc 	bl	8002212 <HAL_UART_Receive_IT>
    if (USART1_Rx_flag == HAL_OK)
 800067a:	e7e2      	b.n	8000642 <main+0x16>
 800067c:	2000023d 	.word	0x2000023d
 8000680:	20000288 	.word	0x20000288
 8000684:	2000023c 	.word	0x2000023c

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b090      	sub	sp, #64	; 0x40
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	2228      	movs	r2, #40	; 0x28
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f941 	bl	800291e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0318 	add.w	r3, r7, #24
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fddd 	bl	8001290 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006dc:	f000 f82e 	bl	800073c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006e0:	230f      	movs	r3, #15
 80006e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2102      	movs	r1, #2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f848 	bl	8001790 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000706:	f000 f819 	bl	800073c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800070a:	f001 f92b 	bl	8001964 <HAL_RCC_EnableCSS>
}
 800070e:	bf00      	nop
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d101      	bne.n	800072e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800072a:	f000 fa43 	bl	8000bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40001400 	.word	0x40001400

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <HAL_MspInit+0x5c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_MspInit+0x5c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_MspInit+0x5c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x5c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_MspInit+0x60>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_MspInit+0x60>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010000 	.word	0x40010000

080007ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	2037      	movs	r0, #55	; 0x37
 80007c2:	f000 fac8 	bl	8000d56 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80007c6:	2037      	movs	r0, #55	; 0x37
 80007c8:	f000 fae1 	bl	8000d8e <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <HAL_InitTick+0xa0>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <HAL_InitTick+0xa0>)
 80007d2:	f043 0320 	orr.w	r3, r3, #32
 80007d6:	61d3      	str	r3, [r2, #28]
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <HAL_InitTick+0xa0>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	f003 0320 	and.w	r3, r3, #32
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e4:	f107 0210 	add.w	r2, r7, #16
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 f958 	bl	8001aa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80007f4:	f001 f92e 	bl	8001a54 <HAL_RCC_GetPCLK1Freq>
 80007f8:	4603      	mov	r3, r0
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <HAL_InitTick+0xa4>)
 8000802:	fba2 2303 	umull	r2, r3, r2, r3
 8000806:	0c9b      	lsrs	r3, r3, #18
 8000808:	3b01      	subs	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_InitTick+0xa8>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_InitTick+0xac>)
 8000810:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_InitTick+0xa8>)
 8000814:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000818:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_InitTick+0xa8>)
 800081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_InitTick+0xa8>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_InitTick+0xa8>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800082c:	4809      	ldr	r0, [pc, #36]	; (8000854 <HAL_InitTick+0xa8>)
 800082e:	f001 f9a1 	bl	8001b74 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d104      	bne.n	8000842 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <HAL_InitTick+0xa8>)
 800083a:	f001 f9f3 	bl	8001c24 <HAL_TIM_Base_Start_IT>
 800083e:	4603      	mov	r3, r0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3730      	adds	r7, #48	; 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	431bde83 	.word	0x431bde83
 8000854:	20000240 	.word	0x20000240
 8000858:	40001400 	.word	0x40001400

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000860:	f001 f950 	bl	8001b04 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <HardFault_Handler+0x4>

0800086e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <BusFault_Handler+0x4>

0800087a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <UsageFault_Handler+0x4>

08000880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <USART1_IRQHandler+0x10>)
 80008b6:	f001 fd01 	bl	80022bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  // USER_UART_IRQHandler(&huart1);
  /* USER CODE END USART1_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000288 	.word	0x20000288

080008c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <TIM7_IRQHandler+0x10>)
 80008ca:	f001 fa0b 	bl	8001ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000240 	.word	0x20000240

080008d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <__kfifo_uint_must_check_helper>:
	}


static inline unsigned int __must_check
__kfifo_uint_must_check_helper(unsigned int val)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	return val;
 80008ec:	687b      	ldr	r3, [r7, #4]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_USART1_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000904:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART1_UART_Init+0x4c>)
 8000930:	f001 fb90 	bl	8002054 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f7ff feff 	bl	800073c <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000288 	.word	0x20000288
 8000948:	40013800 	.word	0x40013800

0800094c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
  if (uartHandle->Instance == USART1)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a20      	ldr	r2, [pc, #128]	; (80009e8 <HAL_UART_MspInit+0x9c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d139      	bne.n	80009e0 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <HAL_UART_MspInit+0xa0>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <HAL_UART_MspInit+0xa0>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_UART_MspInit+0xa0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <HAL_UART_MspInit+0xa0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a18      	ldr	r2, [pc, #96]	; (80009ec <HAL_UART_MspInit+0xa0>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_UART_MspInit+0xa0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800099c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	4619      	mov	r1, r3
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <HAL_UART_MspInit+0xa4>)
 80009b2:	f000 fb03 	bl	8000fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <HAL_UART_MspInit+0xa4>)
 80009cc:	f000 faf6 	bl	8000fbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2101      	movs	r1, #1
 80009d4:	2025      	movs	r0, #37	; 0x25
 80009d6:	f000 f9be 	bl	8000d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009da:	2025      	movs	r0, #37	; 0x25
 80009dc:	f000 f9d7 	bl	8000d8e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40013800 	.word	0x40013800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010800 	.word	0x40010800

080009f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a32      	ldr	r2, [pc, #200]	; (8000acc <HAL_UART_RxCpltCallback+0xd8>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d15f      	bne.n	8000ac6 <HAL_UART_RxCpltCallback+0xd2>
  {
    static uint16_t USART1_Rx_Number = 0;

    if (USART1_Rx_flag != HAL_OK)
 8000a06:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <HAL_UART_RxCpltCallback+0xdc>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d05b      	beq.n	8000ac6 <HAL_UART_RxCpltCallback+0xd2>
    {
      if (USART1_Rx_Number != 0) //Receive the following data
 8000a0e:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <HAL_UART_RxCpltCallback+0xe0>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d02a      	beq.n	8000a6c <HAL_UART_RxCpltCallback+0x78>
      {
        kfifo_in(&usart1_Rxkfifo, &USART1_Rx_temp, 1);
 8000a16:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <HAL_UART_RxCpltCallback+0xe4>)
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <HAL_UART_RxCpltCallback+0xe8>)
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d006      	beq.n	8000a3e <HAL_UART_RxCpltCallback+0x4a>
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	6979      	ldr	r1, [r7, #20]
 8000a36:	68b8      	ldr	r0, [r7, #8]
 8000a38:	f7ff fd81 	bl	800053e <__kfifo_in_r>
 8000a3c:	e004      	b.n	8000a48 <HAL_UART_RxCpltCallback+0x54>
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	6979      	ldr	r1, [r7, #20]
 8000a42:	68b8      	ldr	r0, [r7, #8]
 8000a44:	f7ff fc85 	bl	8000352 <__kfifo_in>
        USART1_Rx_Number++;
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <HAL_UART_RxCpltCallback+0xe0>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <HAL_UART_RxCpltCallback+0xe0>)
 8000a52:	801a      	strh	r2, [r3, #0]

        if (USART1_Rx_Number == USART1_RX_DATA_SIZE) //Receive all data
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <HAL_UART_RxCpltCallback+0xe0>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a5c:	d12e      	bne.n	8000abc <HAL_UART_RxCpltCallback+0xc8>
        {
          USART1_Rx_Number = 0;
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <HAL_UART_RxCpltCallback+0xe0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	801a      	strh	r2, [r3, #0]
          USART1_Rx_flag = HAL_OK;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <HAL_UART_RxCpltCallback+0xdc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
          return; // if the last data is 0xA5, the function should be return
 8000a6a:	e02c      	b.n	8000ac6 <HAL_UART_RxCpltCallback+0xd2>
        }
      }
      else if (USART1_Rx_temp == 0xA5 && USART1_Rx_Number == 0) //Receive the first data
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <HAL_UART_RxCpltCallback+0xe8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2ba5      	cmp	r3, #165	; 0xa5
 8000a72:	d120      	bne.n	8000ab6 <HAL_UART_RxCpltCallback+0xc2>
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_UART_RxCpltCallback+0xe0>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d11c      	bne.n	8000ab6 <HAL_UART_RxCpltCallback+0xc2>
      {
        kfifo_in(&usart1_Rxkfifo, &USART1_Rx_temp, 1);
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_UART_RxCpltCallback+0xe4>)
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_UART_RxCpltCallback+0xe8>)
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a84:	2301      	movs	r3, #1
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
 8000a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	6a3b      	ldr	r3, [r7, #32]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <HAL_UART_RxCpltCallback+0xb0>
 8000a96:	6a3b      	ldr	r3, [r7, #32]
 8000a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a9c:	69f8      	ldr	r0, [r7, #28]
 8000a9e:	f7ff fd4e 	bl	800053e <__kfifo_in_r>
 8000aa2:	e004      	b.n	8000aae <HAL_UART_RxCpltCallback+0xba>
 8000aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000aa8:	69f8      	ldr	r0, [r7, #28]
 8000aaa:	f7ff fc52 	bl	8000352 <__kfifo_in>
        USART1_Rx_Number = 1;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_UART_RxCpltCallback+0xe0>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	801a      	strh	r2, [r3, #0]
 8000ab4:	e002      	b.n	8000abc <HAL_UART_RxCpltCallback+0xc8>
      }
      else
      {
    	  USART1_Rx_flag = HAL_ERROR;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_UART_RxCpltCallback+0xdc>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
      }
      HAL_UART_Receive_IT(&huart1, &USART1_Rx_temp, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	4907      	ldr	r1, [pc, #28]	; (8000adc <HAL_UART_RxCpltCallback+0xe8>)
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <HAL_UART_RxCpltCallback+0xec>)
 8000ac2:	f001 fba6 	bl	8002212 <HAL_UART_Receive_IT>
    }
  }
}
 8000ac6:	3730      	adds	r7, #48	; 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40013800 	.word	0x40013800
 8000ad0:	2000023d 	.word	0x2000023d
 8000ad4:	2000023e 	.word	0x2000023e
 8000ad8:	20000004 	.word	0x20000004
 8000adc:	2000023c 	.word	0x2000023c
 8000ae0:	20000288 	.word	0x20000288

08000ae4 <kfifo_out_usart1>:

uint32_t kfifo_out_usart1(uint8_t *buff, uint32_t size)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t Data_Out_Length;

  Data_Out_Length = kfifo_out(&usart1_Rxkfifo, buff, size);
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <kfifo_out_usart1+0x54>)
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d007      	beq.n	8000b18 <kfifo_out_usart1+0x34>
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	69b9      	ldr	r1, [r7, #24]
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff fd66 	bl	80005e0 <__kfifo_out_r>
 8000b14:	4603      	mov	r3, r0
 8000b16:	e005      	b.n	8000b24 <kfifo_out_usart1+0x40>
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	69b9      	ldr	r1, [r7, #24]
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f7ff fca3 	bl	8000468 <__kfifo_out>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fedd 	bl	80008e4 <__kfifo_uint_must_check_helper>
 8000b2a:	60b8      	str	r0, [r7, #8]

  return Data_Out_Length;
 8000b2c:	68bb      	ldr	r3, [r7, #8]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000004 	.word	0x20000004

08000b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b3e:	e003      	b.n	8000b48 <LoopCopyDataInit>

08000b40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b46:	3104      	adds	r1, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b50:	d3f6      	bcc.n	8000b40 <CopyDataInit>
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b54:	e002      	b.n	8000b5c <LoopFillZerobss>

08000b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b58:	f842 3b04 	str.w	r3, [r2], #4

08000b5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b60:	d3f9      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b62:	f7ff feb9 	bl	80008d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f001 feab 	bl	80028c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6a:	f7ff fd5f 	bl	800062c <main>
  bx lr
 8000b6e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b70:	0800297c 	.word	0x0800297c
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b78:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 8000b7c:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 8000b80:	200002cc 	.word	0x200002cc

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x28>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x28>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f8d1 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fe04 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fdd0 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	2000021c 	.word	0x2000021c
 8000bd4:	200002c8 	.word	0x200002c8

08000bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	200002c8 	.word	0x200002c8

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4906      	ldr	r1, [pc, #24]	; (8000c84 <__NVIC_EnableIRQ+0x34>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff4f 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff64 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ffb2 	bl	8000cdc <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff81 	bl	8000c88 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff57 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d005      	beq.n	8000dce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e0d6      	b.n	8000f7c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 020e 	bic.w	r2, r2, #14
 8000ddc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0201 	bic.w	r2, r2, #1
 8000dec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b64      	ldr	r3, [pc, #400]	; (8000f88 <HAL_DMA_Abort_IT+0x1dc>)
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d958      	bls.n	8000eac <HAL_DMA_Abort_IT+0x100>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a63      	ldr	r2, [pc, #396]	; (8000f8c <HAL_DMA_Abort_IT+0x1e0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d04f      	beq.n	8000ea4 <HAL_DMA_Abort_IT+0xf8>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a61      	ldr	r2, [pc, #388]	; (8000f90 <HAL_DMA_Abort_IT+0x1e4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d048      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xf4>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a60      	ldr	r2, [pc, #384]	; (8000f94 <HAL_DMA_Abort_IT+0x1e8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d040      	beq.n	8000e9a <HAL_DMA_Abort_IT+0xee>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a5e      	ldr	r2, [pc, #376]	; (8000f98 <HAL_DMA_Abort_IT+0x1ec>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d038      	beq.n	8000e94 <HAL_DMA_Abort_IT+0xe8>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a5d      	ldr	r2, [pc, #372]	; (8000f9c <HAL_DMA_Abort_IT+0x1f0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d030      	beq.n	8000e8e <HAL_DMA_Abort_IT+0xe2>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a5b      	ldr	r2, [pc, #364]	; (8000fa0 <HAL_DMA_Abort_IT+0x1f4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d028      	beq.n	8000e88 <HAL_DMA_Abort_IT+0xdc>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a53      	ldr	r2, [pc, #332]	; (8000f88 <HAL_DMA_Abort_IT+0x1dc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d020      	beq.n	8000e82 <HAL_DMA_Abort_IT+0xd6>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a57      	ldr	r2, [pc, #348]	; (8000fa4 <HAL_DMA_Abort_IT+0x1f8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d019      	beq.n	8000e7e <HAL_DMA_Abort_IT+0xd2>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a56      	ldr	r2, [pc, #344]	; (8000fa8 <HAL_DMA_Abort_IT+0x1fc>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d012      	beq.n	8000e7a <HAL_DMA_Abort_IT+0xce>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a54      	ldr	r2, [pc, #336]	; (8000fac <HAL_DMA_Abort_IT+0x200>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00a      	beq.n	8000e74 <HAL_DMA_Abort_IT+0xc8>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a53      	ldr	r2, [pc, #332]	; (8000fb0 <HAL_DMA_Abort_IT+0x204>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d102      	bne.n	8000e6e <HAL_DMA_Abort_IT+0xc2>
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	e01b      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xfa>
 8000e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e72:	e018      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xfa>
 8000e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e78:	e015      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xfa>
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	e013      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xfa>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e011      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xfa>
 8000e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e86:	e00e      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xfa>
 8000e88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e8c:	e00b      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xfa>
 8000e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e92:	e008      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xfa>
 8000e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e98:	e005      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xfa>
 8000e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9e:	e002      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xfa>
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	e000      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xfa>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	4a43      	ldr	r2, [pc, #268]	; (8000fb4 <HAL_DMA_Abort_IT+0x208>)
 8000ea8:	6053      	str	r3, [r2, #4]
 8000eaa:	e057      	b.n	8000f5c <HAL_DMA_Abort_IT+0x1b0>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a36      	ldr	r2, [pc, #216]	; (8000f8c <HAL_DMA_Abort_IT+0x1e0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d04f      	beq.n	8000f56 <HAL_DMA_Abort_IT+0x1aa>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a35      	ldr	r2, [pc, #212]	; (8000f90 <HAL_DMA_Abort_IT+0x1e4>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d048      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x1a6>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a33      	ldr	r2, [pc, #204]	; (8000f94 <HAL_DMA_Abort_IT+0x1e8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d040      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x1a0>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a32      	ldr	r2, [pc, #200]	; (8000f98 <HAL_DMA_Abort_IT+0x1ec>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d038      	beq.n	8000f46 <HAL_DMA_Abort_IT+0x19a>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <HAL_DMA_Abort_IT+0x1f0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d030      	beq.n	8000f40 <HAL_DMA_Abort_IT+0x194>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <HAL_DMA_Abort_IT+0x1f4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d028      	beq.n	8000f3a <HAL_DMA_Abort_IT+0x18e>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <HAL_DMA_Abort_IT+0x1dc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d020      	beq.n	8000f34 <HAL_DMA_Abort_IT+0x188>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a2b      	ldr	r2, [pc, #172]	; (8000fa4 <HAL_DMA_Abort_IT+0x1f8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d019      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x184>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <HAL_DMA_Abort_IT+0x1fc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d012      	beq.n	8000f2c <HAL_DMA_Abort_IT+0x180>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a28      	ldr	r2, [pc, #160]	; (8000fac <HAL_DMA_Abort_IT+0x200>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d00a      	beq.n	8000f26 <HAL_DMA_Abort_IT+0x17a>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <HAL_DMA_Abort_IT+0x204>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d102      	bne.n	8000f20 <HAL_DMA_Abort_IT+0x174>
 8000f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1e:	e01b      	b.n	8000f58 <HAL_DMA_Abort_IT+0x1ac>
 8000f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f24:	e018      	b.n	8000f58 <HAL_DMA_Abort_IT+0x1ac>
 8000f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2a:	e015      	b.n	8000f58 <HAL_DMA_Abort_IT+0x1ac>
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	e013      	b.n	8000f58 <HAL_DMA_Abort_IT+0x1ac>
 8000f30:	2301      	movs	r3, #1
 8000f32:	e011      	b.n	8000f58 <HAL_DMA_Abort_IT+0x1ac>
 8000f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f38:	e00e      	b.n	8000f58 <HAL_DMA_Abort_IT+0x1ac>
 8000f3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f3e:	e00b      	b.n	8000f58 <HAL_DMA_Abort_IT+0x1ac>
 8000f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f44:	e008      	b.n	8000f58 <HAL_DMA_Abort_IT+0x1ac>
 8000f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4a:	e005      	b.n	8000f58 <HAL_DMA_Abort_IT+0x1ac>
 8000f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f50:	e002      	b.n	8000f58 <HAL_DMA_Abort_IT+0x1ac>
 8000f52:	2310      	movs	r3, #16
 8000f54:	e000      	b.n	8000f58 <HAL_DMA_Abort_IT+0x1ac>
 8000f56:	2301      	movs	r3, #1
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_DMA_Abort_IT+0x20c>)
 8000f5a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	4798      	blx	r3
    } 
  }
  return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020080 	.word	0x40020080
 8000f8c:	40020008 	.word	0x40020008
 8000f90:	4002001c 	.word	0x4002001c
 8000f94:	40020030 	.word	0x40020030
 8000f98:	40020044 	.word	0x40020044
 8000f9c:	40020058 	.word	0x40020058
 8000fa0:	4002006c 	.word	0x4002006c
 8000fa4:	40020408 	.word	0x40020408
 8000fa8:	4002041c 	.word	0x4002041c
 8000fac:	40020430 	.word	0x40020430
 8000fb0:	40020444 	.word	0x40020444
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	40020000 	.word	0x40020000

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b08b      	sub	sp, #44	; 0x2c
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e133      	b.n	8001238 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 8122 	bne.w	8001232 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d034      	beq.n	8001060 <HAL_GPIO_Init+0xa4>
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d80d      	bhi.n	8001016 <HAL_GPIO_Init+0x5a>
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x9a>
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d804      	bhi.n	800100c <HAL_GPIO_Init+0x50>
 8001002:	2b00      	cmp	r3, #0
 8001004:	d031      	beq.n	800106a <HAL_GPIO_Init+0xae>
 8001006:	2b01      	cmp	r3, #1
 8001008:	d01c      	beq.n	8001044 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100a:	e048      	b.n	800109e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800100c:	2b03      	cmp	r3, #3
 800100e:	d043      	beq.n	8001098 <HAL_GPIO_Init+0xdc>
 8001010:	2b11      	cmp	r3, #17
 8001012:	d01b      	beq.n	800104c <HAL_GPIO_Init+0x90>
          break;
 8001014:	e043      	b.n	800109e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001016:	4a8f      	ldr	r2, [pc, #572]	; (8001254 <HAL_GPIO_Init+0x298>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d026      	beq.n	800106a <HAL_GPIO_Init+0xae>
 800101c:	4a8d      	ldr	r2, [pc, #564]	; (8001254 <HAL_GPIO_Init+0x298>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <HAL_GPIO_Init+0x74>
 8001022:	4a8d      	ldr	r2, [pc, #564]	; (8001258 <HAL_GPIO_Init+0x29c>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d020      	beq.n	800106a <HAL_GPIO_Init+0xae>
 8001028:	4a8c      	ldr	r2, [pc, #560]	; (800125c <HAL_GPIO_Init+0x2a0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01d      	beq.n	800106a <HAL_GPIO_Init+0xae>
          break;
 800102e:	e036      	b.n	800109e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001030:	4a8b      	ldr	r2, [pc, #556]	; (8001260 <HAL_GPIO_Init+0x2a4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0xae>
 8001036:	4a8b      	ldr	r2, [pc, #556]	; (8001264 <HAL_GPIO_Init+0x2a8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d016      	beq.n	800106a <HAL_GPIO_Init+0xae>
 800103c:	4a8a      	ldr	r2, [pc, #552]	; (8001268 <HAL_GPIO_Init+0x2ac>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0xae>
          break;
 8001042:	e02c      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	623b      	str	r3, [r7, #32]
          break;
 800104a:	e028      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	3304      	adds	r3, #4
 8001052:	623b      	str	r3, [r7, #32]
          break;
 8001054:	e023      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	3308      	adds	r3, #8
 800105c:	623b      	str	r3, [r7, #32]
          break;
 800105e:	e01e      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	330c      	adds	r3, #12
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e019      	b.n	800109e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001072:	2304      	movs	r3, #4
 8001074:	623b      	str	r3, [r7, #32]
          break;
 8001076:	e012      	b.n	800109e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d105      	bne.n	800108c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001080:	2308      	movs	r3, #8
 8001082:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	611a      	str	r2, [r3, #16]
          break;
 800108a:	e008      	b.n	800109e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800108c:	2308      	movs	r3, #8
 800108e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	615a      	str	r2, [r3, #20]
          break;
 8001096:	e002      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
          break;
 800109c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2bff      	cmp	r3, #255	; 0xff
 80010a2:	d801      	bhi.n	80010a8 <HAL_GPIO_Init+0xec>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	e001      	b.n	80010ac <HAL_GPIO_Init+0xf0>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3304      	adds	r3, #4
 80010ac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2bff      	cmp	r3, #255	; 0xff
 80010b2:	d802      	bhi.n	80010ba <HAL_GPIO_Init+0xfe>
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x104>
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	3b08      	subs	r3, #8
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	210f      	movs	r1, #15
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	401a      	ands	r2, r3
 80010d2:	6a39      	ldr	r1, [r7, #32]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	431a      	orrs	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80a2 	beq.w	8001232 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a5e      	ldr	r2, [pc, #376]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001106:	4a5a      	ldr	r2, [pc, #360]	; (8001270 <HAL_GPIO_Init+0x2b4>)
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4013      	ands	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a51      	ldr	r2, [pc, #324]	; (8001274 <HAL_GPIO_Init+0x2b8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01f      	beq.n	8001172 <HAL_GPIO_Init+0x1b6>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a50      	ldr	r2, [pc, #320]	; (8001278 <HAL_GPIO_Init+0x2bc>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x1b2>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4f      	ldr	r2, [pc, #316]	; (800127c <HAL_GPIO_Init+0x2c0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x1ae>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <HAL_GPIO_Init+0x2c4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x1aa>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4d      	ldr	r2, [pc, #308]	; (8001284 <HAL_GPIO_Init+0x2c8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x1a6>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4c      	ldr	r2, [pc, #304]	; (8001288 <HAL_GPIO_Init+0x2cc>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x1a2>
 800115a:	2305      	movs	r3, #5
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_Init+0x1b8>
 800115e:	2306      	movs	r3, #6
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x1b8>
 8001162:	2304      	movs	r3, #4
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x1b8>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x1b8>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x1b8>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x1b8>
 8001172:	2300      	movs	r3, #0
 8001174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001184:	493a      	ldr	r1, [pc, #232]	; (8001270 <HAL_GPIO_Init+0x2b4>)
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800119e:	4b3b      	ldr	r3, [pc, #236]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	493a      	ldr	r1, [pc, #232]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
 80011aa:	e006      	b.n	80011ba <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011ac:	4b37      	ldr	r3, [pc, #220]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4935      	ldr	r1, [pc, #212]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4930      	ldr	r1, [pc, #192]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	604b      	str	r3, [r1, #4]
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	43db      	mvns	r3, r3
 80011dc:	492b      	ldr	r1, [pc, #172]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011de:	4013      	ands	r3, r2
 80011e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	4926      	ldr	r1, [pc, #152]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	608b      	str	r3, [r1, #8]
 80011fa:	e006      	b.n	800120a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_GPIO_Init+0x2d0>)
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	43db      	mvns	r3, r3
 8001204:	4921      	ldr	r1, [pc, #132]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001206:	4013      	ands	r3, r2
 8001208:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	491c      	ldr	r1, [pc, #112]	; (800128c <HAL_GPIO_Init+0x2d0>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	60cb      	str	r3, [r1, #12]
 8001222:	e006      	b.n	8001232 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_GPIO_Init+0x2d0>)
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	43db      	mvns	r3, r3
 800122c:	4917      	ldr	r1, [pc, #92]	; (800128c <HAL_GPIO_Init+0x2d0>)
 800122e:	4013      	ands	r3, r2
 8001230:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	3301      	adds	r3, #1
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	fa22 f303 	lsr.w	r3, r2, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	f47f aec4 	bne.w	8000fd0 <HAL_GPIO_Init+0x14>
  }
}
 8001248:	bf00      	nop
 800124a:	372c      	adds	r7, #44	; 0x2c
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	10210000 	.word	0x10210000
 8001258:	10110000 	.word	0x10110000
 800125c:	10120000 	.word	0x10120000
 8001260:	10310000 	.word	0x10310000
 8001264:	10320000 	.word	0x10320000
 8001268:	10220000 	.word	0x10220000
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000
 8001274:	40010800 	.word	0x40010800
 8001278:	40010c00 	.word	0x40010c00
 800127c:	40011000 	.word	0x40011000
 8001280:	40011400 	.word	0x40011400
 8001284:	40011800 	.word	0x40011800
 8001288:	40011c00 	.word	0x40011c00
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e26c      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8087 	beq.w	80013be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b0:	4b92      	ldr	r3, [pc, #584]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d00c      	beq.n	80012d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012bc:	4b8f      	ldr	r3, [pc, #572]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d112      	bne.n	80012ee <HAL_RCC_OscConfig+0x5e>
 80012c8:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d4:	d10b      	bne.n	80012ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d6:	4b89      	ldr	r3, [pc, #548]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d06c      	beq.n	80013bc <HAL_RCC_OscConfig+0x12c>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d168      	bne.n	80013bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e246      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f6:	d106      	bne.n	8001306 <HAL_RCC_OscConfig+0x76>
 80012f8:	4b80      	ldr	r3, [pc, #512]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a7f      	ldr	r2, [pc, #508]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e02e      	b.n	8001364 <HAL_RCC_OscConfig+0xd4>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x98>
 800130e:	4b7b      	ldr	r3, [pc, #492]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a7a      	ldr	r2, [pc, #488]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b78      	ldr	r3, [pc, #480]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a77      	ldr	r2, [pc, #476]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e01d      	b.n	8001364 <HAL_RCC_OscConfig+0xd4>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001330:	d10c      	bne.n	800134c <HAL_RCC_OscConfig+0xbc>
 8001332:	4b72      	ldr	r3, [pc, #456]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a71      	ldr	r2, [pc, #452]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4b6f      	ldr	r3, [pc, #444]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6e      	ldr	r2, [pc, #440]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e00b      	b.n	8001364 <HAL_RCC_OscConfig+0xd4>
 800134c:	4b6b      	ldr	r3, [pc, #428]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a6a      	ldr	r2, [pc, #424]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b68      	ldr	r3, [pc, #416]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a67      	ldr	r2, [pc, #412]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 800135e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001362:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d013      	beq.n	8001394 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fc34 	bl	8000bd8 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fc30 	bl	8000bd8 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e1fa      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0xe4>
 8001392:	e014      	b.n	80013be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fc20 	bl	8000bd8 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fc1c 	bl	8000bd8 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e1e6      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x10c>
 80013ba:	e000      	b.n	80013be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d063      	beq.n	8001492 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ca:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013d6:	4b49      	ldr	r3, [pc, #292]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d11c      	bne.n	800141c <HAL_RCC_OscConfig+0x18c>
 80013e2:	4b46      	ldr	r3, [pc, #280]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d116      	bne.n	800141c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	4b43      	ldr	r3, [pc, #268]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x176>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e1ba      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4939      	ldr	r1, [pc, #228]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	e03a      	b.n	8001492 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d020      	beq.n	8001466 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001424:	4b36      	ldr	r3, [pc, #216]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fbd5 	bl	8000bd8 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fbd1 	bl	8000bd8 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e19b      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4927      	ldr	r1, [pc, #156]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
 8001464:	e015      	b.n	8001492 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fbb4 	bl	8000bd8 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fbb0 	bl	8000bd8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e17a      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d03a      	beq.n	8001514 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d019      	beq.n	80014da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_RCC_OscConfig+0x274>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ac:	f7ff fb94 	bl	8000bd8 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fb90 	bl	8000bd8 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e15a      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014d2:	2001      	movs	r0, #1
 80014d4:	f000 fb2a 	bl	8001b2c <RCC_Delay>
 80014d8:	e01c      	b.n	8001514 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_RCC_OscConfig+0x274>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e0:	f7ff fb7a 	bl	8000bd8 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e6:	e00f      	b.n	8001508 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff fb76 	bl	8000bd8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d908      	bls.n	8001508 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e140      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	42420000 	.word	0x42420000
 8001504:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	4b9e      	ldr	r3, [pc, #632]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e9      	bne.n	80014e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80a6 	beq.w	800166e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b97      	ldr	r3, [pc, #604]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10d      	bne.n	800154e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b94      	ldr	r3, [pc, #592]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a93      	ldr	r2, [pc, #588]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b91      	ldr	r3, [pc, #580]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b8e      	ldr	r3, [pc, #568]	; (8001788 <HAL_RCC_OscConfig+0x4f8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d118      	bne.n	800158c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155a:	4b8b      	ldr	r3, [pc, #556]	; (8001788 <HAL_RCC_OscConfig+0x4f8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a8a      	ldr	r2, [pc, #552]	; (8001788 <HAL_RCC_OscConfig+0x4f8>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff fb37 	bl	8000bd8 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156e:	f7ff fb33 	bl	8000bd8 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b64      	cmp	r3, #100	; 0x64
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0fd      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_RCC_OscConfig+0x4f8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x312>
 8001594:	4b7b      	ldr	r3, [pc, #492]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4a7a      	ldr	r2, [pc, #488]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6213      	str	r3, [r2, #32]
 80015a0:	e02d      	b.n	80015fe <HAL_RCC_OscConfig+0x36e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x334>
 80015aa:	4b76      	ldr	r3, [pc, #472]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4a75      	ldr	r2, [pc, #468]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6213      	str	r3, [r2, #32]
 80015b6:	4b73      	ldr	r3, [pc, #460]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4a72      	ldr	r2, [pc, #456]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	6213      	str	r3, [r2, #32]
 80015c2:	e01c      	b.n	80015fe <HAL_RCC_OscConfig+0x36e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x356>
 80015cc:	4b6d      	ldr	r3, [pc, #436]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4a6c      	ldr	r2, [pc, #432]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	4b6a      	ldr	r3, [pc, #424]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a69      	ldr	r2, [pc, #420]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6213      	str	r3, [r2, #32]
 80015e4:	e00b      	b.n	80015fe <HAL_RCC_OscConfig+0x36e>
 80015e6:	4b67      	ldr	r3, [pc, #412]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4a66      	ldr	r2, [pc, #408]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6213      	str	r3, [r2, #32]
 80015f2:	4b64      	ldr	r3, [pc, #400]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a63      	ldr	r2, [pc, #396]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	f023 0304 	bic.w	r3, r3, #4
 80015fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d015      	beq.n	8001632 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff fae7 	bl	8000bd8 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f7ff fae3 	bl	8000bd8 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e0ab      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001624:	4b57      	ldr	r3, [pc, #348]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0ee      	beq.n	800160e <HAL_RCC_OscConfig+0x37e>
 8001630:	e014      	b.n	800165c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff fad1 	bl	8000bd8 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163a:	f7ff facd 	bl	8000bd8 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f241 3288 	movw	r2, #5000	; 0x1388
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e095      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001650:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1ee      	bne.n	800163a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d105      	bne.n	800166e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001662:	4b48      	ldr	r3, [pc, #288]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a47      	ldr	r2, [pc, #284]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800166c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8081 	beq.w	800177a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001678:	4b42      	ldr	r3, [pc, #264]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b08      	cmp	r3, #8
 8001682:	d061      	beq.n	8001748 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d146      	bne.n	800171a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	4b3f      	ldr	r3, [pc, #252]	; (800178c <HAL_RCC_OscConfig+0x4fc>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff faa1 	bl	8000bd8 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff fa9d 	bl	8000bd8 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e067      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ac:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c0:	d108      	bne.n	80016d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016c2:	4b30      	ldr	r3, [pc, #192]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	492d      	ldr	r1, [pc, #180]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d4:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a19      	ldr	r1, [r3, #32]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	430b      	orrs	r3, r1
 80016e6:	4927      	ldr	r1, [pc, #156]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_RCC_OscConfig+0x4fc>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff fa71 	bl	8000bd8 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff fa6d 	bl	8000bd8 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e037      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x46a>
 8001718:	e02f      	b.n	800177a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_RCC_OscConfig+0x4fc>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fa5a 	bl	8000bd8 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff fa56 	bl	8000bd8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e020      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x498>
 8001746:	e018      	b.n	800177a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e013      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	429a      	cmp	r2, r3
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	40007000 	.word	0x40007000
 800178c:	42420060 	.word	0x42420060

08001790 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0d0      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017a4:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d910      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b67      	ldr	r3, [pc, #412]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 0207 	bic.w	r2, r3, #7
 80017ba:	4965      	ldr	r1, [pc, #404]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800180e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d040      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d115      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4b41      	ldr	r3, [pc, #260]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e073      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185e:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e06b      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4b39      	ldr	r3, [pc, #228]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4936      	ldr	r1, [pc, #216]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7ff f9aa 	bl	8000bd8 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7ff f9a6 	bl	8000bd8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e053      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d210      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 0207 	bic.w	r2, r3, #7
 80018c6:	4922      	ldr	r1, [pc, #136]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f82d 	bl	800197c <HAL_RCC_GetSysClockFreq>
 8001922:	4601      	mov	r1, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	fa21 f303 	lsr.w	r3, r1, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1cc>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1d0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe ff34 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40022000 	.word	0x40022000
 8001954:	40021000 	.word	0x40021000
 8001958:	0800295c 	.word	0x0800295c
 800195c:	20000000 	.word	0x20000000
 8001960:	20000218 	.word	0x20000218

08001964 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_RCC_EnableCSS+0x14>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	4242004c 	.word	0x4242004c

0800197c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	b490      	push	{r4, r7}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001982:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001984:	1d3c      	adds	r4, r7, #4
 8001986:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xb4>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019a6:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d002      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x40>
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d003      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0x46>
 80019ba:	e02d      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019be:	623b      	str	r3, [r7, #32]
      break;
 80019c0:	e02d      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	0c9b      	lsrs	r3, r3, #18
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ce:	4413      	add	r3, r2
 80019d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d013      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	0c5b      	lsrs	r3, r3, #17
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ee:	4413      	add	r3, r2
 80019f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019fa:	fb02 f203 	mul.w	r2, r2, r3
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
 8001a06:	e004      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	623b      	str	r3, [r7, #32]
      break;
 8001a16:	e002      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a1a:	623b      	str	r3, [r7, #32]
      break;
 8001a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3728      	adds	r7, #40	; 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc90      	pop	{r4, r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	08002948 	.word	0x08002948
 8001a30:	08002958 	.word	0x08002958
 8001a34:	40021000 	.word	0x40021000
 8001a38:	007a1200 	.word	0x007a1200
 8001a3c:	003d0900 	.word	0x003d0900

08001a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20000000 	.word	0x20000000

08001a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a58:	f7ff fff2 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4601      	mov	r1, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a6a:	5cd3      	ldrb	r3, [r2, r3]
 8001a6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	0800296c 	.word	0x0800296c

08001a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a84:	4601      	mov	r1, r0
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0adb      	lsrs	r3, r3, #11
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	4a03      	ldr	r2, [pc, #12]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
 8001a94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	0800296c 	.word	0x0800296c

08001aa4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_RCC_GetClockConfig+0x58>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_RCC_GetClockConfig+0x58>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_GetClockConfig+0x58>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_RCC_GetClockConfig+0x58>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	08db      	lsrs	r3, r3, #3
 8001ade:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0207 	and.w	r2, r3, #7
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40022000 	.word	0x40022000

08001b04 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b10:	2b80      	cmp	r3, #128	; 0x80
 8001b12:	d104      	bne.n	8001b1e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001b14:	f000 f828 	bl	8001b68 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	701a      	strb	r2, [r3, #0]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	4002100a 	.word	0x4002100a

08001b2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <RCC_Delay+0x34>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <RCC_Delay+0x38>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	0a5b      	lsrs	r3, r3, #9
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	fb02 f303 	mul.w	r3, r2, r3
 8001b46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b48:	bf00      	nop
  }
  while (Delay --);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1e5a      	subs	r2, r3, #1
 8001b4e:	60fa      	str	r2, [r7, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f9      	bne.n	8001b48 <RCC_Delay+0x1c>
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000000 	.word	0x20000000
 8001b64:	10624dd3 	.word	0x10624dd3

08001b68 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e041      	b.n	8001c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f839 	bl	8001c12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f000 f9c2 	bl	8001f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d001      	beq.n	8001c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e044      	b.n	8001cc6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_TIM_Base_Start_IT+0xac>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d018      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d013      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d00e      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a16      	ldr	r2, [pc, #88]	; (8001cdc <HAL_TIM_Base_Start_IT+0xb8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x6c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d111      	bne.n	8001cb4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d010      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb2:	e007      	b.n	8001cc4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	40012c00 	.word	0x40012c00
 8001cd4:	40013400 	.word	0x40013400
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40000800 	.word	0x40000800
 8001ce0:	40000c00 	.word	0x40000c00

08001ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d122      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d11b      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0202 	mvn.w	r2, #2
 8001d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8ed 	bl	8001f06 <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8e0 	bl	8001ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8ef 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d122      	bne.n	8001d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d11b      	bne.n	8001d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0204 	mvn.w	r2, #4
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8c3 	bl	8001f06 <HAL_TIM_IC_CaptureCallback>
 8001d80:	e005      	b.n	8001d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8b6 	bl	8001ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f8c5 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d122      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d11b      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0208 	mvn.w	r2, #8
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f899 	bl	8001f06 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f88c 	bl	8001ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f89b 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b10      	cmp	r3, #16
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b10      	cmp	r3, #16
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0210 	mvn.w	r2, #16
 8001e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2208      	movs	r2, #8
 8001e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f86f 	bl	8001f06 <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f862 	bl	8001ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f871 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d10e      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0201 	mvn.w	r2, #1
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe fc58 	bl	8000718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	2b80      	cmp	r3, #128	; 0x80
 8001e74:	d10e      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e80:	2b80      	cmp	r3, #128	; 0x80
 8001e82:	d107      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8d7 	bl	8002042 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eac:	2b40      	cmp	r3, #64	; 0x40
 8001eae:	d107      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f835 	bl	8001f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d10e      	bne.n	8001eec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d107      	bne.n	8001eec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0220 	mvn.w	r2, #32
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8a2 	bl	8002030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a33      	ldr	r2, [pc, #204]	; (800201c <TIM_Base_SetConfig+0xe0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a32      	ldr	r2, [pc, #200]	; (8002020 <TIM_Base_SetConfig+0xe4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00f      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f62:	d00b      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <TIM_Base_SetConfig+0xe8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a2e      	ldr	r2, [pc, #184]	; (8002028 <TIM_Base_SetConfig+0xec>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a2d      	ldr	r2, [pc, #180]	; (800202c <TIM_Base_SetConfig+0xf0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a22      	ldr	r2, [pc, #136]	; (800201c <TIM_Base_SetConfig+0xe0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <TIM_Base_SetConfig+0x82>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a21      	ldr	r2, [pc, #132]	; (8002020 <TIM_Base_SetConfig+0xe4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00f      	beq.n	8001fbe <TIM_Base_SetConfig+0x82>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa4:	d00b      	beq.n	8001fbe <TIM_Base_SetConfig+0x82>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <TIM_Base_SetConfig+0xe8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <TIM_Base_SetConfig+0x82>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <TIM_Base_SetConfig+0xec>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d003      	beq.n	8001fbe <TIM_Base_SetConfig+0x82>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a1c      	ldr	r2, [pc, #112]	; (800202c <TIM_Base_SetConfig+0xf0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d108      	bne.n	8001fd0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <TIM_Base_SetConfig+0xe0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_Base_SetConfig+0xc8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <TIM_Base_SetConfig+0xe4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d103      	bne.n	800200c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	615a      	str	r2, [r3, #20]
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40012c00 	.word	0x40012c00
 8002020:	40013400 	.word	0x40013400
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800
 800202c:	40000c00 	.word	0x40000c00

08002030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e03f      	b.n	80020e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fc66 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2224      	movs	r2, #36	; 0x24
 8002084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 fb83 	bl	80027a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b08a      	sub	sp, #40	; 0x28
 80020f2:	af02      	add	r7, sp, #8
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	d17c      	bne.n	8002208 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_UART_Transmit+0x2c>
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e075      	b.n	800220a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_UART_Transmit+0x3e>
 8002128:	2302      	movs	r3, #2
 800212a:	e06e      	b.n	800220a <HAL_UART_Transmit+0x11c>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2221      	movs	r2, #33	; 0x21
 800213e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002142:	f7fe fd49 	bl	8000bd8 <HAL_GetTick>
 8002146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	88fa      	ldrh	r2, [r7, #6]
 800214c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	88fa      	ldrh	r2, [r7, #6]
 8002152:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215c:	d108      	bne.n	8002170 <HAL_UART_Transmit+0x82>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d104      	bne.n	8002170 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	e003      	b.n	8002178 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002180:	e02a      	b.n	80021d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2200      	movs	r2, #0
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f9a7 	bl	80024e0 <UART_WaitOnFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e036      	b.n	800220a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10b      	bne.n	80021ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	3302      	adds	r3, #2
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	e007      	b.n	80021ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	3301      	adds	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1cf      	bne.n	8002182 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2200      	movs	r2, #0
 80021ea:	2140      	movs	r1, #64	; 0x40
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f977 	bl	80024e0 <UART_WaitOnFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e006      	b.n	800220a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e000      	b.n	800220a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
  }
}
 800220a:	4618      	mov	r0, r3
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	4613      	mov	r3, r2
 800221e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b20      	cmp	r3, #32
 800222a:	d140      	bne.n	80022ae <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_UART_Receive_IT+0x26>
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e039      	b.n	80022b0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_UART_Receive_IT+0x38>
 8002246:	2302      	movs	r3, #2
 8002248:	e032      	b.n	80022b0 <HAL_UART_Receive_IT+0x9e>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	88fa      	ldrh	r2, [r7, #6]
 8002262:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2222      	movs	r2, #34	; 0x22
 800226e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002288:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0220 	orr.w	r2, r2, #32
 80022a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80022ae:	2302      	movs	r3, #2
  }
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_UART_IRQHandler+0x52>
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f9cc 	bl	80026a4 <UART_Receive_IT>
      return;
 800230c:	e0d1      	b.n	80024b2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80b0 	beq.w	8002476 <HAL_UART_IRQHandler+0x1ba>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_UART_IRQHandler+0x70>
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80a5 	beq.w	8002476 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_UART_IRQHandler+0x90>
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_UART_IRQHandler+0xb0>
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	f043 0202 	orr.w	r2, r3, #2
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_UART_IRQHandler+0xd0>
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002384:	f043 0204 	orr.w	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00f      	beq.n	80023b6 <HAL_UART_IRQHandler+0xfa>
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d104      	bne.n	80023aa <HAL_UART_IRQHandler+0xee>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	f043 0208 	orr.w	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d078      	beq.n	80024b0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_UART_IRQHandler+0x11c>
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f966 	bl	80026a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf14      	ite	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	2300      	moveq	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <HAL_UART_IRQHandler+0x144>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d031      	beq.n	8002464 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f8b7 	bl	8002574 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	d023      	beq.n	800245c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002422:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <HAL_UART_IRQHandler+0x1fc>)
 8002432:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fcb7 	bl	8000dac <HAL_DMA_Abort_IT>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d016      	beq.n	8002472 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800244e:	4610      	mov	r0, r2
 8002450:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002452:	e00e      	b.n	8002472 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f83a 	bl	80024ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800245a:	e00a      	b.n	8002472 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f836 	bl	80024ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002462:	e006      	b.n	8002472 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f832 	bl	80024ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002470:	e01e      	b.n	80024b0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002472:	bf00      	nop
    return;
 8002474:	e01c      	b.n	80024b0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_UART_IRQHandler+0x1d6>
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8a3 	bl	80025d6 <UART_Transmit_IT>
    return;
 8002490:	e00f      	b.n	80024b2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_UART_IRQHandler+0x1f6>
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8e4 	bl	8002674 <UART_EndTransmit_IT>
    return;
 80024ac:	bf00      	nop
 80024ae:	e000      	b.n	80024b2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80024b0:	bf00      	nop
  }
}
 80024b2:	3720      	adds	r7, #32
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	080025af 	.word	0x080025af

080024bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f0:	e02c      	b.n	800254c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d028      	beq.n	800254c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <UART_WaitOnFlagUntilTimeout+0x30>
 8002500:	f7fe fb6a 	bl	8000bd8 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	429a      	cmp	r2, r3
 800250e:	d21d      	bcs.n	800254c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800251e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e00f      	b.n	800256c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	4013      	ands	r3, r2
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	429a      	cmp	r2, r3
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	429a      	cmp	r2, r3
 8002568:	d0c3      	beq.n	80024f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800258a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7ff ff80 	bl	80024ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b21      	cmp	r3, #33	; 0x21
 80025e8:	d13e      	bne.n	8002668 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f2:	d114      	bne.n	800261e <UART_Transmit_IT+0x48>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d110      	bne.n	800261e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002610:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	1c9a      	adds	r2, r3, #2
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	621a      	str	r2, [r3, #32]
 800261c:	e008      	b.n	8002630 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	1c59      	adds	r1, r3, #1
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6211      	str	r1, [r2, #32]
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29b      	uxth	r3, r3
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4619      	mov	r1, r3
 800263e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10f      	bne.n	8002664 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002652:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002662:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff11 	bl	80024bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b22      	cmp	r3, #34	; 0x22
 80026b6:	d170      	bne.n	800279a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c0:	d117      	bne.n	80026f2 <UART_Receive_IT+0x4e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d113      	bne.n	80026f2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	1c9a      	adds	r2, r3, #2
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
 80026f0:	e026      	b.n	8002740 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002704:	d007      	beq.n	8002716 <UART_Receive_IT+0x72>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <UART_Receive_IT+0x80>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e008      	b.n	8002736 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002730:	b2da      	uxtb	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29b      	uxth	r3, r3
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4619      	mov	r1, r3
 800274e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002750:	2b00      	cmp	r3, #0
 8002752:	d120      	bne.n	8002796 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0220 	bic.w	r2, r2, #32
 8002762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002772:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7fe f931 	bl	80009f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e002      	b.n	800279c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027de:	f023 030c 	bic.w	r3, r3, #12
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a2c      	ldr	r2, [pc, #176]	; (80028b8 <UART_SetConfig+0x114>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d103      	bne.n	8002814 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800280c:	f7ff f936 	bl	8001a7c <HAL_RCC_GetPCLK2Freq>
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	e002      	b.n	800281a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002814:	f7ff f91e 	bl	8001a54 <HAL_RCC_GetPCLK1Freq>
 8002818:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009a      	lsls	r2, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <UART_SetConfig+0x118>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	0119      	lsls	r1, r3, #4
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009a      	lsls	r2, r3, #2
 8002844:	441a      	add	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <UART_SetConfig+0x118>)
 8002852:	fba3 0302 	umull	r0, r3, r3, r2
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2064      	movs	r0, #100	; 0x64
 800285a:	fb00 f303 	mul.w	r3, r0, r3
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	3332      	adds	r3, #50	; 0x32
 8002864:	4a15      	ldr	r2, [pc, #84]	; (80028bc <UART_SetConfig+0x118>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002870:	4419      	add	r1, r3
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	009a      	lsls	r2, r3, #2
 800287c:	441a      	add	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fbb2 f2f3 	udiv	r2, r2, r3
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <UART_SetConfig+0x118>)
 800288a:	fba3 0302 	umull	r0, r3, r3, r2
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2064      	movs	r0, #100	; 0x64
 8002892:	fb00 f303 	mul.w	r3, r0, r3
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	3332      	adds	r3, #50	; 0x32
 800289c:	4a07      	ldr	r2, [pc, #28]	; (80028bc <UART_SetConfig+0x118>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	f003 020f 	and.w	r2, r3, #15
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	440a      	add	r2, r1
 80028ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40013800 	.word	0x40013800
 80028bc:	51eb851f 	.word	0x51eb851f

080028c0 <__libc_init_array>:
 80028c0:	b570      	push	{r4, r5, r6, lr}
 80028c2:	2500      	movs	r5, #0
 80028c4:	4e0c      	ldr	r6, [pc, #48]	; (80028f8 <__libc_init_array+0x38>)
 80028c6:	4c0d      	ldr	r4, [pc, #52]	; (80028fc <__libc_init_array+0x3c>)
 80028c8:	1ba4      	subs	r4, r4, r6
 80028ca:	10a4      	asrs	r4, r4, #2
 80028cc:	42a5      	cmp	r5, r4
 80028ce:	d109      	bne.n	80028e4 <__libc_init_array+0x24>
 80028d0:	f000 f82e 	bl	8002930 <_init>
 80028d4:	2500      	movs	r5, #0
 80028d6:	4e0a      	ldr	r6, [pc, #40]	; (8002900 <__libc_init_array+0x40>)
 80028d8:	4c0a      	ldr	r4, [pc, #40]	; (8002904 <__libc_init_array+0x44>)
 80028da:	1ba4      	subs	r4, r4, r6
 80028dc:	10a4      	asrs	r4, r4, #2
 80028de:	42a5      	cmp	r5, r4
 80028e0:	d105      	bne.n	80028ee <__libc_init_array+0x2e>
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
 80028e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e8:	4798      	blx	r3
 80028ea:	3501      	adds	r5, #1
 80028ec:	e7ee      	b.n	80028cc <__libc_init_array+0xc>
 80028ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028f2:	4798      	blx	r3
 80028f4:	3501      	adds	r5, #1
 80028f6:	e7f2      	b.n	80028de <__libc_init_array+0x1e>
 80028f8:	08002974 	.word	0x08002974
 80028fc:	08002974 	.word	0x08002974
 8002900:	08002974 	.word	0x08002974
 8002904:	08002978 	.word	0x08002978

08002908 <memcpy>:
 8002908:	b510      	push	{r4, lr}
 800290a:	1e43      	subs	r3, r0, #1
 800290c:	440a      	add	r2, r1
 800290e:	4291      	cmp	r1, r2
 8002910:	d100      	bne.n	8002914 <memcpy+0xc>
 8002912:	bd10      	pop	{r4, pc}
 8002914:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002918:	f803 4f01 	strb.w	r4, [r3, #1]!
 800291c:	e7f7      	b.n	800290e <memcpy+0x6>

0800291e <memset>:
 800291e:	4603      	mov	r3, r0
 8002920:	4402      	add	r2, r0
 8002922:	4293      	cmp	r3, r2
 8002924:	d100      	bne.n	8002928 <memset+0xa>
 8002926:	4770      	bx	lr
 8002928:	f803 1b01 	strb.w	r1, [r3], #1
 800292c:	e7f9      	b.n	8002922 <memset+0x4>
	...

08002930 <_init>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr

0800293c <_fini>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	bf00      	nop
 8002940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002942:	bc08      	pop	{r3}
 8002944:	469e      	mov	lr, r3
 8002946:	4770      	bx	lr
