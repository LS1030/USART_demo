
USART_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e4  080027e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027e4  080027e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027e4  080027e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e4  080027e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  080027f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080027f8  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbaf  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cf2  00000000  00000000  0002bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c10  00000000  00000000  0002d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  0002e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019cf9  00000000  00000000  0002eff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b1c0  00000000  00000000  00048ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a67b  00000000  00000000  00053ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee524  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000311c  00000000  00000000  000ee5a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080027a0 	.word	0x080027a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080027a0 	.word	0x080027a0

08000224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_DMA_Init+0x38>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <MX_DMA_Init+0x38>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_DMA_Init+0x38>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 8000242:	2200      	movs	r2, #0
 8000244:	2101      	movs	r1, #1
 8000246:	200f      	movs	r0, #15
 8000248:	f000 fb3d 	bl	80008c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800024c:	200f      	movs	r0, #15
 800024e:	f000 fb56 	bl	80008fe <HAL_NVIC_EnableIRQ>

}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000

08000260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000266:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MX_GPIO_Init+0x70>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a19      	ldr	r2, [pc, #100]	; (80002d0 <MX_GPIO_Init+0x70>)
 800026c:	f043 0310 	orr.w	r3, r3, #16
 8000270:	6193      	str	r3, [r2, #24]
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <MX_GPIO_Init+0x70>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f003 0310 	and.w	r3, r3, #16
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <MX_GPIO_Init+0x70>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <MX_GPIO_Init+0x70>)
 8000284:	f043 0320 	orr.w	r3, r3, #32
 8000288:	6193      	str	r3, [r2, #24]
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MX_GPIO_Init+0x70>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	f003 0320 	and.w	r3, r3, #32
 8000292:	60bb      	str	r3, [r7, #8]
 8000294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_GPIO_Init+0x70>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <MX_GPIO_Init+0x70>)
 800029c:	f043 0304 	orr.w	r3, r3, #4
 80002a0:	6193      	str	r3, [r2, #24]
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <MX_GPIO_Init+0x70>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f003 0304 	and.w	r3, r3, #4
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <MX_GPIO_Init+0x70>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <MX_GPIO_Init+0x70>)
 80002b4:	f043 0308 	orr.w	r3, r3, #8
 80002b8:	6193      	str	r3, [r2, #24]
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <MX_GPIO_Init+0x70>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	f003 0308 	and.w	r3, r3, #8
 80002c2:	603b      	str	r3, [r7, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]

}
 80002c6:	bf00      	nop
 80002c8:	3714      	adds	r7, #20
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d8:	f000 fa0e 	bl	80006f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002dc:	f000 f807 	bl	80002ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e0:	f7ff ffbe 	bl	8000260 <MX_GPIO_Init>
  MX_DMA_Init();
 80002e4:	f7ff ff9e 	bl	8000224 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80002e8:	f000 f938 	bl	800055c <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // HAL_UART_Receive_DMA(&huart1, (uint8_t *)USART1_RxBuff, USART1_RxBuff_Size);
  while (1)
 80002ec:	e7fe      	b.n	80002ec <main+0x18>

080002ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	b090      	sub	sp, #64	; 0x40
 80002f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	2228      	movs	r2, #40	; 0x28
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fa47 	bl	8002790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000310:	2301      	movs	r3, #1
 8000312:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000318:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031e:	2301      	movs	r3, #1
 8000320:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000322:	2302      	movs	r3, #2
 8000324:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800032c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000330:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	4618      	mov	r0, r3
 8000338:	f001 f814 	bl	8001364 <HAL_RCC_OscConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000342:	f000 f82d 	bl	80003a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000346:	230f      	movs	r3, #15
 8000348:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034a:	2302      	movs	r3, #2
 800034c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2102      	movs	r1, #2
 8000360:	4618      	mov	r0, r3
 8000362:	f001 fa7f 	bl	8001864 <HAL_RCC_ClockConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036c:	f000 f818 	bl	80003a0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000370:	f001 fb62 	bl	8001a38 <HAL_RCC_EnableCSS>
}
 8000374:	bf00      	nop
 8000376:	3740      	adds	r7, #64	; 0x40
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d101      	bne.n	8000392 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800038e:	f000 f9c9 	bl	8000724 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40001400 	.word	0x40001400

080003a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b2:	4b15      	ldr	r3, [pc, #84]	; (8000408 <HAL_MspInit+0x5c>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a14      	ldr	r2, [pc, #80]	; (8000408 <HAL_MspInit+0x5c>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <HAL_MspInit+0x5c>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <HAL_MspInit+0x5c>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <HAL_MspInit+0x5c>)
 80003d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d4:	61d3      	str	r3, [r2, #28]
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <HAL_MspInit+0x5c>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <HAL_MspInit+0x60>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <HAL_MspInit+0x60>)
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000
 800040c:	40010000 	.word	0x40010000

08000410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b08c      	sub	sp, #48	; 0x30
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000420:	2200      	movs	r2, #0
 8000422:	6879      	ldr	r1, [r7, #4]
 8000424:	2037      	movs	r0, #55	; 0x37
 8000426:	f000 fa4e 	bl	80008c6 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800042a:	2037      	movs	r0, #55	; 0x37
 800042c:	f000 fa67 	bl	80008fe <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <HAL_InitTick+0xa0>)
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	4a1e      	ldr	r2, [pc, #120]	; (80004b0 <HAL_InitTick+0xa0>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	61d3      	str	r3, [r2, #28]
 800043c:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <HAL_InitTick+0xa0>)
 800043e:	69db      	ldr	r3, [r3, #28]
 8000440:	f003 0320 	and.w	r3, r3, #32
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000448:	f107 0210 	add.w	r2, r7, #16
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	4611      	mov	r1, r2
 8000452:	4618      	mov	r0, r3
 8000454:	f001 fb90 	bl	8001b78 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000458:	f001 fb66 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 800045c:	4603      	mov	r3, r0
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000464:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <HAL_InitTick+0xa4>)
 8000466:	fba2 2303 	umull	r2, r3, r2, r3
 800046a:	0c9b      	lsrs	r3, r3, #18
 800046c:	3b01      	subs	r3, #1
 800046e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <HAL_InitTick+0xa8>)
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <HAL_InitTick+0xac>)
 8000474:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <HAL_InitTick+0xa8>)
 8000478:	f240 32e7 	movw	r2, #999	; 0x3e7
 800047c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <HAL_InitTick+0xa8>)
 8000480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000482:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_InitTick+0xa8>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <HAL_InitTick+0xa8>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000490:	4809      	ldr	r0, [pc, #36]	; (80004b8 <HAL_InitTick+0xa8>)
 8000492:	f001 fbd9 	bl	8001c48 <HAL_TIM_Base_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d104      	bne.n	80004a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800049c:	4806      	ldr	r0, [pc, #24]	; (80004b8 <HAL_InitTick+0xa8>)
 800049e:	f001 fc2b 	bl	8001cf8 <HAL_TIM_Base_Start_IT>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e000      	b.n	80004a8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80004a6:	2301      	movs	r3, #1
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3730      	adds	r7, #48	; 0x30
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	431bde83 	.word	0x431bde83
 80004b8:	20000028 	.word	0x20000028
 80004bc:	40001400 	.word	0x40001400

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80004c4:	f001 fb88 	bl	8001bd8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <HardFault_Handler+0x4>

080004d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <MemManage_Handler+0x4>

080004d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <BusFault_Handler+0x4>

080004de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <UsageFault_Handler+0x4>

080004e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <DMA1_Channel5_IRQHandler+0x10>)
 800051a:	f000 fb7d 	bl	8000c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000070 	.word	0x20000070

08000528 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800052c:	4802      	ldr	r0, [pc, #8]	; (8000538 <USART1_IRQHandler+0x10>)
 800052e:	f001 fe49 	bl	80021c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  // USER_UART_IRQHandler(&huart1);
  /* USER CODE END USART1_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000b4 	.word	0x200000b4

0800053c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000540:	4802      	ldr	r0, [pc, #8]	; (800054c <TIM7_IRQHandler+0x10>)
 8000542:	f001 fc39 	bl	8001db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028

08000550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <MX_USART1_UART_Init+0x50>)
 8000564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000568:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800056c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000582:	220c      	movs	r2, #12
 8000584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000594:	f001 fdc8 	bl	8002128 <HAL_UART_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800059e:	f7ff feff 	bl	80003a0 <Error_Handler>
  }
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000b4 	.word	0x200000b4
 80005ac:	40013800 	.word	0x40013800

080005b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
  if (uartHandle->Instance == USART1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a33      	ldr	r2, [pc, #204]	; (8000698 <HAL_UART_MspInit+0xe8>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d15f      	bne.n	8000690 <HAL_UART_MspInit+0xe0>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005d0:	4b32      	ldr	r3, [pc, #200]	; (800069c <HAL_UART_MspInit+0xec>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a31      	ldr	r2, [pc, #196]	; (800069c <HAL_UART_MspInit+0xec>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b2f      	ldr	r3, [pc, #188]	; (800069c <HAL_UART_MspInit+0xec>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b2c      	ldr	r3, [pc, #176]	; (800069c <HAL_UART_MspInit+0xec>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a2b      	ldr	r2, [pc, #172]	; (800069c <HAL_UART_MspInit+0xec>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b29      	ldr	r3, [pc, #164]	; (800069c <HAL_UART_MspInit+0xec>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	2302      	movs	r3, #2
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	4822      	ldr	r0, [pc, #136]	; (80006a0 <HAL_UART_MspInit+0xf0>)
 8000616:	f000 fd3b 	bl	8001090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	481c      	ldr	r0, [pc, #112]	; (80006a0 <HAL_UART_MspInit+0xf0>)
 8000630:	f000 fd2e 	bl	8001090 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <HAL_UART_MspInit+0xf4>)
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <HAL_UART_MspInit+0xf8>)
 8000638:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <HAL_UART_MspInit+0xf4>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <HAL_UART_MspInit+0xf4>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <HAL_UART_MspInit+0xf4>)
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_UART_MspInit+0xf4>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <HAL_UART_MspInit+0xf4>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_UART_MspInit+0xf4>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <HAL_UART_MspInit+0xf4>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000664:	480f      	ldr	r0, [pc, #60]	; (80006a4 <HAL_UART_MspInit+0xf4>)
 8000666:	f000 f959 	bl	800091c <HAL_DMA_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000670:	f7ff fe96 	bl	80003a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <HAL_UART_MspInit+0xf4>)
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <HAL_UART_MspInit+0xf4>)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2101      	movs	r1, #1
 8000684:	2025      	movs	r0, #37	; 0x25
 8000686:	f000 f91e 	bl	80008c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800068a:	2025      	movs	r0, #37	; 0x25
 800068c:	f000 f937 	bl	80008fe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }
}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40013800 	.word	0x40013800
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010800 	.word	0x40010800
 80006a4:	20000070 	.word	0x20000070
 80006a8:	40020058 	.word	0x40020058

080006ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006ae:	e003      	b.n	80006b8 <LoopCopyDataInit>

080006b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006b6:	3104      	adds	r1, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006b8:	480a      	ldr	r0, [pc, #40]	; (80006e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006c0:	d3f6      	bcc.n	80006b0 <CopyDataInit>
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006c4:	e002      	b.n	80006cc <LoopFillZerobss>

080006c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006c8:	f842 3b04 	str.w	r3, [r2], #4

080006cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006d0:	d3f9      	bcc.n	80006c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006d2:	f7ff ff3d 	bl	8000550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006d6:	f002 f837 	bl	8002748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006da:	f7ff fdfb 	bl	80002d4 <main>
  bx lr
 80006de:	4770      	bx	lr
  ldr r3, =_sidata
 80006e0:	080027ec 	.word	0x080027ec
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80006ec:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80006f0:	200000f8 	.word	0x200000f8

080006f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_2_IRQHandler>
	...

080006f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_Init+0x28>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_Init+0x28>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000708:	2003      	movs	r0, #3
 800070a:	f000 f8d1 	bl	80008b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff fe7e 	bl	8000410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000714:	f7ff fe4a 	bl	80003ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_IncTick+0x1c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_IncTick+0x20>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4413      	add	r3, r2
 8000734:	4a03      	ldr	r2, [pc, #12]	; (8000744 <HAL_IncTick+0x20>)
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	20000008 	.word	0x20000008
 8000744:	200000f4 	.word	0x200000f4

08000748 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <HAL_GetTick+0x10>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	200000f4 	.word	0x200000f4

0800075c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000778:	4013      	ands	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078e:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	60d3      	str	r3, [r2, #12]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <__NVIC_GetPriorityGrouping+0x18>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	f003 0307 	and.w	r3, r3, #7
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	db0b      	blt.n	80007ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f003 021f 	and.w	r2, r3, #31
 80007d8:	4906      	ldr	r1, [pc, #24]	; (80007f4 <__NVIC_EnableIRQ+0x34>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	095b      	lsrs	r3, r3, #5
 80007e0:	2001      	movs	r0, #1
 80007e2:	fa00 f202 	lsl.w	r2, r0, r2
 80007e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	e000e100 	.word	0xe000e100

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	; (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
         );
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	; 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff4f 	bl	800075c <__NVIC_SetPriorityGrouping>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d8:	f7ff ff64 	bl	80007a4 <__NVIC_GetPriorityGrouping>
 80008dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	6978      	ldr	r0, [r7, #20]
 80008e4:	f7ff ffb2 	bl	800084c <NVIC_EncodePriority>
 80008e8:	4602      	mov	r2, r0
 80008ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff81 	bl	80007f8 <__NVIC_SetPriority>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff57 	bl	80007c0 <__NVIC_EnableIRQ>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d101      	bne.n	8000932 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e059      	b.n	80009e6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <HAL_DMA_Init+0xd4>)
 800093a:	429a      	cmp	r2, r3
 800093c:	d80f      	bhi.n	800095e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <HAL_DMA_Init+0xd8>)
 8000946:	4413      	add	r3, r2
 8000948:	4a2b      	ldr	r2, [pc, #172]	; (80009f8 <HAL_DMA_Init+0xdc>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	091b      	lsrs	r3, r3, #4
 8000950:	009a      	lsls	r2, r3, #2
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a28      	ldr	r2, [pc, #160]	; (80009fc <HAL_DMA_Init+0xe0>)
 800095a:	63da      	str	r2, [r3, #60]	; 0x3c
 800095c:	e00e      	b.n	800097c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <HAL_DMA_Init+0xe4>)
 8000966:	4413      	add	r3, r2
 8000968:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <HAL_DMA_Init+0xdc>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	091b      	lsrs	r3, r3, #4
 8000970:	009a      	lsls	r2, r3, #2
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a22      	ldr	r2, [pc, #136]	; (8000a04 <HAL_DMA_Init+0xe8>)
 800097a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2202      	movs	r2, #2
 8000980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000992:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000996:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2201      	movs	r2, #1
 80009d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	40020407 	.word	0x40020407
 80009f4:	bffdfff8 	.word	0xbffdfff8
 80009f8:	cccccccd 	.word	0xcccccccd
 80009fc:	40020000 	.word	0x40020000
 8000a00:	bffdfbf8 	.word	0xbffdfbf8
 8000a04:	40020400 	.word	0x40020400

08000a08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d005      	beq.n	8000a2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2204      	movs	r2, #4
 8000a22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e0d6      	b.n	8000bd8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 020e 	bic.w	r2, r2, #14
 8000a38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f022 0201 	bic.w	r2, r2, #1
 8000a48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b64      	ldr	r3, [pc, #400]	; (8000be4 <HAL_DMA_Abort_IT+0x1dc>)
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d958      	bls.n	8000b08 <HAL_DMA_Abort_IT+0x100>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a63      	ldr	r2, [pc, #396]	; (8000be8 <HAL_DMA_Abort_IT+0x1e0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d04f      	beq.n	8000b00 <HAL_DMA_Abort_IT+0xf8>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a61      	ldr	r2, [pc, #388]	; (8000bec <HAL_DMA_Abort_IT+0x1e4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d048      	beq.n	8000afc <HAL_DMA_Abort_IT+0xf4>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a60      	ldr	r2, [pc, #384]	; (8000bf0 <HAL_DMA_Abort_IT+0x1e8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d040      	beq.n	8000af6 <HAL_DMA_Abort_IT+0xee>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a5e      	ldr	r2, [pc, #376]	; (8000bf4 <HAL_DMA_Abort_IT+0x1ec>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d038      	beq.n	8000af0 <HAL_DMA_Abort_IT+0xe8>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a5d      	ldr	r2, [pc, #372]	; (8000bf8 <HAL_DMA_Abort_IT+0x1f0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d030      	beq.n	8000aea <HAL_DMA_Abort_IT+0xe2>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a5b      	ldr	r2, [pc, #364]	; (8000bfc <HAL_DMA_Abort_IT+0x1f4>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d028      	beq.n	8000ae4 <HAL_DMA_Abort_IT+0xdc>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a53      	ldr	r2, [pc, #332]	; (8000be4 <HAL_DMA_Abort_IT+0x1dc>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d020      	beq.n	8000ade <HAL_DMA_Abort_IT+0xd6>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a57      	ldr	r2, [pc, #348]	; (8000c00 <HAL_DMA_Abort_IT+0x1f8>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d019      	beq.n	8000ada <HAL_DMA_Abort_IT+0xd2>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a56      	ldr	r2, [pc, #344]	; (8000c04 <HAL_DMA_Abort_IT+0x1fc>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d012      	beq.n	8000ad6 <HAL_DMA_Abort_IT+0xce>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a54      	ldr	r2, [pc, #336]	; (8000c08 <HAL_DMA_Abort_IT+0x200>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d00a      	beq.n	8000ad0 <HAL_DMA_Abort_IT+0xc8>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a53      	ldr	r2, [pc, #332]	; (8000c0c <HAL_DMA_Abort_IT+0x204>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d102      	bne.n	8000aca <HAL_DMA_Abort_IT+0xc2>
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	e01b      	b.n	8000b02 <HAL_DMA_Abort_IT+0xfa>
 8000aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ace:	e018      	b.n	8000b02 <HAL_DMA_Abort_IT+0xfa>
 8000ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad4:	e015      	b.n	8000b02 <HAL_DMA_Abort_IT+0xfa>
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	e013      	b.n	8000b02 <HAL_DMA_Abort_IT+0xfa>
 8000ada:	2301      	movs	r3, #1
 8000adc:	e011      	b.n	8000b02 <HAL_DMA_Abort_IT+0xfa>
 8000ade:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae2:	e00e      	b.n	8000b02 <HAL_DMA_Abort_IT+0xfa>
 8000ae4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ae8:	e00b      	b.n	8000b02 <HAL_DMA_Abort_IT+0xfa>
 8000aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aee:	e008      	b.n	8000b02 <HAL_DMA_Abort_IT+0xfa>
 8000af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af4:	e005      	b.n	8000b02 <HAL_DMA_Abort_IT+0xfa>
 8000af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afa:	e002      	b.n	8000b02 <HAL_DMA_Abort_IT+0xfa>
 8000afc:	2310      	movs	r3, #16
 8000afe:	e000      	b.n	8000b02 <HAL_DMA_Abort_IT+0xfa>
 8000b00:	2301      	movs	r3, #1
 8000b02:	4a43      	ldr	r2, [pc, #268]	; (8000c10 <HAL_DMA_Abort_IT+0x208>)
 8000b04:	6053      	str	r3, [r2, #4]
 8000b06:	e057      	b.n	8000bb8 <HAL_DMA_Abort_IT+0x1b0>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a36      	ldr	r2, [pc, #216]	; (8000be8 <HAL_DMA_Abort_IT+0x1e0>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d04f      	beq.n	8000bb2 <HAL_DMA_Abort_IT+0x1aa>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a35      	ldr	r2, [pc, #212]	; (8000bec <HAL_DMA_Abort_IT+0x1e4>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d048      	beq.n	8000bae <HAL_DMA_Abort_IT+0x1a6>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a33      	ldr	r2, [pc, #204]	; (8000bf0 <HAL_DMA_Abort_IT+0x1e8>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d040      	beq.n	8000ba8 <HAL_DMA_Abort_IT+0x1a0>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a32      	ldr	r2, [pc, #200]	; (8000bf4 <HAL_DMA_Abort_IT+0x1ec>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d038      	beq.n	8000ba2 <HAL_DMA_Abort_IT+0x19a>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a30      	ldr	r2, [pc, #192]	; (8000bf8 <HAL_DMA_Abort_IT+0x1f0>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d030      	beq.n	8000b9c <HAL_DMA_Abort_IT+0x194>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <HAL_DMA_Abort_IT+0x1f4>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d028      	beq.n	8000b96 <HAL_DMA_Abort_IT+0x18e>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <HAL_DMA_Abort_IT+0x1dc>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d020      	beq.n	8000b90 <HAL_DMA_Abort_IT+0x188>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a2b      	ldr	r2, [pc, #172]	; (8000c00 <HAL_DMA_Abort_IT+0x1f8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d019      	beq.n	8000b8c <HAL_DMA_Abort_IT+0x184>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a29      	ldr	r2, [pc, #164]	; (8000c04 <HAL_DMA_Abort_IT+0x1fc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d012      	beq.n	8000b88 <HAL_DMA_Abort_IT+0x180>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <HAL_DMA_Abort_IT+0x200>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d00a      	beq.n	8000b82 <HAL_DMA_Abort_IT+0x17a>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a26      	ldr	r2, [pc, #152]	; (8000c0c <HAL_DMA_Abort_IT+0x204>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d102      	bne.n	8000b7c <HAL_DMA_Abort_IT+0x174>
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	e01b      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x1ac>
 8000b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b80:	e018      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x1ac>
 8000b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b86:	e015      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x1ac>
 8000b88:	2310      	movs	r3, #16
 8000b8a:	e013      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x1ac>
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e011      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x1ac>
 8000b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b94:	e00e      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x1ac>
 8000b96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b9a:	e00b      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x1ac>
 8000b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba0:	e008      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x1ac>
 8000ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba6:	e005      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x1ac>
 8000ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bac:	e002      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x1ac>
 8000bae:	2310      	movs	r3, #16
 8000bb0:	e000      	b.n	8000bb4 <HAL_DMA_Abort_IT+0x1ac>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_DMA_Abort_IT+0x20c>)
 8000bb6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	4798      	blx	r3
    } 
  }
  return status;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40020080 	.word	0x40020080
 8000be8:	40020008 	.word	0x40020008
 8000bec:	4002001c 	.word	0x4002001c
 8000bf0:	40020030 	.word	0x40020030
 8000bf4:	40020044 	.word	0x40020044
 8000bf8:	40020058 	.word	0x40020058
 8000bfc:	4002006c 	.word	0x4002006c
 8000c00:	40020408 	.word	0x40020408
 8000c04:	4002041c 	.word	0x4002041c
 8000c08:	40020430 	.word	0x40020430
 8000c0c:	40020444 	.word	0x40020444
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40020000 	.word	0x40020000

08000c18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	2204      	movs	r2, #4
 8000c36:	409a      	lsls	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f000 80d6 	beq.w	8000dee <HAL_DMA_IRQHandler+0x1d6>
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 80d0 	beq.w	8000dee <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d107      	bne.n	8000c6c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0204 	bic.w	r2, r2, #4
 8000c6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b9b      	ldr	r3, [pc, #620]	; (8000ee0 <HAL_DMA_IRQHandler+0x2c8>)
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d958      	bls.n	8000d2a <HAL_DMA_IRQHandler+0x112>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a99      	ldr	r2, [pc, #612]	; (8000ee4 <HAL_DMA_IRQHandler+0x2cc>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d04f      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x10a>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a98      	ldr	r2, [pc, #608]	; (8000ee8 <HAL_DMA_IRQHandler+0x2d0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d048      	beq.n	8000d1e <HAL_DMA_IRQHandler+0x106>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a96      	ldr	r2, [pc, #600]	; (8000eec <HAL_DMA_IRQHandler+0x2d4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d040      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x100>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a95      	ldr	r2, [pc, #596]	; (8000ef0 <HAL_DMA_IRQHandler+0x2d8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d038      	beq.n	8000d12 <HAL_DMA_IRQHandler+0xfa>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a93      	ldr	r2, [pc, #588]	; (8000ef4 <HAL_DMA_IRQHandler+0x2dc>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d030      	beq.n	8000d0c <HAL_DMA_IRQHandler+0xf4>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a92      	ldr	r2, [pc, #584]	; (8000ef8 <HAL_DMA_IRQHandler+0x2e0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d028      	beq.n	8000d06 <HAL_DMA_IRQHandler+0xee>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a89      	ldr	r2, [pc, #548]	; (8000ee0 <HAL_DMA_IRQHandler+0x2c8>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d020      	beq.n	8000d00 <HAL_DMA_IRQHandler+0xe8>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a8e      	ldr	r2, [pc, #568]	; (8000efc <HAL_DMA_IRQHandler+0x2e4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d019      	beq.n	8000cfc <HAL_DMA_IRQHandler+0xe4>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a8c      	ldr	r2, [pc, #560]	; (8000f00 <HAL_DMA_IRQHandler+0x2e8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d012      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0xe0>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a8b      	ldr	r2, [pc, #556]	; (8000f04 <HAL_DMA_IRQHandler+0x2ec>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d00a      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0xda>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a89      	ldr	r2, [pc, #548]	; (8000f08 <HAL_DMA_IRQHandler+0x2f0>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d102      	bne.n	8000cec <HAL_DMA_IRQHandler+0xd4>
 8000ce6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cea:	e01b      	b.n	8000d24 <HAL_DMA_IRQHandler+0x10c>
 8000cec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000cf0:	e018      	b.n	8000d24 <HAL_DMA_IRQHandler+0x10c>
 8000cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf6:	e015      	b.n	8000d24 <HAL_DMA_IRQHandler+0x10c>
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	e013      	b.n	8000d24 <HAL_DMA_IRQHandler+0x10c>
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	e011      	b.n	8000d24 <HAL_DMA_IRQHandler+0x10c>
 8000d00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d04:	e00e      	b.n	8000d24 <HAL_DMA_IRQHandler+0x10c>
 8000d06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d0a:	e00b      	b.n	8000d24 <HAL_DMA_IRQHandler+0x10c>
 8000d0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d10:	e008      	b.n	8000d24 <HAL_DMA_IRQHandler+0x10c>
 8000d12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d16:	e005      	b.n	8000d24 <HAL_DMA_IRQHandler+0x10c>
 8000d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1c:	e002      	b.n	8000d24 <HAL_DMA_IRQHandler+0x10c>
 8000d1e:	2340      	movs	r3, #64	; 0x40
 8000d20:	e000      	b.n	8000d24 <HAL_DMA_IRQHandler+0x10c>
 8000d22:	2304      	movs	r3, #4
 8000d24:	4a79      	ldr	r2, [pc, #484]	; (8000f0c <HAL_DMA_IRQHandler+0x2f4>)
 8000d26:	6053      	str	r3, [r2, #4]
 8000d28:	e057      	b.n	8000dda <HAL_DMA_IRQHandler+0x1c2>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a6d      	ldr	r2, [pc, #436]	; (8000ee4 <HAL_DMA_IRQHandler+0x2cc>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d04f      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x1bc>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a6b      	ldr	r2, [pc, #428]	; (8000ee8 <HAL_DMA_IRQHandler+0x2d0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d048      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0x1b8>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a6a      	ldr	r2, [pc, #424]	; (8000eec <HAL_DMA_IRQHandler+0x2d4>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d040      	beq.n	8000dca <HAL_DMA_IRQHandler+0x1b2>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a68      	ldr	r2, [pc, #416]	; (8000ef0 <HAL_DMA_IRQHandler+0x2d8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d038      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0x1ac>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a67      	ldr	r2, [pc, #412]	; (8000ef4 <HAL_DMA_IRQHandler+0x2dc>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d030      	beq.n	8000dbe <HAL_DMA_IRQHandler+0x1a6>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a65      	ldr	r2, [pc, #404]	; (8000ef8 <HAL_DMA_IRQHandler+0x2e0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d028      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x1a0>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a5d      	ldr	r2, [pc, #372]	; (8000ee0 <HAL_DMA_IRQHandler+0x2c8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d020      	beq.n	8000db2 <HAL_DMA_IRQHandler+0x19a>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a61      	ldr	r2, [pc, #388]	; (8000efc <HAL_DMA_IRQHandler+0x2e4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d019      	beq.n	8000dae <HAL_DMA_IRQHandler+0x196>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a60      	ldr	r2, [pc, #384]	; (8000f00 <HAL_DMA_IRQHandler+0x2e8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d012      	beq.n	8000daa <HAL_DMA_IRQHandler+0x192>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a5e      	ldr	r2, [pc, #376]	; (8000f04 <HAL_DMA_IRQHandler+0x2ec>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d00a      	beq.n	8000da4 <HAL_DMA_IRQHandler+0x18c>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a5d      	ldr	r2, [pc, #372]	; (8000f08 <HAL_DMA_IRQHandler+0x2f0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d102      	bne.n	8000d9e <HAL_DMA_IRQHandler+0x186>
 8000d98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d9c:	e01b      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x1be>
 8000d9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000da2:	e018      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x1be>
 8000da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da8:	e015      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x1be>
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	e013      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x1be>
 8000dae:	2304      	movs	r3, #4
 8000db0:	e011      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x1be>
 8000db2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000db6:	e00e      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x1be>
 8000db8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dbc:	e00b      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x1be>
 8000dbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dc2:	e008      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x1be>
 8000dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc8:	e005      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x1be>
 8000dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dce:	e002      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x1be>
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	e000      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x1be>
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	4a4e      	ldr	r2, [pc, #312]	; (8000f10 <HAL_DMA_IRQHandler+0x2f8>)
 8000dd8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f000 8136 	beq.w	8001050 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000dec:	e130      	b.n	8001050 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	2202      	movs	r2, #2
 8000df4:	409a      	lsls	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 80f8 	beq.w	8000ff0 <HAL_DMA_IRQHandler+0x3d8>
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 80f2 	beq.w	8000ff0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0320 	and.w	r3, r3, #32
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10b      	bne.n	8000e32 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 020a 	bic.w	r2, r2, #10
 8000e28:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <HAL_DMA_IRQHandler+0x2c8>)
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d973      	bls.n	8000f26 <HAL_DMA_IRQHandler+0x30e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a28      	ldr	r2, [pc, #160]	; (8000ee4 <HAL_DMA_IRQHandler+0x2cc>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d06a      	beq.n	8000f1e <HAL_DMA_IRQHandler+0x306>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a26      	ldr	r2, [pc, #152]	; (8000ee8 <HAL_DMA_IRQHandler+0x2d0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d063      	beq.n	8000f1a <HAL_DMA_IRQHandler+0x302>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a25      	ldr	r2, [pc, #148]	; (8000eec <HAL_DMA_IRQHandler+0x2d4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d05b      	beq.n	8000f14 <HAL_DMA_IRQHandler+0x2fc>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <HAL_DMA_IRQHandler+0x2d8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d038      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0x2c0>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <HAL_DMA_IRQHandler+0x2dc>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d030      	beq.n	8000ed2 <HAL_DMA_IRQHandler+0x2ba>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a20      	ldr	r2, [pc, #128]	; (8000ef8 <HAL_DMA_IRQHandler+0x2e0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d028      	beq.n	8000ecc <HAL_DMA_IRQHandler+0x2b4>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <HAL_DMA_IRQHandler+0x2c8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d020      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0x2ae>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a1c      	ldr	r2, [pc, #112]	; (8000efc <HAL_DMA_IRQHandler+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d019      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x2aa>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <HAL_DMA_IRQHandler+0x2e8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d012      	beq.n	8000ebe <HAL_DMA_IRQHandler+0x2a6>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_DMA_IRQHandler+0x2ec>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00a      	beq.n	8000eb8 <HAL_DMA_IRQHandler+0x2a0>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <HAL_DMA_IRQHandler+0x2f0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d102      	bne.n	8000eb2 <HAL_DMA_IRQHandler+0x29a>
 8000eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb0:	e036      	b.n	8000f20 <HAL_DMA_IRQHandler+0x308>
 8000eb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb6:	e033      	b.n	8000f20 <HAL_DMA_IRQHandler+0x308>
 8000eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ebc:	e030      	b.n	8000f20 <HAL_DMA_IRQHandler+0x308>
 8000ebe:	2320      	movs	r3, #32
 8000ec0:	e02e      	b.n	8000f20 <HAL_DMA_IRQHandler+0x308>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e02c      	b.n	8000f20 <HAL_DMA_IRQHandler+0x308>
 8000ec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eca:	e029      	b.n	8000f20 <HAL_DMA_IRQHandler+0x308>
 8000ecc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ed0:	e026      	b.n	8000f20 <HAL_DMA_IRQHandler+0x308>
 8000ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed6:	e023      	b.n	8000f20 <HAL_DMA_IRQHandler+0x308>
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	e020      	b.n	8000f20 <HAL_DMA_IRQHandler+0x308>
 8000ede:	bf00      	nop
 8000ee0:	40020080 	.word	0x40020080
 8000ee4:	40020008 	.word	0x40020008
 8000ee8:	4002001c 	.word	0x4002001c
 8000eec:	40020030 	.word	0x40020030
 8000ef0:	40020044 	.word	0x40020044
 8000ef4:	40020058 	.word	0x40020058
 8000ef8:	4002006c 	.word	0x4002006c
 8000efc:	40020408 	.word	0x40020408
 8000f00:	4002041c 	.word	0x4002041c
 8000f04:	40020430 	.word	0x40020430
 8000f08:	40020444 	.word	0x40020444
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	40020000 	.word	0x40020000
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	e002      	b.n	8000f20 <HAL_DMA_IRQHandler+0x308>
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	e000      	b.n	8000f20 <HAL_DMA_IRQHandler+0x308>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	4a4e      	ldr	r2, [pc, #312]	; (800105c <HAL_DMA_IRQHandler+0x444>)
 8000f22:	6053      	str	r3, [r2, #4]
 8000f24:	e057      	b.n	8000fd6 <HAL_DMA_IRQHandler+0x3be>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a4d      	ldr	r2, [pc, #308]	; (8001060 <HAL_DMA_IRQHandler+0x448>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d04f      	beq.n	8000fd0 <HAL_DMA_IRQHandler+0x3b8>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a4b      	ldr	r2, [pc, #300]	; (8001064 <HAL_DMA_IRQHandler+0x44c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d048      	beq.n	8000fcc <HAL_DMA_IRQHandler+0x3b4>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a4a      	ldr	r2, [pc, #296]	; (8001068 <HAL_DMA_IRQHandler+0x450>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d040      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0x3ae>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a48      	ldr	r2, [pc, #288]	; (800106c <HAL_DMA_IRQHandler+0x454>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d038      	beq.n	8000fc0 <HAL_DMA_IRQHandler+0x3a8>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a47      	ldr	r2, [pc, #284]	; (8001070 <HAL_DMA_IRQHandler+0x458>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d030      	beq.n	8000fba <HAL_DMA_IRQHandler+0x3a2>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a45      	ldr	r2, [pc, #276]	; (8001074 <HAL_DMA_IRQHandler+0x45c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d028      	beq.n	8000fb4 <HAL_DMA_IRQHandler+0x39c>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a44      	ldr	r2, [pc, #272]	; (8001078 <HAL_DMA_IRQHandler+0x460>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d020      	beq.n	8000fae <HAL_DMA_IRQHandler+0x396>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a42      	ldr	r2, [pc, #264]	; (800107c <HAL_DMA_IRQHandler+0x464>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_DMA_IRQHandler+0x392>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a41      	ldr	r2, [pc, #260]	; (8001080 <HAL_DMA_IRQHandler+0x468>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d012      	beq.n	8000fa6 <HAL_DMA_IRQHandler+0x38e>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a3f      	ldr	r2, [pc, #252]	; (8001084 <HAL_DMA_IRQHandler+0x46c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00a      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0x388>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a3e      	ldr	r2, [pc, #248]	; (8001088 <HAL_DMA_IRQHandler+0x470>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d102      	bne.n	8000f9a <HAL_DMA_IRQHandler+0x382>
 8000f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f98:	e01b      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x3ba>
 8000f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9e:	e018      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x3ba>
 8000fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa4:	e015      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x3ba>
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	e013      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x3ba>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e011      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x3ba>
 8000fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb2:	e00e      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x3ba>
 8000fb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fb8:	e00b      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x3ba>
 8000fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fbe:	e008      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x3ba>
 8000fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc4:	e005      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x3ba>
 8000fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fca:	e002      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x3ba>
 8000fcc:	2320      	movs	r3, #32
 8000fce:	e000      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x3ba>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	4a2e      	ldr	r2, [pc, #184]	; (800108c <HAL_DMA_IRQHandler+0x474>)
 8000fd4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d034      	beq.n	8001050 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fee:	e02f      	b.n	8001050 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d028      	beq.n	8001052 <HAL_DMA_IRQHandler+0x43a>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	2b00      	cmp	r3, #0
 8001008:	d023      	beq.n	8001052 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 020e 	bic.w	r2, r2, #14
 8001018:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f202 	lsl.w	r2, r1, r2
 8001028:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	4798      	blx	r3
    }
  }
  return;
 8001050:	bf00      	nop
 8001052:	bf00      	nop
}
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020400 	.word	0x40020400
 8001060:	40020008 	.word	0x40020008
 8001064:	4002001c 	.word	0x4002001c
 8001068:	40020030 	.word	0x40020030
 800106c:	40020044 	.word	0x40020044
 8001070:	40020058 	.word	0x40020058
 8001074:	4002006c 	.word	0x4002006c
 8001078:	40020080 	.word	0x40020080
 800107c:	40020408 	.word	0x40020408
 8001080:	4002041c 	.word	0x4002041c
 8001084:	40020430 	.word	0x40020430
 8001088:	40020444 	.word	0x40020444
 800108c:	40020000 	.word	0x40020000

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b08b      	sub	sp, #44	; 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	e133      	b.n	800130c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010a4:	2201      	movs	r2, #1
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f040 8122 	bne.w	8001306 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b12      	cmp	r3, #18
 80010c8:	d034      	beq.n	8001134 <HAL_GPIO_Init+0xa4>
 80010ca:	2b12      	cmp	r3, #18
 80010cc:	d80d      	bhi.n	80010ea <HAL_GPIO_Init+0x5a>
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x9a>
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d804      	bhi.n	80010e0 <HAL_GPIO_Init+0x50>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d031      	beq.n	800113e <HAL_GPIO_Init+0xae>
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d01c      	beq.n	8001118 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010de:	e048      	b.n	8001172 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d043      	beq.n	800116c <HAL_GPIO_Init+0xdc>
 80010e4:	2b11      	cmp	r3, #17
 80010e6:	d01b      	beq.n	8001120 <HAL_GPIO_Init+0x90>
          break;
 80010e8:	e043      	b.n	8001172 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010ea:	4a8f      	ldr	r2, [pc, #572]	; (8001328 <HAL_GPIO_Init+0x298>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d026      	beq.n	800113e <HAL_GPIO_Init+0xae>
 80010f0:	4a8d      	ldr	r2, [pc, #564]	; (8001328 <HAL_GPIO_Init+0x298>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d806      	bhi.n	8001104 <HAL_GPIO_Init+0x74>
 80010f6:	4a8d      	ldr	r2, [pc, #564]	; (800132c <HAL_GPIO_Init+0x29c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d020      	beq.n	800113e <HAL_GPIO_Init+0xae>
 80010fc:	4a8c      	ldr	r2, [pc, #560]	; (8001330 <HAL_GPIO_Init+0x2a0>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d01d      	beq.n	800113e <HAL_GPIO_Init+0xae>
          break;
 8001102:	e036      	b.n	8001172 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001104:	4a8b      	ldr	r2, [pc, #556]	; (8001334 <HAL_GPIO_Init+0x2a4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d019      	beq.n	800113e <HAL_GPIO_Init+0xae>
 800110a:	4a8b      	ldr	r2, [pc, #556]	; (8001338 <HAL_GPIO_Init+0x2a8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d016      	beq.n	800113e <HAL_GPIO_Init+0xae>
 8001110:	4a8a      	ldr	r2, [pc, #552]	; (800133c <HAL_GPIO_Init+0x2ac>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0xae>
          break;
 8001116:	e02c      	b.n	8001172 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	623b      	str	r3, [r7, #32]
          break;
 800111e:	e028      	b.n	8001172 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	3304      	adds	r3, #4
 8001126:	623b      	str	r3, [r7, #32]
          break;
 8001128:	e023      	b.n	8001172 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	3308      	adds	r3, #8
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e01e      	b.n	8001172 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	330c      	adds	r3, #12
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e019      	b.n	8001172 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001146:	2304      	movs	r3, #4
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e012      	b.n	8001172 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001154:	2308      	movs	r3, #8
 8001156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	611a      	str	r2, [r3, #16]
          break;
 800115e:	e008      	b.n	8001172 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001160:	2308      	movs	r3, #8
 8001162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	615a      	str	r2, [r3, #20]
          break;
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2bff      	cmp	r3, #255	; 0xff
 8001176:	d801      	bhi.n	800117c <HAL_GPIO_Init+0xec>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	e001      	b.n	8001180 <HAL_GPIO_Init+0xf0>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3304      	adds	r3, #4
 8001180:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2bff      	cmp	r3, #255	; 0xff
 8001186:	d802      	bhi.n	800118e <HAL_GPIO_Init+0xfe>
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x104>
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	3b08      	subs	r3, #8
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	210f      	movs	r1, #15
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	401a      	ands	r2, r3
 80011a6:	6a39      	ldr	r1, [r7, #32]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	431a      	orrs	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80a2 	beq.w	8001306 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c2:	4b5f      	ldr	r3, [pc, #380]	; (8001340 <HAL_GPIO_Init+0x2b0>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	4a5e      	ldr	r2, [pc, #376]	; (8001340 <HAL_GPIO_Init+0x2b0>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6193      	str	r3, [r2, #24]
 80011ce:	4b5c      	ldr	r3, [pc, #368]	; (8001340 <HAL_GPIO_Init+0x2b0>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011da:	4a5a      	ldr	r2, [pc, #360]	; (8001344 <HAL_GPIO_Init+0x2b4>)
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4013      	ands	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a51      	ldr	r2, [pc, #324]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d01f      	beq.n	8001246 <HAL_GPIO_Init+0x1b6>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a50      	ldr	r2, [pc, #320]	; (800134c <HAL_GPIO_Init+0x2bc>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d019      	beq.n	8001242 <HAL_GPIO_Init+0x1b2>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4f      	ldr	r2, [pc, #316]	; (8001350 <HAL_GPIO_Init+0x2c0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_GPIO_Init+0x1ae>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <HAL_GPIO_Init+0x2c4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d00d      	beq.n	800123a <HAL_GPIO_Init+0x1aa>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <HAL_GPIO_Init+0x2c8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x1a6>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x2cc>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_GPIO_Init+0x1a2>
 800122e:	2305      	movs	r3, #5
 8001230:	e00a      	b.n	8001248 <HAL_GPIO_Init+0x1b8>
 8001232:	2306      	movs	r3, #6
 8001234:	e008      	b.n	8001248 <HAL_GPIO_Init+0x1b8>
 8001236:	2304      	movs	r3, #4
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x1b8>
 800123a:	2303      	movs	r3, #3
 800123c:	e004      	b.n	8001248 <HAL_GPIO_Init+0x1b8>
 800123e:	2302      	movs	r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x1b8>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x1b8>
 8001246:	2300      	movs	r3, #0
 8001248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124a:	f002 0203 	and.w	r2, r2, #3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4093      	lsls	r3, r2
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001258:	493a      	ldr	r1, [pc, #232]	; (8001344 <HAL_GPIO_Init+0x2b4>)
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	493a      	ldr	r1, [pc, #232]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001280:	4b37      	ldr	r3, [pc, #220]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	43db      	mvns	r3, r3
 8001288:	4935      	ldr	r1, [pc, #212]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 800128a:	4013      	ands	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	4930      	ldr	r1, [pc, #192]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]
 80012a6:	e006      	b.n	80012b6 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	492b      	ldr	r1, [pc, #172]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	4926      	ldr	r1, [pc, #152]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	608b      	str	r3, [r1, #8]
 80012ce:	e006      	b.n	80012de <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	4921      	ldr	r1, [pc, #132]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012da:	4013      	ands	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d006      	beq.n	80012f8 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	491c      	ldr	r1, [pc, #112]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60cb      	str	r3, [r1, #12]
 80012f6:	e006      	b.n	8001306 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	43db      	mvns	r3, r3
 8001300:	4917      	ldr	r1, [pc, #92]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 8001302:	4013      	ands	r3, r2
 8001304:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	3301      	adds	r3, #1
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	f47f aec4 	bne.w	80010a4 <HAL_GPIO_Init+0x14>
  }
}
 800131c:	bf00      	nop
 800131e:	372c      	adds	r7, #44	; 0x2c
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	10210000 	.word	0x10210000
 800132c:	10110000 	.word	0x10110000
 8001330:	10120000 	.word	0x10120000
 8001334:	10310000 	.word	0x10310000
 8001338:	10320000 	.word	0x10320000
 800133c:	10220000 	.word	0x10220000
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	40010800 	.word	0x40010800
 800134c:	40010c00 	.word	0x40010c00
 8001350:	40011000 	.word	0x40011000
 8001354:	40011400 	.word	0x40011400
 8001358:	40011800 	.word	0x40011800
 800135c:	40011c00 	.word	0x40011c00
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e26c      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8087 	beq.w	8001492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001384:	4b92      	ldr	r3, [pc, #584]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b04      	cmp	r3, #4
 800138e:	d00c      	beq.n	80013aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001390:	4b8f      	ldr	r3, [pc, #572]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b08      	cmp	r3, #8
 800139a:	d112      	bne.n	80013c2 <HAL_RCC_OscConfig+0x5e>
 800139c:	4b8c      	ldr	r3, [pc, #560]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	d10b      	bne.n	80013c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013aa:	4b89      	ldr	r3, [pc, #548]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d06c      	beq.n	8001490 <HAL_RCC_OscConfig+0x12c>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d168      	bne.n	8001490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e246      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x76>
 80013cc:	4b80      	ldr	r3, [pc, #512]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a7f      	ldr	r2, [pc, #508]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e02e      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x98>
 80013e2:	4b7b      	ldr	r3, [pc, #492]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a7a      	ldr	r2, [pc, #488]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a77      	ldr	r2, [pc, #476]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e01d      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0xbc>
 8001406:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a71      	ldr	r2, [pc, #452]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b6f      	ldr	r3, [pc, #444]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a6e      	ldr	r2, [pc, #440]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 8001420:	4b6b      	ldr	r3, [pc, #428]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a6a      	ldr	r2, [pc, #424]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b68      	ldr	r3, [pc, #416]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a67      	ldr	r2, [pc, #412]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff f982 	bl	8000748 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff f97e 	bl	8000748 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1fa      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0xe4>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff f96e 	bl	8000748 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff f96a 	bl	8000748 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1e6      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x10c>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d063      	beq.n	8001566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149e:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014aa:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d11c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x18c>
 80014b6:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d116      	bne.n	80014f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x176>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e1ba      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4939      	ldr	r1, [pc, #228]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	e03a      	b.n	8001566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d020      	beq.n	800153a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f8:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff f923 	bl	8000748 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff f91f 	bl	8000748 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e19b      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4927      	ldr	r1, [pc, #156]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
 8001538:	e015      	b.n	8001566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff f902 	bl	8000748 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff f8fe 	bl	8000748 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e17a      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d03a      	beq.n	80015e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d019      	beq.n	80015ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7ff f8e2 	bl	8000748 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001588:	f7ff f8de 	bl	8000748 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e15a      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f000 fb2a 	bl	8001c00 <RCC_Delay>
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff f8c8 	bl	8000748 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ba:	e00f      	b.n	80015dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff f8c4 	bl	8000748 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d908      	bls.n	80015dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e140      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	42420000 	.word	0x42420000
 80015d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	4b9e      	ldr	r3, [pc, #632]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e9      	bne.n	80015bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a6 	beq.w	8001742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fa:	4b97      	ldr	r3, [pc, #604]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10d      	bne.n	8001622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b94      	ldr	r3, [pc, #592]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a93      	ldr	r2, [pc, #588]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b91      	ldr	r3, [pc, #580]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161e:	2301      	movs	r3, #1
 8001620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b8e      	ldr	r3, [pc, #568]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d118      	bne.n	8001660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162e:	4b8b      	ldr	r3, [pc, #556]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a8a      	ldr	r2, [pc, #552]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163a:	f7ff f885 	bl	8000748 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001642:	f7ff f881 	bl	8000748 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b64      	cmp	r3, #100	; 0x64
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e0fd      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b81      	ldr	r3, [pc, #516]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x312>
 8001668:	4b7b      	ldr	r3, [pc, #492]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a7a      	ldr	r2, [pc, #488]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	e02d      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x334>
 800167e:	4b76      	ldr	r3, [pc, #472]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a75      	ldr	r2, [pc, #468]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	4b73      	ldr	r3, [pc, #460]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a72      	ldr	r2, [pc, #456]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	e01c      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d10c      	bne.n	80016ba <HAL_RCC_OscConfig+0x356>
 80016a0:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a6c      	ldr	r2, [pc, #432]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	4b6a      	ldr	r3, [pc, #424]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4a69      	ldr	r2, [pc, #420]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	e00b      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 80016ba:	4b67      	ldr	r3, [pc, #412]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a66      	ldr	r2, [pc, #408]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	4b64      	ldr	r3, [pc, #400]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a63      	ldr	r2, [pc, #396]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d015      	beq.n	8001706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff f835 	bl	8000748 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff f831 	bl	8000748 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e0ab      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f8:	4b57      	ldr	r3, [pc, #348]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ee      	beq.n	80016e2 <HAL_RCC_OscConfig+0x37e>
 8001704:	e014      	b.n	8001730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7ff f81f 	bl	8000748 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170c:	e00a      	b.n	8001724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170e:	f7ff f81b 	bl	8000748 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f241 3288 	movw	r2, #5000	; 0x1388
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e095      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001724:	4b4c      	ldr	r3, [pc, #304]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1ee      	bne.n	800170e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d105      	bne.n	8001742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001736:	4b48      	ldr	r3, [pc, #288]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a47      	ldr	r2, [pc, #284]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 8081 	beq.w	800184e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174c:	4b42      	ldr	r3, [pc, #264]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d061      	beq.n	800181c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d146      	bne.n	80017ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001760:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <HAL_RCC_OscConfig+0x4fc>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7fe ffef 	bl	8000748 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7fe ffeb 	bl	8000748 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e067      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001780:	4b35      	ldr	r3, [pc, #212]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d108      	bne.n	80017a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	492d      	ldr	r1, [pc, #180]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a19      	ldr	r1, [r3, #32]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	430b      	orrs	r3, r1
 80017ba:	4927      	ldr	r1, [pc, #156]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_RCC_OscConfig+0x4fc>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7fe ffbf 	bl	8000748 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ce:	f7fe ffbb 	bl	8000748 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e037      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x46a>
 80017ec:	e02f      	b.n	800184e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_RCC_OscConfig+0x4fc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7fe ffa8 	bl	8000748 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7fe ffa4 	bl	8000748 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e020      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x498>
 800181a:	e018      	b.n	800184e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e013      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	429a      	cmp	r2, r3
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	40007000 	.word	0x40007000
 8001860:	42420060 	.word	0x42420060

08001864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0d0      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0207 	bic.w	r2, r3, #7
 800188e:	4965      	ldr	r1, [pc, #404]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0b8      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	494d      	ldr	r1, [pc, #308]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d040      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e07f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e073      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06b      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4936      	ldr	r1, [pc, #216]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7fe fef8 	bl	8000748 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7fe fef4 	bl	8000748 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e053      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d210      	bcs.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	4922      	ldr	r1, [pc, #136]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e032      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4916      	ldr	r1, [pc, #88]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	490e      	ldr	r1, [pc, #56]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019f2:	f000 f82d 	bl	8001a50 <HAL_RCC_GetSysClockFreq>
 80019f6:	4601      	mov	r1, r0
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	5cd3      	ldrb	r3, [r2, r3]
 8001a06:	fa21 f303 	lsr.w	r3, r1, r3
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1cc>)
 8001a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1d0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fcfc 	bl	8000410 <HAL_InitTick>

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	080027cc 	.word	0x080027cc
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_RCC_EnableCSS+0x14>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	4242004c 	.word	0x4242004c

08001a50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a50:	b490      	push	{r4, r7}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a56:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a58:	1d3c      	adds	r4, r7, #4
 8001a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a60:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x40>
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d003      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0x46>
 8001a8e:	e02d      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a92:	623b      	str	r3, [r7, #32]
      break;
 8001a94:	e02d      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	0c9b      	lsrs	r3, r3, #18
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001aa8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	0c5b      	lsrs	r3, r3, #17
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ac8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ace:	fb02 f203 	mul.w	r2, r2, r3
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ada:	e004      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	623b      	str	r3, [r7, #32]
      break;
 8001aea:	e002      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aee:	623b      	str	r3, [r7, #32]
      break;
 8001af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af2:	6a3b      	ldr	r3, [r7, #32]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3728      	adds	r7, #40	; 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc90      	pop	{r4, r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	080027b8 	.word	0x080027b8
 8001b04:	080027c8 	.word	0x080027c8
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	007a1200 	.word	0x007a1200
 8001b10:	003d0900 	.word	0x003d0900

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	20000000 	.word	0x20000000

08001b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b2c:	f7ff fff2 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b30:	4601      	mov	r1, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4a03      	ldr	r2, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3e:	5cd3      	ldrb	r3, [r2, r3]
 8001b40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	080027dc 	.word	0x080027dc

08001b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b58:	4601      	mov	r1, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	0adb      	lsrs	r3, r3, #11
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
 8001b68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	080027dc 	.word	0x080027dc

08001b78 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	220f      	movs	r2, #15
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_RCC_GetClockConfig+0x58>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_RCC_GetClockConfig+0x58>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_GetClockConfig+0x58>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_RCC_GetClockConfig+0x58>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	08db      	lsrs	r3, r3, #3
 8001bb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0207 	and.w	r2, r3, #7
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	2b80      	cmp	r3, #128	; 0x80
 8001be6:	d104      	bne.n	8001bf2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001be8:	f000 f828 	bl	8001c3c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_RCC_NMI_IRQHandler+0x24>)
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	701a      	strb	r2, [r3, #0]
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	4002100a 	.word	0x4002100a

08001c00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <RCC_Delay+0x34>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <RCC_Delay+0x38>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0a5b      	lsrs	r3, r3, #9
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c1c:	bf00      	nop
  }
  while (Delay --);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	60fa      	str	r2, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f9      	bne.n	8001c1c <RCC_Delay+0x1c>
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000000 	.word	0x20000000
 8001c38:	10624dd3 	.word	0x10624dd3

08001c3c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e041      	b.n	8001cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f839 	bl	8001ce6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3304      	adds	r3, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f000 f9c2 	bl	8002010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d001      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e044      	b.n	8001d9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_TIM_Base_Start_IT+0xac>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d018      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x6c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d013      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x6c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d44:	d00e      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x6c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <HAL_TIM_Base_Start_IT+0xb4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d009      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x6c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d004      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x6c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d111      	bne.n	8001d88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d010      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d86:	e007      	b.n	8001d98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40012c00 	.word	0x40012c00
 8001da8:	40013400 	.word	0x40013400
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40000800 	.word	0x40000800
 8001db4:	40000c00 	.word	0x40000c00

08001db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d122      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d11b      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0202 	mvn.w	r2, #2
 8001de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8ed 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8e0 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f8ef 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d122      	bne.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d11b      	bne.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0204 	mvn.w	r2, #4
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8c3 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8b6 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8c5 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d122      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d11b      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0208 	mvn.w	r2, #8
 8001e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2204      	movs	r2, #4
 8001e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f899 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f88c 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f89b 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d122      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0210 	mvn.w	r2, #16
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f86f 	bl	8001fda <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f862 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f871 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0201 	mvn.w	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fa20 	bl	800037c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	2b80      	cmp	r3, #128	; 0x80
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8d7 	bl	8002116 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b40      	cmp	r3, #64	; 0x40
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	d107      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f835 	bl	8001ffe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d107      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0220 	mvn.w	r2, #32
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8a2 	bl	8002104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a33      	ldr	r2, [pc, #204]	; (80020f0 <TIM_Base_SetConfig+0xe0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a32      	ldr	r2, [pc, #200]	; (80020f4 <TIM_Base_SetConfig+0xe4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00f      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002036:	d00b      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a2f      	ldr	r2, [pc, #188]	; (80020f8 <TIM_Base_SetConfig+0xe8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a2e      	ldr	r2, [pc, #184]	; (80020fc <TIM_Base_SetConfig+0xec>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a2d      	ldr	r2, [pc, #180]	; (8002100 <TIM_Base_SetConfig+0xf0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d108      	bne.n	8002062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a22      	ldr	r2, [pc, #136]	; (80020f0 <TIM_Base_SetConfig+0xe0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <TIM_Base_SetConfig+0x82>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a21      	ldr	r2, [pc, #132]	; (80020f4 <TIM_Base_SetConfig+0xe4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00f      	beq.n	8002092 <TIM_Base_SetConfig+0x82>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002078:	d00b      	beq.n	8002092 <TIM_Base_SetConfig+0x82>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1e      	ldr	r2, [pc, #120]	; (80020f8 <TIM_Base_SetConfig+0xe8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <TIM_Base_SetConfig+0x82>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <TIM_Base_SetConfig+0xec>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d003      	beq.n	8002092 <TIM_Base_SetConfig+0x82>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <TIM_Base_SetConfig+0xf0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d108      	bne.n	80020a4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <TIM_Base_SetConfig+0xe0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d003      	beq.n	80020d8 <TIM_Base_SetConfig+0xc8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <TIM_Base_SetConfig+0xe4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d103      	bne.n	80020e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	615a      	str	r2, [r3, #20]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40013400 	.word	0x40013400
 80020f8:	40000400 	.word	0x40000400
 80020fc:	40000800 	.word	0x40000800
 8002100:	40000c00 	.word	0x40000c00

08002104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e03f      	b.n	80021ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe fa2e 	bl	80005b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800216a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fa5d 	bl	800262c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10d      	bne.n	8002216 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_UART_IRQHandler+0x52>
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f98b 	bl	800252a <UART_Receive_IT>
      return;
 8002214:	e0d1      	b.n	80023ba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80b0 	beq.w	800237e <HAL_UART_IRQHandler+0x1ba>
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_UART_IRQHandler+0x70>
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80a5 	beq.w	800237e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_UART_IRQHandler+0x90>
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_UART_IRQHandler+0xb0>
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	f043 0202 	orr.w	r2, r3, #2
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_UART_IRQHandler+0xd0>
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228c:	f043 0204 	orr.w	r2, r3, #4
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00f      	beq.n	80022be <HAL_UART_IRQHandler+0xfa>
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d104      	bne.n	80022b2 <HAL_UART_IRQHandler+0xee>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b6:	f043 0208 	orr.w	r2, r3, #8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d078      	beq.n	80023b8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_UART_IRQHandler+0x11c>
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f925 	bl	800252a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf14      	ite	ne
 80022ee:	2301      	movne	r3, #1
 80022f0:	2300      	moveq	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <HAL_UART_IRQHandler+0x144>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d031      	beq.n	800236c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f876 	bl	80023fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	d023      	beq.n	8002364 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800232a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002338:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <HAL_UART_IRQHandler+0x1fc>)
 800233a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fb61 	bl	8000a08 <HAL_DMA_Abort_IT>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d016      	beq.n	800237a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002356:	4610      	mov	r0, r2
 8002358:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800235a:	e00e      	b.n	800237a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f843 	bl	80023e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002362:	e00a      	b.n	800237a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f83f 	bl	80023e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800236a:	e006      	b.n	800237a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f83b 	bl	80023e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002378:	e01e      	b.n	80023b8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800237a:	bf00      	nop
    return;
 800237c:	e01c      	b.n	80023b8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_UART_IRQHandler+0x1d6>
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f862 	bl	800245c <UART_Transmit_IT>
    return;
 8002398:	e00f      	b.n	80023ba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_UART_IRQHandler+0x1f6>
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f8a3 	bl	80024fa <UART_EndTransmit_IT>
    return;
 80023b4:	bf00      	nop
 80023b6:	e000      	b.n	80023ba <HAL_UART_IRQHandler+0x1f6>
    return;
 80023b8:	bf00      	nop
  }
}
 80023ba:	3720      	adds	r7, #32
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	08002435 	.word	0x08002435

080023c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002410:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7ff ffca 	bl	80023e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b21      	cmp	r3, #33	; 0x21
 800246e:	d13e      	bne.n	80024ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002478:	d114      	bne.n	80024a4 <UART_Transmit_IT+0x48>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d110      	bne.n	80024a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002496:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	1c9a      	adds	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	621a      	str	r2, [r3, #32]
 80024a2:	e008      	b.n	80024b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	1c59      	adds	r1, r3, #1
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6211      	str	r1, [r2, #32]
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29b      	uxth	r3, r3
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4619      	mov	r1, r3
 80024c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10f      	bne.n	80024ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002510:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff52 	bl	80023c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b22      	cmp	r3, #34	; 0x22
 800253c:	d170      	bne.n	8002620 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002546:	d117      	bne.n	8002578 <UART_Receive_IT+0x4e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d113      	bne.n	8002578 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	b29b      	uxth	r3, r3
 8002562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002566:	b29a      	uxth	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	1c9a      	adds	r2, r3, #2
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
 8002576:	e026      	b.n	80025c6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258a:	d007      	beq.n	800259c <UART_Receive_IT+0x72>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <UART_Receive_IT+0x80>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d106      	bne.n	80025aa <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e008      	b.n	80025bc <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4619      	mov	r1, r3
 80025d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d120      	bne.n	800261c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0220 	bic.w	r2, r2, #32
 80025e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff fedf 	bl	80023d6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e002      	b.n	8002622 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e000      	b.n	8002622 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
  }
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002666:	f023 030c 	bic.w	r3, r3, #12
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	430b      	orrs	r3, r1
 8002672:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a2c      	ldr	r2, [pc, #176]	; (8002740 <UART_SetConfig+0x114>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d103      	bne.n	800269c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002694:	f7ff fa5c 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	e002      	b.n	80026a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800269c:	f7ff fa44 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 80026a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	009a      	lsls	r2, r3, #2
 80026ac:	441a      	add	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	4a22      	ldr	r2, [pc, #136]	; (8002744 <UART_SetConfig+0x118>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	0119      	lsls	r1, r3, #4
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	009a      	lsls	r2, r3, #2
 80026cc:	441a      	add	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <UART_SetConfig+0x118>)
 80026da:	fba3 0302 	umull	r0, r3, r3, r2
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	2064      	movs	r0, #100	; 0x64
 80026e2:	fb00 f303 	mul.w	r3, r0, r3
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	3332      	adds	r3, #50	; 0x32
 80026ec:	4a15      	ldr	r2, [pc, #84]	; (8002744 <UART_SetConfig+0x118>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f8:	4419      	add	r1, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	009a      	lsls	r2, r3, #2
 8002704:	441a      	add	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <UART_SetConfig+0x118>)
 8002712:	fba3 0302 	umull	r0, r3, r3, r2
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2064      	movs	r0, #100	; 0x64
 800271a:	fb00 f303 	mul.w	r3, r0, r3
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	3332      	adds	r3, #50	; 0x32
 8002724:	4a07      	ldr	r2, [pc, #28]	; (8002744 <UART_SetConfig+0x118>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	f003 020f 	and.w	r2, r3, #15
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	440a      	add	r2, r1
 8002736:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40013800 	.word	0x40013800
 8002744:	51eb851f 	.word	0x51eb851f

08002748 <__libc_init_array>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	2500      	movs	r5, #0
 800274c:	4e0c      	ldr	r6, [pc, #48]	; (8002780 <__libc_init_array+0x38>)
 800274e:	4c0d      	ldr	r4, [pc, #52]	; (8002784 <__libc_init_array+0x3c>)
 8002750:	1ba4      	subs	r4, r4, r6
 8002752:	10a4      	asrs	r4, r4, #2
 8002754:	42a5      	cmp	r5, r4
 8002756:	d109      	bne.n	800276c <__libc_init_array+0x24>
 8002758:	f000 f822 	bl	80027a0 <_init>
 800275c:	2500      	movs	r5, #0
 800275e:	4e0a      	ldr	r6, [pc, #40]	; (8002788 <__libc_init_array+0x40>)
 8002760:	4c0a      	ldr	r4, [pc, #40]	; (800278c <__libc_init_array+0x44>)
 8002762:	1ba4      	subs	r4, r4, r6
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	42a5      	cmp	r5, r4
 8002768:	d105      	bne.n	8002776 <__libc_init_array+0x2e>
 800276a:	bd70      	pop	{r4, r5, r6, pc}
 800276c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002770:	4798      	blx	r3
 8002772:	3501      	adds	r5, #1
 8002774:	e7ee      	b.n	8002754 <__libc_init_array+0xc>
 8002776:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800277a:	4798      	blx	r3
 800277c:	3501      	adds	r5, #1
 800277e:	e7f2      	b.n	8002766 <__libc_init_array+0x1e>
 8002780:	080027e4 	.word	0x080027e4
 8002784:	080027e4 	.word	0x080027e4
 8002788:	080027e4 	.word	0x080027e4
 800278c:	080027e8 	.word	0x080027e8

08002790 <memset>:
 8002790:	4603      	mov	r3, r0
 8002792:	4402      	add	r2, r0
 8002794:	4293      	cmp	r3, r2
 8002796:	d100      	bne.n	800279a <memset+0xa>
 8002798:	4770      	bx	lr
 800279a:	f803 1b01 	strb.w	r1, [r3], #1
 800279e:	e7f9      	b.n	8002794 <memset+0x4>

080027a0 <_init>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	bf00      	nop
 80027a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a6:	bc08      	pop	{r3}
 80027a8:	469e      	mov	lr, r3
 80027aa:	4770      	bx	lr

080027ac <_fini>:
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	bf00      	nop
 80027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b2:	bc08      	pop	{r3}
 80027b4:	469e      	mov	lr, r3
 80027b6:	4770      	bx	lr
