
USART_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025cc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002848  08002848  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002848  08002848  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002848  08002848  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  080028c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080028c0  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb19  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f5a  00000000  00000000  0002cbb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  0002eb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  0002f760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ad97  00000000  00000000  00030298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad75  00000000  00000000  0004b02f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009929f  00000000  00000000  00055da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003784  00000000  00000000  000ef0c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002798 	.word	0x08002798

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002798 	.word	0x08002798

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <MX_GPIO_Init+0x70>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a19      	ldr	r2, [pc, #100]	; (8000294 <MX_GPIO_Init+0x70>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b17      	ldr	r3, [pc, #92]	; (8000294 <MX_GPIO_Init+0x70>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0310 	and.w	r3, r3, #16
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <MX_GPIO_Init+0x70>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a13      	ldr	r2, [pc, #76]	; (8000294 <MX_GPIO_Init+0x70>)
 8000248:	f043 0320 	orr.w	r3, r3, #32
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_GPIO_Init+0x70>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0320 	and.w	r3, r3, #32
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_GPIO_Init+0x70>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <MX_GPIO_Init+0x70>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_GPIO_Init+0x70>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0304 	and.w	r3, r3, #4
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <MX_GPIO_Init+0x70>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <MX_GPIO_Init+0x70>)
 8000278:	f043 0308 	orr.w	r3, r3, #8
 800027c:	6193      	str	r3, [r2, #24]
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <MX_GPIO_Init+0x70>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f003 0308 	and.w	r3, r3, #8
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40021000 	.word	0x40021000

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 faac 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f80e 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f7ff ffbe 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002a8:	f000 f9ce 	bl	8000648 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("test\r\n");
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <main+0x24>)
 80002ae:	f001 fe69 	bl	8001f84 <puts>
	  HAL_Delay(500);
 80002b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b6:	f000 fad1 	bl	800085c <HAL_Delay>
	  printf("test\r\n");
 80002ba:	e7f7      	b.n	80002ac <main+0x14>
 80002bc:	080027b0 	.word	0x080027b0

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b090      	sub	sp, #64	; 0x40
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	2228      	movs	r2, #40	; 0x28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fdf4 	bl	8001ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e2:	2301      	movs	r3, #1
 80002e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	2301      	movs	r3, #1
 80002f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f4:	2302      	movs	r3, #2
 80002f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000302:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0318 	add.w	r3, r7, #24
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fd13 	bl	8000d34 <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000314:	f000 f82e 	bl	8000374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031c:	2302      	movs	r3, #2
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2102      	movs	r1, #2
 8000332:	4618      	mov	r0, r3
 8000334:	f000 ff7e 	bl	8001234 <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800033e:	f000 f819 	bl	8000374 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000342:	f001 f861 	bl	8001408 <HAL_RCC_EnableCSS>
}
 8000346:	bf00      	nop
 8000348:	3740      	adds	r7, #64	; 0x40
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d101      	bne.n	8000366 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000362:	f000 fa5f 	bl	8000824 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40001400 	.word	0x40001400

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <HAL_MspInit+0x5c>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a14      	ldr	r2, [pc, #80]	; (80003dc <HAL_MspInit+0x5c>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <HAL_MspInit+0x5c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <HAL_MspInit+0x5c>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <HAL_MspInit+0x60>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <HAL_MspInit+0x60>)
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d2:	bf00      	nop
 80003d4:	3714      	adds	r7, #20
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010000 	.word	0x40010000

080003e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08c      	sub	sp, #48	; 0x30
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	6879      	ldr	r1, [r7, #4]
 80003f8:	2037      	movs	r0, #55	; 0x37
 80003fa:	f000 fb06 	bl	8000a0a <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80003fe:	2037      	movs	r0, #55	; 0x37
 8000400:	f000 fb1f 	bl	8000a42 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000404:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <HAL_InitTick+0xa0>)
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	4a1e      	ldr	r2, [pc, #120]	; (8000484 <HAL_InitTick+0xa0>)
 800040a:	f043 0320 	orr.w	r3, r3, #32
 800040e:	61d3      	str	r3, [r2, #28]
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <HAL_InitTick+0xa0>)
 8000412:	69db      	ldr	r3, [r3, #28]
 8000414:	f003 0320 	and.w	r3, r3, #32
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800041c:	f107 0210 	add.w	r2, r7, #16
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4611      	mov	r1, r2
 8000426:	4618      	mov	r0, r3
 8000428:	f001 f88e 	bl	8001548 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800042c:	f001 f864 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8000430:	4603      	mov	r3, r0
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000438:	4a13      	ldr	r2, [pc, #76]	; (8000488 <HAL_InitTick+0xa4>)
 800043a:	fba2 2303 	umull	r2, r3, r2, r3
 800043e:	0c9b      	lsrs	r3, r3, #18
 8000440:	3b01      	subs	r3, #1
 8000442:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <HAL_InitTick+0xa8>)
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <HAL_InitTick+0xac>)
 8000448:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <HAL_InitTick+0xa8>)
 800044c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000450:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <HAL_InitTick+0xa8>)
 8000454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000456:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <HAL_InitTick+0xa8>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <HAL_InitTick+0xa8>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000464:	4809      	ldr	r0, [pc, #36]	; (800048c <HAL_InitTick+0xa8>)
 8000466:	f001 f8d7 	bl	8001618 <HAL_TIM_Base_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d104      	bne.n	800047a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000470:	4806      	ldr	r0, [pc, #24]	; (800048c <HAL_InitTick+0xa8>)
 8000472:	f001 f929 	bl	80016c8 <HAL_TIM_Base_Start_IT>
 8000476:	4603      	mov	r3, r0
 8000478:	e000      	b.n	800047c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800047a:	2301      	movs	r3, #1
}
 800047c:	4618      	mov	r0, r3
 800047e:	3730      	adds	r7, #48	; 0x30
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000
 8000488:	431bde83 	.word	0x431bde83
 800048c:	20000098 	.word	0x20000098
 8000490:	40001400 	.word	0x40001400

08000494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000498:	f001 f886 	bl	80015a8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <HardFault_Handler+0x4>

080004a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <MemManage_Handler+0x4>

080004ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <BusFault_Handler+0x4>

080004b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <UsageFault_Handler+0x4>

080004b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <TIM7_IRQHandler+0x10>)
 80004ee:	f001 f94b 	bl	8001788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000098 	.word	0x20000098

080004fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	e00a      	b.n	8000524 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800050e:	f3af 8000 	nop.w
 8000512:	4601      	mov	r1, r0
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	60ba      	str	r2, [r7, #8]
 800051a:	b2ca      	uxtb	r2, r1
 800051c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	3301      	adds	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697a      	ldr	r2, [r7, #20]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	429a      	cmp	r2, r3
 800052a:	dbf0      	blt.n	800050e <_read+0x12>
	}

return len;
 800052c:	687b      	ldr	r3, [r7, #4]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b086      	sub	sp, #24
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	e009      	b.n	800055c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	1c5a      	adds	r2, r3, #1
 800054c:	60ba      	str	r2, [r7, #8]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f915 	bl	8000780 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	3301      	adds	r3, #1
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697a      	ldr	r2, [r7, #20]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	429a      	cmp	r2, r3
 8000562:	dbf1      	blt.n	8000548 <_write+0x12>
	}
	return len;
 8000564:	687b      	ldr	r3, [r7, #4]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <_close>:

int _close(int file)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
	return -1;
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000594:	605a      	str	r2, [r3, #4]
	return 0;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <_isatty>:

int _isatty(int file)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
	return 1;
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b085      	sub	sp, #20
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
	return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
	...

080005d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d8:	4a14      	ldr	r2, [pc, #80]	; (800062c <_sbrk+0x5c>)
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <_sbrk+0x60>)
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <_sbrk+0x64>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <_sbrk+0x68>)
 80005f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d207      	bcs.n	8000610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000600:	f001 fc32 	bl	8001e68 <__errno>
 8000604:	4602      	mov	r2, r0
 8000606:	230c      	movs	r3, #12
 8000608:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	e009      	b.n	8000624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <_sbrk+0x64>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	4a05      	ldr	r2, [pc, #20]	; (8000634 <_sbrk+0x64>)
 8000620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000c000 	.word	0x2000c000
 8000630:	00000400 	.word	0x00000400
 8000634:	2000008c 	.word	0x2000008c
 8000638:	20000128 	.word	0x20000128

0800063c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_USART1_UART_Init+0x50>)
 8000650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000680:	f001 fa3a 	bl	8001af8 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800068a:	f7ff fe73 	bl	8000374 <Error_Handler>
  }

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000e0 	.word	0x200000e0
 8000698:	40013800 	.word	0x40013800

0800069c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <HAL_UART_MspInit+0x8c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d131      	bne.n	8000720 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <HAL_UART_MspInit+0x90>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a1a      	ldr	r2, [pc, #104]	; (800072c <HAL_UART_MspInit+0x90>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <HAL_UART_MspInit+0x90>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_UART_MspInit+0x90>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <HAL_UART_MspInit+0x90>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_UART_MspInit+0x90>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <HAL_UART_MspInit+0x94>)
 8000702:	f000 f9ad 	bl	8000a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <HAL_UART_MspInit+0x94>)
 800071c:	f000 f9a0 	bl	8000a60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40013800 	.word	0x40013800
 800072c:	40021000 	.word	0x40021000
 8000730:	40010800 	.word	0x40010800

08000734 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800073c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000740:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	2b00      	cmp	r3, #0
 800074a:	d013      	beq.n	8000774 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800074c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000750:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000754:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00b      	beq.n	8000774 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800075c:	e000      	b.n	8000760 <ITM_SendChar+0x2c>
    {
      __NOP();
 800075e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000760:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0f9      	beq.n	800075e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800076a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000774:	687b      	ldr	r3, [r7, #4]
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078e:	2201      	movs	r2, #1
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <__io_putchar+0x28>)
 8000792:	f001 f9fe 	bl	8001b92 <HAL_UART_Transmit>

  ITM_SendChar(ch);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffcb 	bl	8000734 <ITM_SendChar>

  return ch;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000e0 	.word	0x200000e0

080007ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ae:	e003      	b.n	80007b8 <LoopCopyDataInit>

080007b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007b6:	3104      	adds	r1, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007b8:	480a      	ldr	r0, [pc, #40]	; (80007e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007c0:	d3f6      	bcc.n	80007b0 <CopyDataInit>
  ldr r2, =_sbss
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007c4:	e002      	b.n	80007cc <LoopFillZerobss>

080007c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007c8:	f842 3b04 	str.w	r3, [r2], #4

080007cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007d0:	d3f9      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d2:	f7ff ff33 	bl	800063c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d6:	f001 fb4d 	bl	8001e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007da:	f7ff fd5d 	bl	8000298 <main>
  bx lr
 80007de:	4770      	bx	lr
  ldr r3, =_sidata
 80007e0:	08002850 	.word	0x08002850
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007e8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80007ec:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80007f0:	20000128 	.word	0x20000128

080007f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_2_IRQHandler>
	...

080007f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_Init+0x28>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_Init+0x28>)
 8000802:	f043 0310 	orr.w	r3, r3, #16
 8000806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000808:	2003      	movs	r0, #3
 800080a:	f000 f8f3 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff fde8 	bl	80003e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000814:	f7ff fdb4 	bl	8000380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40022000 	.word	0x40022000

08000824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_IncTick+0x1c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x20>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a03      	ldr	r2, [pc, #12]	; (8000844 <HAL_IncTick+0x20>)
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	20000008 	.word	0x20000008
 8000844:	20000120 	.word	0x20000120

08000848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <HAL_GetTick+0x10>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	20000120 	.word	0x20000120

0800085c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000864:	f7ff fff0 	bl	8000848 <HAL_GetTick>
 8000868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000874:	d005      	beq.n	8000882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_Delay+0x40>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	4413      	add	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000882:	bf00      	nop
 8000884:	f7ff ffe0 	bl	8000848 <HAL_GetTick>
 8000888:	4602      	mov	r2, r0
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	429a      	cmp	r2, r3
 8000892:	d8f7      	bhi.n	8000884 <HAL_Delay+0x28>
  {
  }
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000008 	.word	0x20000008

080008a0 <__NVIC_SetPriorityGrouping>:
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008bc:	4013      	ands	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d2:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	60d3      	str	r3, [r2, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_GetPriorityGrouping>:
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <__NVIC_GetPriorityGrouping+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	f003 0307 	and.w	r3, r3, #7
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_EnableIRQ>:
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	db0b      	blt.n	800092e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	f003 021f 	and.w	r2, r3, #31
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <__NVIC_EnableIRQ+0x34>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	095b      	lsrs	r3, r3, #5
 8000924:	2001      	movs	r0, #1
 8000926:	fa00 f202 	lsl.w	r2, r0, r2
 800092a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	e000e100 	.word	0xe000e100

0800093c <__NVIC_SetPriority>:
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	db0a      	blt.n	8000966 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	490c      	ldr	r1, [pc, #48]	; (8000988 <__NVIC_SetPriority+0x4c>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	440b      	add	r3, r1
 8000960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000964:	e00a      	b.n	800097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <__NVIC_SetPriority+0x50>)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	3b04      	subs	r3, #4
 8000974:	0112      	lsls	r2, r2, #4
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	440b      	add	r3, r1
 800097a:	761a      	strb	r2, [r3, #24]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <NVIC_EncodePriority>:
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f1c3 0307 	rsb	r3, r3, #7
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	bf28      	it	cs
 80009ae:	2304      	movcs	r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3304      	adds	r3, #4
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d902      	bls.n	80009c0 <NVIC_EncodePriority+0x30>
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3b03      	subs	r3, #3
 80009be:	e000      	b.n	80009c2 <NVIC_EncodePriority+0x32>
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43da      	mvns	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43d9      	mvns	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	4313      	orrs	r3, r2
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3724      	adds	r7, #36	; 0x24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff4f 	bl	80008a0 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff64 	bl	80008e8 <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ffb2 	bl	8000990 <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff81 	bl	800093c <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff57 	bl	8000904 <__NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b08b      	sub	sp, #44	; 0x2c
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a72:	e133      	b.n	8000cdc <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a74:	2201      	movs	r2, #1
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	4013      	ands	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	f040 8122 	bne.w	8000cd6 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b12      	cmp	r3, #18
 8000a98:	d034      	beq.n	8000b04 <HAL_GPIO_Init+0xa4>
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d80d      	bhi.n	8000aba <HAL_GPIO_Init+0x5a>
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d02b      	beq.n	8000afa <HAL_GPIO_Init+0x9a>
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d804      	bhi.n	8000ab0 <HAL_GPIO_Init+0x50>
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d031      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d01c      	beq.n	8000ae8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aae:	e048      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d043      	beq.n	8000b3c <HAL_GPIO_Init+0xdc>
 8000ab4:	2b11      	cmp	r3, #17
 8000ab6:	d01b      	beq.n	8000af0 <HAL_GPIO_Init+0x90>
          break;
 8000ab8:	e043      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aba:	4a8f      	ldr	r2, [pc, #572]	; (8000cf8 <HAL_GPIO_Init+0x298>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d026      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
 8000ac0:	4a8d      	ldr	r2, [pc, #564]	; (8000cf8 <HAL_GPIO_Init+0x298>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d806      	bhi.n	8000ad4 <HAL_GPIO_Init+0x74>
 8000ac6:	4a8d      	ldr	r2, [pc, #564]	; (8000cfc <HAL_GPIO_Init+0x29c>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d020      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
 8000acc:	4a8c      	ldr	r2, [pc, #560]	; (8000d00 <HAL_GPIO_Init+0x2a0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d01d      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
          break;
 8000ad2:	e036      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ad4:	4a8b      	ldr	r2, [pc, #556]	; (8000d04 <HAL_GPIO_Init+0x2a4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d019      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
 8000ada:	4a8b      	ldr	r2, [pc, #556]	; (8000d08 <HAL_GPIO_Init+0x2a8>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d016      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
 8000ae0:	4a8a      	ldr	r2, [pc, #552]	; (8000d0c <HAL_GPIO_Init+0x2ac>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
          break;
 8000ae6:	e02c      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e028      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	3304      	adds	r3, #4
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e023      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	3308      	adds	r3, #8
 8000b00:	623b      	str	r3, [r7, #32]
          break;
 8000b02:	e01e      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	330c      	adds	r3, #12
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e019      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b16:	2304      	movs	r3, #4
 8000b18:	623b      	str	r3, [r7, #32]
          break;
 8000b1a:	e012      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d105      	bne.n	8000b30 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b24:	2308      	movs	r3, #8
 8000b26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	611a      	str	r2, [r3, #16]
          break;
 8000b2e:	e008      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b30:	2308      	movs	r3, #8
 8000b32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	615a      	str	r2, [r3, #20]
          break;
 8000b3a:	e002      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	2bff      	cmp	r3, #255	; 0xff
 8000b46:	d801      	bhi.n	8000b4c <HAL_GPIO_Init+0xec>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	e001      	b.n	8000b50 <HAL_GPIO_Init+0xf0>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	2bff      	cmp	r3, #255	; 0xff
 8000b56:	d802      	bhi.n	8000b5e <HAL_GPIO_Init+0xfe>
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	e002      	b.n	8000b64 <HAL_GPIO_Init+0x104>
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	3b08      	subs	r3, #8
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	401a      	ands	r2, r3
 8000b76:	6a39      	ldr	r1, [r7, #32]
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 80a2 	beq.w	8000cd6 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b92:	4b5f      	ldr	r3, [pc, #380]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a5e      	ldr	r2, [pc, #376]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6193      	str	r3, [r2, #24]
 8000b9e:	4b5c      	ldr	r3, [pc, #368]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000baa:	4a5a      	ldr	r2, [pc, #360]	; (8000d14 <HAL_GPIO_Init+0x2b4>)
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a51      	ldr	r2, [pc, #324]	; (8000d18 <HAL_GPIO_Init+0x2b8>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d01f      	beq.n	8000c16 <HAL_GPIO_Init+0x1b6>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a50      	ldr	r2, [pc, #320]	; (8000d1c <HAL_GPIO_Init+0x2bc>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d019      	beq.n	8000c12 <HAL_GPIO_Init+0x1b2>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a4f      	ldr	r2, [pc, #316]	; (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d013      	beq.n	8000c0e <HAL_GPIO_Init+0x1ae>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a4e      	ldr	r2, [pc, #312]	; (8000d24 <HAL_GPIO_Init+0x2c4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d00d      	beq.n	8000c0a <HAL_GPIO_Init+0x1aa>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a4d      	ldr	r2, [pc, #308]	; (8000d28 <HAL_GPIO_Init+0x2c8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d007      	beq.n	8000c06 <HAL_GPIO_Init+0x1a6>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4c      	ldr	r2, [pc, #304]	; (8000d2c <HAL_GPIO_Init+0x2cc>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d101      	bne.n	8000c02 <HAL_GPIO_Init+0x1a2>
 8000bfe:	2305      	movs	r3, #5
 8000c00:	e00a      	b.n	8000c18 <HAL_GPIO_Init+0x1b8>
 8000c02:	2306      	movs	r3, #6
 8000c04:	e008      	b.n	8000c18 <HAL_GPIO_Init+0x1b8>
 8000c06:	2304      	movs	r3, #4
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x1b8>
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e004      	b.n	8000c18 <HAL_GPIO_Init+0x1b8>
 8000c0e:	2302      	movs	r3, #2
 8000c10:	e002      	b.n	8000c18 <HAL_GPIO_Init+0x1b8>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <HAL_GPIO_Init+0x1b8>
 8000c16:	2300      	movs	r3, #0
 8000c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c1a:	f002 0203 	and.w	r2, r2, #3
 8000c1e:	0092      	lsls	r2, r2, #2
 8000c20:	4093      	lsls	r3, r2
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c28:	493a      	ldr	r1, [pc, #232]	; (8000d14 <HAL_GPIO_Init+0x2b4>)
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d006      	beq.n	8000c50 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c42:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	493a      	ldr	r1, [pc, #232]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	600b      	str	r3, [r1, #0]
 8000c4e:	e006      	b.n	8000c5e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c50:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	43db      	mvns	r3, r3
 8000c58:	4935      	ldr	r1, [pc, #212]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d006      	beq.n	8000c78 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	4930      	ldr	r1, [pc, #192]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	604b      	str	r3, [r1, #4]
 8000c76:	e006      	b.n	8000c86 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	492b      	ldr	r1, [pc, #172]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	4926      	ldr	r1, [pc, #152]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	608b      	str	r3, [r1, #8]
 8000c9e:	e006      	b.n	8000cae <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4921      	ldr	r1, [pc, #132]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d006      	beq.n	8000cc8 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	491c      	ldr	r1, [pc, #112]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60cb      	str	r3, [r1, #12]
 8000cc6:	e006      	b.n	8000cd6 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	4917      	ldr	r1, [pc, #92]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	3301      	adds	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f47f aec4 	bne.w	8000a74 <HAL_GPIO_Init+0x14>
  }
}
 8000cec:	bf00      	nop
 8000cee:	372c      	adds	r7, #44	; 0x2c
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	10210000 	.word	0x10210000
 8000cfc:	10110000 	.word	0x10110000
 8000d00:	10120000 	.word	0x10120000
 8000d04:	10310000 	.word	0x10310000
 8000d08:	10320000 	.word	0x10320000
 8000d0c:	10220000 	.word	0x10220000
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000
 8000d18:	40010800 	.word	0x40010800
 8000d1c:	40010c00 	.word	0x40010c00
 8000d20:	40011000 	.word	0x40011000
 8000d24:	40011400 	.word	0x40011400
 8000d28:	40011800 	.word	0x40011800
 8000d2c:	40011c00 	.word	0x40011c00
 8000d30:	40010400 	.word	0x40010400

08000d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e26c      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 8087 	beq.w	8000e62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d54:	4b92      	ldr	r3, [pc, #584]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d00c      	beq.n	8000d7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d60:	4b8f      	ldr	r3, [pc, #572]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 030c 	and.w	r3, r3, #12
 8000d68:	2b08      	cmp	r3, #8
 8000d6a:	d112      	bne.n	8000d92 <HAL_RCC_OscConfig+0x5e>
 8000d6c:	4b8c      	ldr	r3, [pc, #560]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d78:	d10b      	bne.n	8000d92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7a:	4b89      	ldr	r3, [pc, #548]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d06c      	beq.n	8000e60 <HAL_RCC_OscConfig+0x12c>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d168      	bne.n	8000e60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e246      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d9a:	d106      	bne.n	8000daa <HAL_RCC_OscConfig+0x76>
 8000d9c:	4b80      	ldr	r3, [pc, #512]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a7f      	ldr	r2, [pc, #508]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e02e      	b.n	8000e08 <HAL_RCC_OscConfig+0xd4>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10c      	bne.n	8000dcc <HAL_RCC_OscConfig+0x98>
 8000db2:	4b7b      	ldr	r3, [pc, #492]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a7a      	ldr	r2, [pc, #488]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	4b78      	ldr	r3, [pc, #480]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a77      	ldr	r2, [pc, #476]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e01d      	b.n	8000e08 <HAL_RCC_OscConfig+0xd4>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd4:	d10c      	bne.n	8000df0 <HAL_RCC_OscConfig+0xbc>
 8000dd6:	4b72      	ldr	r3, [pc, #456]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a71      	ldr	r2, [pc, #452]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b6f      	ldr	r3, [pc, #444]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a6e      	ldr	r2, [pc, #440]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e00b      	b.n	8000e08 <HAL_RCC_OscConfig+0xd4>
 8000df0:	4b6b      	ldr	r3, [pc, #428]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a6a      	ldr	r2, [pc, #424]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b68      	ldr	r3, [pc, #416]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a67      	ldr	r2, [pc, #412]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d013      	beq.n	8000e38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e10:	f7ff fd1a 	bl	8000848 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e18:	f7ff fd16 	bl	8000848 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b64      	cmp	r3, #100	; 0x64
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e1fa      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2a:	4b5d      	ldr	r3, [pc, #372]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f0      	beq.n	8000e18 <HAL_RCC_OscConfig+0xe4>
 8000e36:	e014      	b.n	8000e62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e38:	f7ff fd06 	bl	8000848 <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fd02 	bl	8000848 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b64      	cmp	r3, #100	; 0x64
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e1e6      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e52:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f0      	bne.n	8000e40 <HAL_RCC_OscConfig+0x10c>
 8000e5e:	e000      	b.n	8000e62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d063      	beq.n	8000f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e6e:	4b4c      	ldr	r3, [pc, #304]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00b      	beq.n	8000e92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e7a:	4b49      	ldr	r3, [pc, #292]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d11c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x18c>
 8000e86:	4b46      	ldr	r3, [pc, #280]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d116      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e92:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d005      	beq.n	8000eaa <HAL_RCC_OscConfig+0x176>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d001      	beq.n	8000eaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e1ba      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4939      	ldr	r1, [pc, #228]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebe:	e03a      	b.n	8000f36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d020      	beq.n	8000f0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ec8:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff fcbb 	bl	8000848 <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed6:	f7ff fcb7 	bl	8000848 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e19b      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0f0      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	4927      	ldr	r1, [pc, #156]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	600b      	str	r3, [r1, #0]
 8000f08:	e015      	b.n	8000f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <HAL_RCC_OscConfig+0x270>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fc9a 	bl	8000848 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f18:	f7ff fc96 	bl	8000848 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e17a      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d03a      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d019      	beq.n	8000f7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_RCC_OscConfig+0x274>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f50:	f7ff fc7a 	bl	8000848 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f58:	f7ff fc76 	bl	8000848 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e15a      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f0      	beq.n	8000f58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f000 fb2a 	bl	80015d0 <RCC_Delay>
 8000f7c:	e01c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_RCC_OscConfig+0x274>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f84:	f7ff fc60 	bl	8000848 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f8a:	e00f      	b.n	8000fac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fc5c 	bl	8000848 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d908      	bls.n	8000fac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e140      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	42420000 	.word	0x42420000
 8000fa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fac:	4b9e      	ldr	r3, [pc, #632]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1e9      	bne.n	8000f8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80a6 	beq.w	8001112 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fca:	4b97      	ldr	r3, [pc, #604]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b94      	ldr	r3, [pc, #592]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a93      	ldr	r2, [pc, #588]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b91      	ldr	r3, [pc, #580]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff2:	4b8e      	ldr	r3, [pc, #568]	; (800122c <HAL_RCC_OscConfig+0x4f8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d118      	bne.n	8001030 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ffe:	4b8b      	ldr	r3, [pc, #556]	; (800122c <HAL_RCC_OscConfig+0x4f8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a8a      	ldr	r2, [pc, #552]	; (800122c <HAL_RCC_OscConfig+0x4f8>)
 8001004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800100a:	f7ff fc1d 	bl	8000848 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001012:	f7ff fc19 	bl	8000848 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b64      	cmp	r3, #100	; 0x64
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e0fd      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001024:	4b81      	ldr	r3, [pc, #516]	; (800122c <HAL_RCC_OscConfig+0x4f8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d106      	bne.n	8001046 <HAL_RCC_OscConfig+0x312>
 8001038:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	4a7a      	ldr	r2, [pc, #488]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6213      	str	r3, [r2, #32]
 8001044:	e02d      	b.n	80010a2 <HAL_RCC_OscConfig+0x36e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10c      	bne.n	8001068 <HAL_RCC_OscConfig+0x334>
 800104e:	4b76      	ldr	r3, [pc, #472]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	4a75      	ldr	r2, [pc, #468]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	6213      	str	r3, [r2, #32]
 800105a:	4b73      	ldr	r3, [pc, #460]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4a72      	ldr	r2, [pc, #456]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001060:	f023 0304 	bic.w	r3, r3, #4
 8001064:	6213      	str	r3, [r2, #32]
 8001066:	e01c      	b.n	80010a2 <HAL_RCC_OscConfig+0x36e>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2b05      	cmp	r3, #5
 800106e:	d10c      	bne.n	800108a <HAL_RCC_OscConfig+0x356>
 8001070:	4b6d      	ldr	r3, [pc, #436]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4a6c      	ldr	r2, [pc, #432]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6213      	str	r3, [r2, #32]
 800107c:	4b6a      	ldr	r3, [pc, #424]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4a69      	ldr	r2, [pc, #420]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6213      	str	r3, [r2, #32]
 8001088:	e00b      	b.n	80010a2 <HAL_RCC_OscConfig+0x36e>
 800108a:	4b67      	ldr	r3, [pc, #412]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4a66      	ldr	r2, [pc, #408]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	6213      	str	r3, [r2, #32]
 8001096:	4b64      	ldr	r3, [pc, #400]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4a63      	ldr	r2, [pc, #396]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	f023 0304 	bic.w	r3, r3, #4
 80010a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d015      	beq.n	80010d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010aa:	f7ff fbcd 	bl	8000848 <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b0:	e00a      	b.n	80010c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b2:	f7ff fbc9 	bl	8000848 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e0ab      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c8:	4b57      	ldr	r3, [pc, #348]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0ee      	beq.n	80010b2 <HAL_RCC_OscConfig+0x37e>
 80010d4:	e014      	b.n	8001100 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fbb7 	bl	8000848 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010dc:	e00a      	b.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010de:	f7ff fbb3 	bl	8000848 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e095      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f4:	4b4c      	ldr	r3, [pc, #304]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1ee      	bne.n	80010de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d105      	bne.n	8001112 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a47      	ldr	r2, [pc, #284]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 800110c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8081 	beq.w	800121e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800111c:	4b42      	ldr	r3, [pc, #264]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b08      	cmp	r3, #8
 8001126:	d061      	beq.n	80011ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d146      	bne.n	80011be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001130:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <HAL_RCC_OscConfig+0x4fc>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fb87 	bl	8000848 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113e:	f7ff fb83 	bl	8000848 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e067      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001150:	4b35      	ldr	r3, [pc, #212]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f0      	bne.n	800113e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001164:	d108      	bne.n	8001178 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	492d      	ldr	r1, [pc, #180]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a19      	ldr	r1, [r3, #32]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	430b      	orrs	r3, r1
 800118a:	4927      	ldr	r1, [pc, #156]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <HAL_RCC_OscConfig+0x4fc>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fb57 	bl	8000848 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff fb53 	bl	8000848 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e037      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0x46a>
 80011bc:	e02f      	b.n	800121e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <HAL_RCC_OscConfig+0x4fc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fb40 	bl	8000848 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011cc:	f7ff fb3c 	bl	8000848 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e020      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x498>
 80011ea:	e018      	b.n	800121e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e013      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_RCC_OscConfig+0x4f4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	429a      	cmp	r2, r3
 800120a:	d106      	bne.n	800121a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001216:	429a      	cmp	r2, r3
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	40007000 	.word	0x40007000
 8001230:	42420060 	.word	0x42420060

08001234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0d0      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001248:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d910      	bls.n	8001278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001256:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 0207 	bic.w	r2, r3, #7
 800125e:	4965      	ldr	r1, [pc, #404]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0b8      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d020      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001290:	4b59      	ldr	r3, [pc, #356]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a58      	ldr	r2, [pc, #352]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800129a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012a8:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a52      	ldr	r2, [pc, #328]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b4:	4b50      	ldr	r3, [pc, #320]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	494d      	ldr	r1, [pc, #308]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d040      	beq.n	8001354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d107      	bne.n	80012ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d115      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e07f      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e073      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001302:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e06b      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f023 0203 	bic.w	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4936      	ldr	r1, [pc, #216]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001324:	f7ff fa90 	bl	8000848 <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132a:	e00a      	b.n	8001342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132c:	f7ff fa8c 	bl	8000848 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f241 3288 	movw	r2, #5000	; 0x1388
 800133a:	4293      	cmp	r3, r2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e053      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 020c 	and.w	r2, r3, #12
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	429a      	cmp	r2, r3
 8001352:	d1eb      	bne.n	800132c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d210      	bcs.n	8001384 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 0207 	bic.w	r2, r3, #7
 800136a:	4922      	ldr	r1, [pc, #136]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e032      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4916      	ldr	r1, [pc, #88]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	490e      	ldr	r1, [pc, #56]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013c2:	f000 f82d 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 80013c6:	4601      	mov	r1, r0
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_RCC_ClockConfig+0x1c8>)
 80013d4:	5cd3      	ldrb	r3, [r2, r3]
 80013d6:	fa21 f303 	lsr.w	r3, r1, r3
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <HAL_RCC_ClockConfig+0x1cc>)
 80013dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_RCC_ClockConfig+0x1d0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe fffe 	bl	80003e4 <HAL_InitTick>

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40022000 	.word	0x40022000
 80013f8:	40021000 	.word	0x40021000
 80013fc:	080027cc 	.word	0x080027cc
 8001400:	20000000 	.word	0x20000000
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_RCC_EnableCSS+0x14>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	4242004c 	.word	0x4242004c

08001420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001420:	b490      	push	{r4, r7}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001428:	1d3c      	adds	r4, r7, #4
 800142a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001430:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b04      	cmp	r3, #4
 8001458:	d002      	beq.n	8001460 <HAL_RCC_GetSysClockFreq+0x40>
 800145a:	2b08      	cmp	r3, #8
 800145c:	d003      	beq.n	8001466 <HAL_RCC_GetSysClockFreq+0x46>
 800145e:	e02d      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001462:	623b      	str	r3, [r7, #32]
      break;
 8001464:	e02d      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	0c9b      	lsrs	r3, r3, #18
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001472:	4413      	add	r3, r2
 8001474:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001478:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	0c5b      	lsrs	r3, r3, #17
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001492:	4413      	add	r3, r2
 8001494:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001498:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800149e:	fb02 f203 	mul.w	r2, r2, r3
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
 80014aa:	e004      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	623b      	str	r3, [r7, #32]
      break;
 80014ba:	e002      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80014be:	623b      	str	r3, [r7, #32]
      break;
 80014c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c2:	6a3b      	ldr	r3, [r7, #32]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc90      	pop	{r4, r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	080027b8 	.word	0x080027b8
 80014d4:	080027c8 	.word	0x080027c8
 80014d8:	40021000 	.word	0x40021000
 80014dc:	007a1200 	.word	0x007a1200
 80014e0:	003d0900 	.word	0x003d0900

080014e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	20000000 	.word	0x20000000

080014f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014fc:	f7ff fff2 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001500:	4601      	mov	r1, r0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	4a03      	ldr	r2, [pc, #12]	; (800151c <HAL_RCC_GetPCLK1Freq+0x24>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	080027dc 	.word	0x080027dc

08001520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001524:	f7ff ffde 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001528:	4601      	mov	r1, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	0adb      	lsrs	r3, r3, #11
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	080027dc 	.word	0x080027dc

08001548 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	220f      	movs	r2, #15
 8001556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0207 	and.w	r2, r3, #7
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40022000 	.word	0x40022000

080015a8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b4:	2b80      	cmp	r3, #128	; 0x80
 80015b6:	d104      	bne.n	80015c2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80015b8:	f000 f828 	bl	800160c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_RCC_NMI_IRQHandler+0x24>)
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	701a      	strb	r2, [r3, #0]
  }
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	4002100a 	.word	0x4002100a

080015d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <RCC_Delay+0x34>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <RCC_Delay+0x38>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	0a5b      	lsrs	r3, r3, #9
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015ec:	bf00      	nop
  }
  while (Delay --);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	60fa      	str	r2, [r7, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f9      	bne.n	80015ec <RCC_Delay+0x1c>
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000
 8001608:	10624dd3 	.word	0x10624dd3

0800160c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e041      	b.n	80016ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d106      	bne.n	8001644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f839 	bl	80016b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3304      	adds	r3, #4
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f000 f9c2 	bl	80019e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d001      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e044      	b.n	800176a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2202      	movs	r2, #2
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_TIM_Base_Start_IT+0xac>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d018      	beq.n	8001734 <HAL_TIM_Base_Start_IT+0x6c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <HAL_TIM_Base_Start_IT+0xb0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d013      	beq.n	8001734 <HAL_TIM_Base_Start_IT+0x6c>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001714:	d00e      	beq.n	8001734 <HAL_TIM_Base_Start_IT+0x6c>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a18      	ldr	r2, [pc, #96]	; (800177c <HAL_TIM_Base_Start_IT+0xb4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d009      	beq.n	8001734 <HAL_TIM_Base_Start_IT+0x6c>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a16      	ldr	r2, [pc, #88]	; (8001780 <HAL_TIM_Base_Start_IT+0xb8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d004      	beq.n	8001734 <HAL_TIM_Base_Start_IT+0x6c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a15      	ldr	r2, [pc, #84]	; (8001784 <HAL_TIM_Base_Start_IT+0xbc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d111      	bne.n	8001758 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b06      	cmp	r3, #6
 8001744:	d010      	beq.n	8001768 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0201 	orr.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001756:	e007      	b.n	8001768 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40012c00 	.word	0x40012c00
 8001778:	40013400 	.word	0x40013400
 800177c:	40000400 	.word	0x40000400
 8001780:	40000800 	.word	0x40000800
 8001784:	40000c00 	.word	0x40000c00

08001788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b02      	cmp	r3, #2
 800179c:	d122      	bne.n	80017e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d11b      	bne.n	80017e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f06f 0202 	mvn.w	r2, #2
 80017b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f8ed 	bl	80019aa <HAL_TIM_IC_CaptureCallback>
 80017d0:	e005      	b.n	80017de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f8e0 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f8ef 	bl	80019bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d122      	bne.n	8001838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d11b      	bne.n	8001838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f06f 0204 	mvn.w	r2, #4
 8001808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2202      	movs	r2, #2
 800180e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f8c3 	bl	80019aa <HAL_TIM_IC_CaptureCallback>
 8001824:	e005      	b.n	8001832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f8b6 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f8c5 	bl	80019bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b08      	cmp	r3, #8
 8001844:	d122      	bne.n	800188c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b08      	cmp	r3, #8
 8001852:	d11b      	bne.n	800188c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0208 	mvn.w	r2, #8
 800185c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2204      	movs	r2, #4
 8001862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f899 	bl	80019aa <HAL_TIM_IC_CaptureCallback>
 8001878:	e005      	b.n	8001886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f88c 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f89b 	bl	80019bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	2b10      	cmp	r3, #16
 8001898:	d122      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b10      	cmp	r3, #16
 80018a6:	d11b      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0210 	mvn.w	r2, #16
 80018b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2208      	movs	r2, #8
 80018b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f86f 	bl	80019aa <HAL_TIM_IC_CaptureCallback>
 80018cc:	e005      	b.n	80018da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f862 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f871 	bl	80019bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d10e      	bne.n	800190c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d107      	bne.n	800190c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 0201 	mvn.w	r2, #1
 8001904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7fe fd22 	bl	8000350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	2b80      	cmp	r3, #128	; 0x80
 8001918:	d10e      	bne.n	8001938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001924:	2b80      	cmp	r3, #128	; 0x80
 8001926:	d107      	bne.n	8001938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f8d7 	bl	8001ae6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001942:	2b40      	cmp	r3, #64	; 0x40
 8001944:	d10e      	bne.n	8001964 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001950:	2b40      	cmp	r3, #64	; 0x40
 8001952:	d107      	bne.n	8001964 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800195c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f835 	bl	80019ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b20      	cmp	r3, #32
 8001970:	d10e      	bne.n	8001990 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0320 	and.w	r3, r3, #32
 800197c:	2b20      	cmp	r3, #32
 800197e:	d107      	bne.n	8001990 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f06f 0220 	mvn.w	r2, #32
 8001988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f8a2 	bl	8001ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a33      	ldr	r2, [pc, #204]	; (8001ac0 <TIM_Base_SetConfig+0xe0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <TIM_Base_SetConfig+0x40>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <TIM_Base_SetConfig+0xe4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00f      	beq.n	8001a20 <TIM_Base_SetConfig+0x40>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a06:	d00b      	beq.n	8001a20 <TIM_Base_SetConfig+0x40>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a2f      	ldr	r2, [pc, #188]	; (8001ac8 <TIM_Base_SetConfig+0xe8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <TIM_Base_SetConfig+0x40>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a2e      	ldr	r2, [pc, #184]	; (8001acc <TIM_Base_SetConfig+0xec>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d003      	beq.n	8001a20 <TIM_Base_SetConfig+0x40>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a2d      	ldr	r2, [pc, #180]	; (8001ad0 <TIM_Base_SetConfig+0xf0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d108      	bne.n	8001a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <TIM_Base_SetConfig+0xe0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <TIM_Base_SetConfig+0x82>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <TIM_Base_SetConfig+0xe4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00f      	beq.n	8001a62 <TIM_Base_SetConfig+0x82>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a48:	d00b      	beq.n	8001a62 <TIM_Base_SetConfig+0x82>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <TIM_Base_SetConfig+0xe8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d007      	beq.n	8001a62 <TIM_Base_SetConfig+0x82>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <TIM_Base_SetConfig+0xec>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d003      	beq.n	8001a62 <TIM_Base_SetConfig+0x82>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <TIM_Base_SetConfig+0xf0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d108      	bne.n	8001a74 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <TIM_Base_SetConfig+0xe0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d003      	beq.n	8001aa8 <TIM_Base_SetConfig+0xc8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <TIM_Base_SetConfig+0xe4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d103      	bne.n	8001ab0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	615a      	str	r2, [r3, #20]
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40013400 	.word	0x40013400
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	40000800 	.word	0x40000800
 8001ad0:	40000c00 	.word	0x40000c00

08001ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e03f      	b.n	8001b8a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fdbc 	bl	800069c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2224      	movs	r2, #36	; 0x24
 8001b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f905 	bl	8001d4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b08a      	sub	sp, #40	; 0x28
 8001b96:	af02      	add	r7, sp, #8
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d17c      	bne.n	8001cac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <HAL_UART_Transmit+0x2c>
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e075      	b.n	8001cae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_UART_Transmit+0x3e>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e06e      	b.n	8001cae <HAL_UART_Transmit+0x11c>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2221      	movs	r2, #33	; 0x21
 8001be2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001be6:	f7fe fe2f 	bl	8000848 <HAL_GetTick>
 8001bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	88fa      	ldrh	r2, [r7, #6]
 8001bf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	88fa      	ldrh	r2, [r7, #6]
 8001bf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c00:	d108      	bne.n	8001c14 <HAL_UART_Transmit+0x82>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d104      	bne.n	8001c14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	e003      	b.n	8001c1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c24:	e02a      	b.n	8001c7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f840 	bl	8001cb6 <UART_WaitOnFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e036      	b.n	8001cae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10b      	bne.n	8001c5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	3302      	adds	r3, #2
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	e007      	b.n	8001c6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	781a      	ldrb	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1cf      	bne.n	8001c26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2140      	movs	r1, #64	; 0x40
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 f810 	bl	8001cb6 <UART_WaitOnFlagUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e006      	b.n	8001cae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e000      	b.n	8001cae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cac:	2302      	movs	r3, #2
  }
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cc6:	e02c      	b.n	8001d22 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cce:	d028      	beq.n	8001d22 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cd6:	f7fe fdb7 	bl	8000848 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d21d      	bcs.n	8001d22 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cf4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e00f      	b.n	8001d42 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	bf0c      	ite	eq
 8001d32:	2301      	moveq	r3, #1
 8001d34:	2300      	movne	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d0c3      	beq.n	8001cc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d86:	f023 030c 	bic.w	r3, r3, #12
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2c      	ldr	r2, [pc, #176]	; (8001e60 <UART_SetConfig+0x114>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d103      	bne.n	8001dbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001db4:	f7ff fbb4 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	e002      	b.n	8001dc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001dbc:	f7ff fb9c 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001dc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	009a      	lsls	r2, r3, #2
 8001dcc:	441a      	add	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd8:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <UART_SetConfig+0x118>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	0119      	lsls	r1, r3, #4
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	009a      	lsls	r2, r3, #2
 8001dec:	441a      	add	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <UART_SetConfig+0x118>)
 8001dfa:	fba3 0302 	umull	r0, r3, r3, r2
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2064      	movs	r0, #100	; 0x64
 8001e02:	fb00 f303 	mul.w	r3, r0, r3
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	3332      	adds	r3, #50	; 0x32
 8001e0c:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <UART_SetConfig+0x118>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e18:	4419      	add	r1, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	009a      	lsls	r2, r3, #2
 8001e24:	441a      	add	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <UART_SetConfig+0x118>)
 8001e32:	fba3 0302 	umull	r0, r3, r3, r2
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	2064      	movs	r0, #100	; 0x64
 8001e3a:	fb00 f303 	mul.w	r3, r0, r3
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	3332      	adds	r3, #50	; 0x32
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <UART_SetConfig+0x118>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	f003 020f 	and.w	r2, r3, #15
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	440a      	add	r2, r1
 8001e56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40013800 	.word	0x40013800
 8001e64:	51eb851f 	.word	0x51eb851f

08001e68 <__errno>:
 8001e68:	4b01      	ldr	r3, [pc, #4]	; (8001e70 <__errno+0x8>)
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	2000000c 	.word	0x2000000c

08001e74 <__libc_init_array>:
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	2500      	movs	r5, #0
 8001e78:	4e0c      	ldr	r6, [pc, #48]	; (8001eac <__libc_init_array+0x38>)
 8001e7a:	4c0d      	ldr	r4, [pc, #52]	; (8001eb0 <__libc_init_array+0x3c>)
 8001e7c:	1ba4      	subs	r4, r4, r6
 8001e7e:	10a4      	asrs	r4, r4, #2
 8001e80:	42a5      	cmp	r5, r4
 8001e82:	d109      	bne.n	8001e98 <__libc_init_array+0x24>
 8001e84:	f000 fc88 	bl	8002798 <_init>
 8001e88:	2500      	movs	r5, #0
 8001e8a:	4e0a      	ldr	r6, [pc, #40]	; (8001eb4 <__libc_init_array+0x40>)
 8001e8c:	4c0a      	ldr	r4, [pc, #40]	; (8001eb8 <__libc_init_array+0x44>)
 8001e8e:	1ba4      	subs	r4, r4, r6
 8001e90:	10a4      	asrs	r4, r4, #2
 8001e92:	42a5      	cmp	r5, r4
 8001e94:	d105      	bne.n	8001ea2 <__libc_init_array+0x2e>
 8001e96:	bd70      	pop	{r4, r5, r6, pc}
 8001e98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e9c:	4798      	blx	r3
 8001e9e:	3501      	adds	r5, #1
 8001ea0:	e7ee      	b.n	8001e80 <__libc_init_array+0xc>
 8001ea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ea6:	4798      	blx	r3
 8001ea8:	3501      	adds	r5, #1
 8001eaa:	e7f2      	b.n	8001e92 <__libc_init_array+0x1e>
 8001eac:	08002848 	.word	0x08002848
 8001eb0:	08002848 	.word	0x08002848
 8001eb4:	08002848 	.word	0x08002848
 8001eb8:	0800284c 	.word	0x0800284c

08001ebc <memset>:
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4402      	add	r2, r0
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d100      	bne.n	8001ec6 <memset+0xa>
 8001ec4:	4770      	bx	lr
 8001ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eca:	e7f9      	b.n	8001ec0 <memset+0x4>

08001ecc <_puts_r>:
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	460e      	mov	r6, r1
 8001ed0:	4605      	mov	r5, r0
 8001ed2:	b118      	cbz	r0, 8001edc <_puts_r+0x10>
 8001ed4:	6983      	ldr	r3, [r0, #24]
 8001ed6:	b90b      	cbnz	r3, 8001edc <_puts_r+0x10>
 8001ed8:	f000 fa0c 	bl	80022f4 <__sinit>
 8001edc:	69ab      	ldr	r3, [r5, #24]
 8001ede:	68ac      	ldr	r4, [r5, #8]
 8001ee0:	b913      	cbnz	r3, 8001ee8 <_puts_r+0x1c>
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	f000 fa06 	bl	80022f4 <__sinit>
 8001ee8:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <_puts_r+0xac>)
 8001eea:	429c      	cmp	r4, r3
 8001eec:	d117      	bne.n	8001f1e <_puts_r+0x52>
 8001eee:	686c      	ldr	r4, [r5, #4]
 8001ef0:	89a3      	ldrh	r3, [r4, #12]
 8001ef2:	071b      	lsls	r3, r3, #28
 8001ef4:	d51d      	bpl.n	8001f32 <_puts_r+0x66>
 8001ef6:	6923      	ldr	r3, [r4, #16]
 8001ef8:	b1db      	cbz	r3, 8001f32 <_puts_r+0x66>
 8001efa:	3e01      	subs	r6, #1
 8001efc:	68a3      	ldr	r3, [r4, #8]
 8001efe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001f02:	3b01      	subs	r3, #1
 8001f04:	60a3      	str	r3, [r4, #8]
 8001f06:	b9e9      	cbnz	r1, 8001f44 <_puts_r+0x78>
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	da2e      	bge.n	8001f6a <_puts_r+0x9e>
 8001f0c:	4622      	mov	r2, r4
 8001f0e:	210a      	movs	r1, #10
 8001f10:	4628      	mov	r0, r5
 8001f12:	f000 f83f 	bl	8001f94 <__swbuf_r>
 8001f16:	3001      	adds	r0, #1
 8001f18:	d011      	beq.n	8001f3e <_puts_r+0x72>
 8001f1a:	200a      	movs	r0, #10
 8001f1c:	e011      	b.n	8001f42 <_puts_r+0x76>
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <_puts_r+0xb0>)
 8001f20:	429c      	cmp	r4, r3
 8001f22:	d101      	bne.n	8001f28 <_puts_r+0x5c>
 8001f24:	68ac      	ldr	r4, [r5, #8]
 8001f26:	e7e3      	b.n	8001ef0 <_puts_r+0x24>
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <_puts_r+0xb4>)
 8001f2a:	429c      	cmp	r4, r3
 8001f2c:	bf08      	it	eq
 8001f2e:	68ec      	ldreq	r4, [r5, #12]
 8001f30:	e7de      	b.n	8001ef0 <_puts_r+0x24>
 8001f32:	4621      	mov	r1, r4
 8001f34:	4628      	mov	r0, r5
 8001f36:	f000 f87f 	bl	8002038 <__swsetup_r>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d0dd      	beq.n	8001efa <_puts_r+0x2e>
 8001f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da04      	bge.n	8001f52 <_puts_r+0x86>
 8001f48:	69a2      	ldr	r2, [r4, #24]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dc06      	bgt.n	8001f5c <_puts_r+0x90>
 8001f4e:	290a      	cmp	r1, #10
 8001f50:	d004      	beq.n	8001f5c <_puts_r+0x90>
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	6022      	str	r2, [r4, #0]
 8001f58:	7019      	strb	r1, [r3, #0]
 8001f5a:	e7cf      	b.n	8001efc <_puts_r+0x30>
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f000 f818 	bl	8001f94 <__swbuf_r>
 8001f64:	3001      	adds	r0, #1
 8001f66:	d1c9      	bne.n	8001efc <_puts_r+0x30>
 8001f68:	e7e9      	b.n	8001f3e <_puts_r+0x72>
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	6022      	str	r2, [r4, #0]
 8001f72:	7018      	strb	r0, [r3, #0]
 8001f74:	e7e5      	b.n	8001f42 <_puts_r+0x76>
 8001f76:	bf00      	nop
 8001f78:	08002808 	.word	0x08002808
 8001f7c:	08002828 	.word	0x08002828
 8001f80:	080027e8 	.word	0x080027e8

08001f84 <puts>:
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <puts+0xc>)
 8001f86:	4601      	mov	r1, r0
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	f7ff bf9f 	b.w	8001ecc <_puts_r>
 8001f8e:	bf00      	nop
 8001f90:	2000000c 	.word	0x2000000c

08001f94 <__swbuf_r>:
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f96:	460e      	mov	r6, r1
 8001f98:	4614      	mov	r4, r2
 8001f9a:	4605      	mov	r5, r0
 8001f9c:	b118      	cbz	r0, 8001fa6 <__swbuf_r+0x12>
 8001f9e:	6983      	ldr	r3, [r0, #24]
 8001fa0:	b90b      	cbnz	r3, 8001fa6 <__swbuf_r+0x12>
 8001fa2:	f000 f9a7 	bl	80022f4 <__sinit>
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <__swbuf_r+0x98>)
 8001fa8:	429c      	cmp	r4, r3
 8001faa:	d12a      	bne.n	8002002 <__swbuf_r+0x6e>
 8001fac:	686c      	ldr	r4, [r5, #4]
 8001fae:	69a3      	ldr	r3, [r4, #24]
 8001fb0:	60a3      	str	r3, [r4, #8]
 8001fb2:	89a3      	ldrh	r3, [r4, #12]
 8001fb4:	071a      	lsls	r2, r3, #28
 8001fb6:	d52e      	bpl.n	8002016 <__swbuf_r+0x82>
 8001fb8:	6923      	ldr	r3, [r4, #16]
 8001fba:	b363      	cbz	r3, 8002016 <__swbuf_r+0x82>
 8001fbc:	6923      	ldr	r3, [r4, #16]
 8001fbe:	6820      	ldr	r0, [r4, #0]
 8001fc0:	b2f6      	uxtb	r6, r6
 8001fc2:	1ac0      	subs	r0, r0, r3
 8001fc4:	6963      	ldr	r3, [r4, #20]
 8001fc6:	4637      	mov	r7, r6
 8001fc8:	4283      	cmp	r3, r0
 8001fca:	dc04      	bgt.n	8001fd6 <__swbuf_r+0x42>
 8001fcc:	4621      	mov	r1, r4
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f000 f926 	bl	8002220 <_fflush_r>
 8001fd4:	bb28      	cbnz	r0, 8002022 <__swbuf_r+0x8e>
 8001fd6:	68a3      	ldr	r3, [r4, #8]
 8001fd8:	3001      	adds	r0, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	60a3      	str	r3, [r4, #8]
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	6022      	str	r2, [r4, #0]
 8001fe4:	701e      	strb	r6, [r3, #0]
 8001fe6:	6963      	ldr	r3, [r4, #20]
 8001fe8:	4283      	cmp	r3, r0
 8001fea:	d004      	beq.n	8001ff6 <__swbuf_r+0x62>
 8001fec:	89a3      	ldrh	r3, [r4, #12]
 8001fee:	07db      	lsls	r3, r3, #31
 8001ff0:	d519      	bpl.n	8002026 <__swbuf_r+0x92>
 8001ff2:	2e0a      	cmp	r6, #10
 8001ff4:	d117      	bne.n	8002026 <__swbuf_r+0x92>
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	f000 f911 	bl	8002220 <_fflush_r>
 8001ffe:	b190      	cbz	r0, 8002026 <__swbuf_r+0x92>
 8002000:	e00f      	b.n	8002022 <__swbuf_r+0x8e>
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <__swbuf_r+0x9c>)
 8002004:	429c      	cmp	r4, r3
 8002006:	d101      	bne.n	800200c <__swbuf_r+0x78>
 8002008:	68ac      	ldr	r4, [r5, #8]
 800200a:	e7d0      	b.n	8001fae <__swbuf_r+0x1a>
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <__swbuf_r+0xa0>)
 800200e:	429c      	cmp	r4, r3
 8002010:	bf08      	it	eq
 8002012:	68ec      	ldreq	r4, [r5, #12]
 8002014:	e7cb      	b.n	8001fae <__swbuf_r+0x1a>
 8002016:	4621      	mov	r1, r4
 8002018:	4628      	mov	r0, r5
 800201a:	f000 f80d 	bl	8002038 <__swsetup_r>
 800201e:	2800      	cmp	r0, #0
 8002020:	d0cc      	beq.n	8001fbc <__swbuf_r+0x28>
 8002022:	f04f 37ff 	mov.w	r7, #4294967295
 8002026:	4638      	mov	r0, r7
 8002028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800202a:	bf00      	nop
 800202c:	08002808 	.word	0x08002808
 8002030:	08002828 	.word	0x08002828
 8002034:	080027e8 	.word	0x080027e8

08002038 <__swsetup_r>:
 8002038:	4b32      	ldr	r3, [pc, #200]	; (8002104 <__swsetup_r+0xcc>)
 800203a:	b570      	push	{r4, r5, r6, lr}
 800203c:	681d      	ldr	r5, [r3, #0]
 800203e:	4606      	mov	r6, r0
 8002040:	460c      	mov	r4, r1
 8002042:	b125      	cbz	r5, 800204e <__swsetup_r+0x16>
 8002044:	69ab      	ldr	r3, [r5, #24]
 8002046:	b913      	cbnz	r3, 800204e <__swsetup_r+0x16>
 8002048:	4628      	mov	r0, r5
 800204a:	f000 f953 	bl	80022f4 <__sinit>
 800204e:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <__swsetup_r+0xd0>)
 8002050:	429c      	cmp	r4, r3
 8002052:	d10f      	bne.n	8002074 <__swsetup_r+0x3c>
 8002054:	686c      	ldr	r4, [r5, #4]
 8002056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800205a:	b29a      	uxth	r2, r3
 800205c:	0715      	lsls	r5, r2, #28
 800205e:	d42c      	bmi.n	80020ba <__swsetup_r+0x82>
 8002060:	06d0      	lsls	r0, r2, #27
 8002062:	d411      	bmi.n	8002088 <__swsetup_r+0x50>
 8002064:	2209      	movs	r2, #9
 8002066:	6032      	str	r2, [r6, #0]
 8002068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800206c:	81a3      	strh	r3, [r4, #12]
 800206e:	f04f 30ff 	mov.w	r0, #4294967295
 8002072:	e03e      	b.n	80020f2 <__swsetup_r+0xba>
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <__swsetup_r+0xd4>)
 8002076:	429c      	cmp	r4, r3
 8002078:	d101      	bne.n	800207e <__swsetup_r+0x46>
 800207a:	68ac      	ldr	r4, [r5, #8]
 800207c:	e7eb      	b.n	8002056 <__swsetup_r+0x1e>
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <__swsetup_r+0xd8>)
 8002080:	429c      	cmp	r4, r3
 8002082:	bf08      	it	eq
 8002084:	68ec      	ldreq	r4, [r5, #12]
 8002086:	e7e6      	b.n	8002056 <__swsetup_r+0x1e>
 8002088:	0751      	lsls	r1, r2, #29
 800208a:	d512      	bpl.n	80020b2 <__swsetup_r+0x7a>
 800208c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800208e:	b141      	cbz	r1, 80020a2 <__swsetup_r+0x6a>
 8002090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002094:	4299      	cmp	r1, r3
 8002096:	d002      	beq.n	800209e <__swsetup_r+0x66>
 8002098:	4630      	mov	r0, r6
 800209a:	f000 fa19 	bl	80024d0 <_free_r>
 800209e:	2300      	movs	r3, #0
 80020a0:	6363      	str	r3, [r4, #52]	; 0x34
 80020a2:	89a3      	ldrh	r3, [r4, #12]
 80020a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020a8:	81a3      	strh	r3, [r4, #12]
 80020aa:	2300      	movs	r3, #0
 80020ac:	6063      	str	r3, [r4, #4]
 80020ae:	6923      	ldr	r3, [r4, #16]
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	81a3      	strh	r3, [r4, #12]
 80020ba:	6923      	ldr	r3, [r4, #16]
 80020bc:	b94b      	cbnz	r3, 80020d2 <__swsetup_r+0x9a>
 80020be:	89a3      	ldrh	r3, [r4, #12]
 80020c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c8:	d003      	beq.n	80020d2 <__swsetup_r+0x9a>
 80020ca:	4621      	mov	r1, r4
 80020cc:	4630      	mov	r0, r6
 80020ce:	f000 f9bf 	bl	8002450 <__smakebuf_r>
 80020d2:	89a2      	ldrh	r2, [r4, #12]
 80020d4:	f012 0301 	ands.w	r3, r2, #1
 80020d8:	d00c      	beq.n	80020f4 <__swsetup_r+0xbc>
 80020da:	2300      	movs	r3, #0
 80020dc:	60a3      	str	r3, [r4, #8]
 80020de:	6963      	ldr	r3, [r4, #20]
 80020e0:	425b      	negs	r3, r3
 80020e2:	61a3      	str	r3, [r4, #24]
 80020e4:	6923      	ldr	r3, [r4, #16]
 80020e6:	b953      	cbnz	r3, 80020fe <__swsetup_r+0xc6>
 80020e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80020f0:	d1ba      	bne.n	8002068 <__swsetup_r+0x30>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	0792      	lsls	r2, r2, #30
 80020f6:	bf58      	it	pl
 80020f8:	6963      	ldrpl	r3, [r4, #20]
 80020fa:	60a3      	str	r3, [r4, #8]
 80020fc:	e7f2      	b.n	80020e4 <__swsetup_r+0xac>
 80020fe:	2000      	movs	r0, #0
 8002100:	e7f7      	b.n	80020f2 <__swsetup_r+0xba>
 8002102:	bf00      	nop
 8002104:	2000000c 	.word	0x2000000c
 8002108:	08002808 	.word	0x08002808
 800210c:	08002828 	.word	0x08002828
 8002110:	080027e8 	.word	0x080027e8

08002114 <__sflush_r>:
 8002114:	898a      	ldrh	r2, [r1, #12]
 8002116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800211a:	4605      	mov	r5, r0
 800211c:	0710      	lsls	r0, r2, #28
 800211e:	460c      	mov	r4, r1
 8002120:	d458      	bmi.n	80021d4 <__sflush_r+0xc0>
 8002122:	684b      	ldr	r3, [r1, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	dc05      	bgt.n	8002134 <__sflush_r+0x20>
 8002128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	dc02      	bgt.n	8002134 <__sflush_r+0x20>
 800212e:	2000      	movs	r0, #0
 8002130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002136:	2e00      	cmp	r6, #0
 8002138:	d0f9      	beq.n	800212e <__sflush_r+0x1a>
 800213a:	2300      	movs	r3, #0
 800213c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002140:	682f      	ldr	r7, [r5, #0]
 8002142:	6a21      	ldr	r1, [r4, #32]
 8002144:	602b      	str	r3, [r5, #0]
 8002146:	d032      	beq.n	80021ae <__sflush_r+0x9a>
 8002148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800214a:	89a3      	ldrh	r3, [r4, #12]
 800214c:	075a      	lsls	r2, r3, #29
 800214e:	d505      	bpl.n	800215c <__sflush_r+0x48>
 8002150:	6863      	ldr	r3, [r4, #4]
 8002152:	1ac0      	subs	r0, r0, r3
 8002154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002156:	b10b      	cbz	r3, 800215c <__sflush_r+0x48>
 8002158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800215a:	1ac0      	subs	r0, r0, r3
 800215c:	2300      	movs	r3, #0
 800215e:	4602      	mov	r2, r0
 8002160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002162:	6a21      	ldr	r1, [r4, #32]
 8002164:	4628      	mov	r0, r5
 8002166:	47b0      	blx	r6
 8002168:	1c43      	adds	r3, r0, #1
 800216a:	89a3      	ldrh	r3, [r4, #12]
 800216c:	d106      	bne.n	800217c <__sflush_r+0x68>
 800216e:	6829      	ldr	r1, [r5, #0]
 8002170:	291d      	cmp	r1, #29
 8002172:	d848      	bhi.n	8002206 <__sflush_r+0xf2>
 8002174:	4a29      	ldr	r2, [pc, #164]	; (800221c <__sflush_r+0x108>)
 8002176:	40ca      	lsrs	r2, r1
 8002178:	07d6      	lsls	r6, r2, #31
 800217a:	d544      	bpl.n	8002206 <__sflush_r+0xf2>
 800217c:	2200      	movs	r2, #0
 800217e:	6062      	str	r2, [r4, #4]
 8002180:	6922      	ldr	r2, [r4, #16]
 8002182:	04d9      	lsls	r1, r3, #19
 8002184:	6022      	str	r2, [r4, #0]
 8002186:	d504      	bpl.n	8002192 <__sflush_r+0x7e>
 8002188:	1c42      	adds	r2, r0, #1
 800218a:	d101      	bne.n	8002190 <__sflush_r+0x7c>
 800218c:	682b      	ldr	r3, [r5, #0]
 800218e:	b903      	cbnz	r3, 8002192 <__sflush_r+0x7e>
 8002190:	6560      	str	r0, [r4, #84]	; 0x54
 8002192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002194:	602f      	str	r7, [r5, #0]
 8002196:	2900      	cmp	r1, #0
 8002198:	d0c9      	beq.n	800212e <__sflush_r+0x1a>
 800219a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800219e:	4299      	cmp	r1, r3
 80021a0:	d002      	beq.n	80021a8 <__sflush_r+0x94>
 80021a2:	4628      	mov	r0, r5
 80021a4:	f000 f994 	bl	80024d0 <_free_r>
 80021a8:	2000      	movs	r0, #0
 80021aa:	6360      	str	r0, [r4, #52]	; 0x34
 80021ac:	e7c0      	b.n	8002130 <__sflush_r+0x1c>
 80021ae:	2301      	movs	r3, #1
 80021b0:	4628      	mov	r0, r5
 80021b2:	47b0      	blx	r6
 80021b4:	1c41      	adds	r1, r0, #1
 80021b6:	d1c8      	bne.n	800214a <__sflush_r+0x36>
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0c5      	beq.n	800214a <__sflush_r+0x36>
 80021be:	2b1d      	cmp	r3, #29
 80021c0:	d001      	beq.n	80021c6 <__sflush_r+0xb2>
 80021c2:	2b16      	cmp	r3, #22
 80021c4:	d101      	bne.n	80021ca <__sflush_r+0xb6>
 80021c6:	602f      	str	r7, [r5, #0]
 80021c8:	e7b1      	b.n	800212e <__sflush_r+0x1a>
 80021ca:	89a3      	ldrh	r3, [r4, #12]
 80021cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d0:	81a3      	strh	r3, [r4, #12]
 80021d2:	e7ad      	b.n	8002130 <__sflush_r+0x1c>
 80021d4:	690f      	ldr	r7, [r1, #16]
 80021d6:	2f00      	cmp	r7, #0
 80021d8:	d0a9      	beq.n	800212e <__sflush_r+0x1a>
 80021da:	0793      	lsls	r3, r2, #30
 80021dc:	bf18      	it	ne
 80021de:	2300      	movne	r3, #0
 80021e0:	680e      	ldr	r6, [r1, #0]
 80021e2:	bf08      	it	eq
 80021e4:	694b      	ldreq	r3, [r1, #20]
 80021e6:	eba6 0807 	sub.w	r8, r6, r7
 80021ea:	600f      	str	r7, [r1, #0]
 80021ec:	608b      	str	r3, [r1, #8]
 80021ee:	f1b8 0f00 	cmp.w	r8, #0
 80021f2:	dd9c      	ble.n	800212e <__sflush_r+0x1a>
 80021f4:	4643      	mov	r3, r8
 80021f6:	463a      	mov	r2, r7
 80021f8:	6a21      	ldr	r1, [r4, #32]
 80021fa:	4628      	mov	r0, r5
 80021fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80021fe:	47b0      	blx	r6
 8002200:	2800      	cmp	r0, #0
 8002202:	dc06      	bgt.n	8002212 <__sflush_r+0xfe>
 8002204:	89a3      	ldrh	r3, [r4, #12]
 8002206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800220a:	81a3      	strh	r3, [r4, #12]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	e78e      	b.n	8002130 <__sflush_r+0x1c>
 8002212:	4407      	add	r7, r0
 8002214:	eba8 0800 	sub.w	r8, r8, r0
 8002218:	e7e9      	b.n	80021ee <__sflush_r+0xda>
 800221a:	bf00      	nop
 800221c:	20400001 	.word	0x20400001

08002220 <_fflush_r>:
 8002220:	b538      	push	{r3, r4, r5, lr}
 8002222:	690b      	ldr	r3, [r1, #16]
 8002224:	4605      	mov	r5, r0
 8002226:	460c      	mov	r4, r1
 8002228:	b1db      	cbz	r3, 8002262 <_fflush_r+0x42>
 800222a:	b118      	cbz	r0, 8002234 <_fflush_r+0x14>
 800222c:	6983      	ldr	r3, [r0, #24]
 800222e:	b90b      	cbnz	r3, 8002234 <_fflush_r+0x14>
 8002230:	f000 f860 	bl	80022f4 <__sinit>
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <_fflush_r+0x48>)
 8002236:	429c      	cmp	r4, r3
 8002238:	d109      	bne.n	800224e <_fflush_r+0x2e>
 800223a:	686c      	ldr	r4, [r5, #4]
 800223c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002240:	b17b      	cbz	r3, 8002262 <_fflush_r+0x42>
 8002242:	4621      	mov	r1, r4
 8002244:	4628      	mov	r0, r5
 8002246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800224a:	f7ff bf63 	b.w	8002114 <__sflush_r>
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_fflush_r+0x4c>)
 8002250:	429c      	cmp	r4, r3
 8002252:	d101      	bne.n	8002258 <_fflush_r+0x38>
 8002254:	68ac      	ldr	r4, [r5, #8]
 8002256:	e7f1      	b.n	800223c <_fflush_r+0x1c>
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <_fflush_r+0x50>)
 800225a:	429c      	cmp	r4, r3
 800225c:	bf08      	it	eq
 800225e:	68ec      	ldreq	r4, [r5, #12]
 8002260:	e7ec      	b.n	800223c <_fflush_r+0x1c>
 8002262:	2000      	movs	r0, #0
 8002264:	bd38      	pop	{r3, r4, r5, pc}
 8002266:	bf00      	nop
 8002268:	08002808 	.word	0x08002808
 800226c:	08002828 	.word	0x08002828
 8002270:	080027e8 	.word	0x080027e8

08002274 <std>:
 8002274:	2300      	movs	r3, #0
 8002276:	b510      	push	{r4, lr}
 8002278:	4604      	mov	r4, r0
 800227a:	e9c0 3300 	strd	r3, r3, [r0]
 800227e:	6083      	str	r3, [r0, #8]
 8002280:	8181      	strh	r1, [r0, #12]
 8002282:	6643      	str	r3, [r0, #100]	; 0x64
 8002284:	81c2      	strh	r2, [r0, #14]
 8002286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800228a:	6183      	str	r3, [r0, #24]
 800228c:	4619      	mov	r1, r3
 800228e:	2208      	movs	r2, #8
 8002290:	305c      	adds	r0, #92	; 0x5c
 8002292:	f7ff fe13 	bl	8001ebc <memset>
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <std+0x38>)
 8002298:	6224      	str	r4, [r4, #32]
 800229a:	6263      	str	r3, [r4, #36]	; 0x24
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <std+0x3c>)
 800229e:	62a3      	str	r3, [r4, #40]	; 0x28
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <std+0x40>)
 80022a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <std+0x44>)
 80022a6:	6323      	str	r3, [r4, #48]	; 0x30
 80022a8:	bd10      	pop	{r4, pc}
 80022aa:	bf00      	nop
 80022ac:	0800263d 	.word	0x0800263d
 80022b0:	0800265f 	.word	0x0800265f
 80022b4:	08002697 	.word	0x08002697
 80022b8:	080026bb 	.word	0x080026bb

080022bc <_cleanup_r>:
 80022bc:	4901      	ldr	r1, [pc, #4]	; (80022c4 <_cleanup_r+0x8>)
 80022be:	f000 b885 	b.w	80023cc <_fwalk_reent>
 80022c2:	bf00      	nop
 80022c4:	08002221 	.word	0x08002221

080022c8 <__sfmoreglue>:
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	2568      	movs	r5, #104	; 0x68
 80022cc:	1e4a      	subs	r2, r1, #1
 80022ce:	4355      	muls	r5, r2
 80022d0:	460e      	mov	r6, r1
 80022d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80022d6:	f000 f947 	bl	8002568 <_malloc_r>
 80022da:	4604      	mov	r4, r0
 80022dc:	b140      	cbz	r0, 80022f0 <__sfmoreglue+0x28>
 80022de:	2100      	movs	r1, #0
 80022e0:	e9c0 1600 	strd	r1, r6, [r0]
 80022e4:	300c      	adds	r0, #12
 80022e6:	60a0      	str	r0, [r4, #8]
 80022e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022ec:	f7ff fde6 	bl	8001ebc <memset>
 80022f0:	4620      	mov	r0, r4
 80022f2:	bd70      	pop	{r4, r5, r6, pc}

080022f4 <__sinit>:
 80022f4:	6983      	ldr	r3, [r0, #24]
 80022f6:	b510      	push	{r4, lr}
 80022f8:	4604      	mov	r4, r0
 80022fa:	bb33      	cbnz	r3, 800234a <__sinit+0x56>
 80022fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002300:	6503      	str	r3, [r0, #80]	; 0x50
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <__sinit+0x58>)
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <__sinit+0x5c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6282      	str	r2, [r0, #40]	; 0x28
 800230a:	4298      	cmp	r0, r3
 800230c:	bf04      	itt	eq
 800230e:	2301      	moveq	r3, #1
 8002310:	6183      	streq	r3, [r0, #24]
 8002312:	f000 f81f 	bl	8002354 <__sfp>
 8002316:	6060      	str	r0, [r4, #4]
 8002318:	4620      	mov	r0, r4
 800231a:	f000 f81b 	bl	8002354 <__sfp>
 800231e:	60a0      	str	r0, [r4, #8]
 8002320:	4620      	mov	r0, r4
 8002322:	f000 f817 	bl	8002354 <__sfp>
 8002326:	2200      	movs	r2, #0
 8002328:	60e0      	str	r0, [r4, #12]
 800232a:	2104      	movs	r1, #4
 800232c:	6860      	ldr	r0, [r4, #4]
 800232e:	f7ff ffa1 	bl	8002274 <std>
 8002332:	2201      	movs	r2, #1
 8002334:	2109      	movs	r1, #9
 8002336:	68a0      	ldr	r0, [r4, #8]
 8002338:	f7ff ff9c 	bl	8002274 <std>
 800233c:	2202      	movs	r2, #2
 800233e:	2112      	movs	r1, #18
 8002340:	68e0      	ldr	r0, [r4, #12]
 8002342:	f7ff ff97 	bl	8002274 <std>
 8002346:	2301      	movs	r3, #1
 8002348:	61a3      	str	r3, [r4, #24]
 800234a:	bd10      	pop	{r4, pc}
 800234c:	080027e4 	.word	0x080027e4
 8002350:	080022bd 	.word	0x080022bd

08002354 <__sfp>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <__sfp+0x70>)
 8002358:	4607      	mov	r7, r0
 800235a:	681e      	ldr	r6, [r3, #0]
 800235c:	69b3      	ldr	r3, [r6, #24]
 800235e:	b913      	cbnz	r3, 8002366 <__sfp+0x12>
 8002360:	4630      	mov	r0, r6
 8002362:	f7ff ffc7 	bl	80022f4 <__sinit>
 8002366:	3648      	adds	r6, #72	; 0x48
 8002368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800236c:	3b01      	subs	r3, #1
 800236e:	d503      	bpl.n	8002378 <__sfp+0x24>
 8002370:	6833      	ldr	r3, [r6, #0]
 8002372:	b133      	cbz	r3, 8002382 <__sfp+0x2e>
 8002374:	6836      	ldr	r6, [r6, #0]
 8002376:	e7f7      	b.n	8002368 <__sfp+0x14>
 8002378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800237c:	b16d      	cbz	r5, 800239a <__sfp+0x46>
 800237e:	3468      	adds	r4, #104	; 0x68
 8002380:	e7f4      	b.n	800236c <__sfp+0x18>
 8002382:	2104      	movs	r1, #4
 8002384:	4638      	mov	r0, r7
 8002386:	f7ff ff9f 	bl	80022c8 <__sfmoreglue>
 800238a:	6030      	str	r0, [r6, #0]
 800238c:	2800      	cmp	r0, #0
 800238e:	d1f1      	bne.n	8002374 <__sfp+0x20>
 8002390:	230c      	movs	r3, #12
 8002392:	4604      	mov	r4, r0
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	4620      	mov	r0, r4
 8002398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <__sfp+0x74>)
 800239c:	6665      	str	r5, [r4, #100]	; 0x64
 800239e:	e9c4 5500 	strd	r5, r5, [r4]
 80023a2:	60a5      	str	r5, [r4, #8]
 80023a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80023a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80023ac:	2208      	movs	r2, #8
 80023ae:	4629      	mov	r1, r5
 80023b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80023b4:	f7ff fd82 	bl	8001ebc <memset>
 80023b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80023bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80023c0:	e7e9      	b.n	8002396 <__sfp+0x42>
 80023c2:	bf00      	nop
 80023c4:	080027e4 	.word	0x080027e4
 80023c8:	ffff0001 	.word	0xffff0001

080023cc <_fwalk_reent>:
 80023cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023d0:	4680      	mov	r8, r0
 80023d2:	4689      	mov	r9, r1
 80023d4:	2600      	movs	r6, #0
 80023d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80023da:	b914      	cbnz	r4, 80023e2 <_fwalk_reent+0x16>
 80023dc:	4630      	mov	r0, r6
 80023de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80023e6:	3f01      	subs	r7, #1
 80023e8:	d501      	bpl.n	80023ee <_fwalk_reent+0x22>
 80023ea:	6824      	ldr	r4, [r4, #0]
 80023ec:	e7f5      	b.n	80023da <_fwalk_reent+0xe>
 80023ee:	89ab      	ldrh	r3, [r5, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d907      	bls.n	8002404 <_fwalk_reent+0x38>
 80023f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023f8:	3301      	adds	r3, #1
 80023fa:	d003      	beq.n	8002404 <_fwalk_reent+0x38>
 80023fc:	4629      	mov	r1, r5
 80023fe:	4640      	mov	r0, r8
 8002400:	47c8      	blx	r9
 8002402:	4306      	orrs	r6, r0
 8002404:	3568      	adds	r5, #104	; 0x68
 8002406:	e7ee      	b.n	80023e6 <_fwalk_reent+0x1a>

08002408 <__swhatbuf_r>:
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	460e      	mov	r6, r1
 800240c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002410:	b096      	sub	sp, #88	; 0x58
 8002412:	2900      	cmp	r1, #0
 8002414:	4614      	mov	r4, r2
 8002416:	461d      	mov	r5, r3
 8002418:	da07      	bge.n	800242a <__swhatbuf_r+0x22>
 800241a:	2300      	movs	r3, #0
 800241c:	602b      	str	r3, [r5, #0]
 800241e:	89b3      	ldrh	r3, [r6, #12]
 8002420:	061a      	lsls	r2, r3, #24
 8002422:	d410      	bmi.n	8002446 <__swhatbuf_r+0x3e>
 8002424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002428:	e00e      	b.n	8002448 <__swhatbuf_r+0x40>
 800242a:	466a      	mov	r2, sp
 800242c:	f000 f96c 	bl	8002708 <_fstat_r>
 8002430:	2800      	cmp	r0, #0
 8002432:	dbf2      	blt.n	800241a <__swhatbuf_r+0x12>
 8002434:	9a01      	ldr	r2, [sp, #4]
 8002436:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800243a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800243e:	425a      	negs	r2, r3
 8002440:	415a      	adcs	r2, r3
 8002442:	602a      	str	r2, [r5, #0]
 8002444:	e7ee      	b.n	8002424 <__swhatbuf_r+0x1c>
 8002446:	2340      	movs	r3, #64	; 0x40
 8002448:	2000      	movs	r0, #0
 800244a:	6023      	str	r3, [r4, #0]
 800244c:	b016      	add	sp, #88	; 0x58
 800244e:	bd70      	pop	{r4, r5, r6, pc}

08002450 <__smakebuf_r>:
 8002450:	898b      	ldrh	r3, [r1, #12]
 8002452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002454:	079d      	lsls	r5, r3, #30
 8002456:	4606      	mov	r6, r0
 8002458:	460c      	mov	r4, r1
 800245a:	d507      	bpl.n	800246c <__smakebuf_r+0x1c>
 800245c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	6123      	str	r3, [r4, #16]
 8002464:	2301      	movs	r3, #1
 8002466:	6163      	str	r3, [r4, #20]
 8002468:	b002      	add	sp, #8
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	ab01      	add	r3, sp, #4
 800246e:	466a      	mov	r2, sp
 8002470:	f7ff ffca 	bl	8002408 <__swhatbuf_r>
 8002474:	9900      	ldr	r1, [sp, #0]
 8002476:	4605      	mov	r5, r0
 8002478:	4630      	mov	r0, r6
 800247a:	f000 f875 	bl	8002568 <_malloc_r>
 800247e:	b948      	cbnz	r0, 8002494 <__smakebuf_r+0x44>
 8002480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002484:	059a      	lsls	r2, r3, #22
 8002486:	d4ef      	bmi.n	8002468 <__smakebuf_r+0x18>
 8002488:	f023 0303 	bic.w	r3, r3, #3
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	81a3      	strh	r3, [r4, #12]
 8002492:	e7e3      	b.n	800245c <__smakebuf_r+0xc>
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <__smakebuf_r+0x7c>)
 8002496:	62b3      	str	r3, [r6, #40]	; 0x28
 8002498:	89a3      	ldrh	r3, [r4, #12]
 800249a:	6020      	str	r0, [r4, #0]
 800249c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a0:	81a3      	strh	r3, [r4, #12]
 80024a2:	9b00      	ldr	r3, [sp, #0]
 80024a4:	6120      	str	r0, [r4, #16]
 80024a6:	6163      	str	r3, [r4, #20]
 80024a8:	9b01      	ldr	r3, [sp, #4]
 80024aa:	b15b      	cbz	r3, 80024c4 <__smakebuf_r+0x74>
 80024ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024b0:	4630      	mov	r0, r6
 80024b2:	f000 f93b 	bl	800272c <_isatty_r>
 80024b6:	b128      	cbz	r0, 80024c4 <__smakebuf_r+0x74>
 80024b8:	89a3      	ldrh	r3, [r4, #12]
 80024ba:	f023 0303 	bic.w	r3, r3, #3
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	81a3      	strh	r3, [r4, #12]
 80024c4:	89a3      	ldrh	r3, [r4, #12]
 80024c6:	431d      	orrs	r5, r3
 80024c8:	81a5      	strh	r5, [r4, #12]
 80024ca:	e7cd      	b.n	8002468 <__smakebuf_r+0x18>
 80024cc:	080022bd 	.word	0x080022bd

080024d0 <_free_r>:
 80024d0:	b538      	push	{r3, r4, r5, lr}
 80024d2:	4605      	mov	r5, r0
 80024d4:	2900      	cmp	r1, #0
 80024d6:	d043      	beq.n	8002560 <_free_r+0x90>
 80024d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024dc:	1f0c      	subs	r4, r1, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bfb8      	it	lt
 80024e2:	18e4      	addlt	r4, r4, r3
 80024e4:	f000 f944 	bl	8002770 <__malloc_lock>
 80024e8:	4a1e      	ldr	r2, [pc, #120]	; (8002564 <_free_r+0x94>)
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	4610      	mov	r0, r2
 80024ee:	b933      	cbnz	r3, 80024fe <_free_r+0x2e>
 80024f0:	6063      	str	r3, [r4, #4]
 80024f2:	6014      	str	r4, [r2, #0]
 80024f4:	4628      	mov	r0, r5
 80024f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024fa:	f000 b93a 	b.w	8002772 <__malloc_unlock>
 80024fe:	42a3      	cmp	r3, r4
 8002500:	d90b      	bls.n	800251a <_free_r+0x4a>
 8002502:	6821      	ldr	r1, [r4, #0]
 8002504:	1862      	adds	r2, r4, r1
 8002506:	4293      	cmp	r3, r2
 8002508:	bf01      	itttt	eq
 800250a:	681a      	ldreq	r2, [r3, #0]
 800250c:	685b      	ldreq	r3, [r3, #4]
 800250e:	1852      	addeq	r2, r2, r1
 8002510:	6022      	streq	r2, [r4, #0]
 8002512:	6063      	str	r3, [r4, #4]
 8002514:	6004      	str	r4, [r0, #0]
 8002516:	e7ed      	b.n	80024f4 <_free_r+0x24>
 8002518:	4613      	mov	r3, r2
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	b10a      	cbz	r2, 8002522 <_free_r+0x52>
 800251e:	42a2      	cmp	r2, r4
 8002520:	d9fa      	bls.n	8002518 <_free_r+0x48>
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	1858      	adds	r0, r3, r1
 8002526:	42a0      	cmp	r0, r4
 8002528:	d10b      	bne.n	8002542 <_free_r+0x72>
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	4401      	add	r1, r0
 800252e:	1858      	adds	r0, r3, r1
 8002530:	4282      	cmp	r2, r0
 8002532:	6019      	str	r1, [r3, #0]
 8002534:	d1de      	bne.n	80024f4 <_free_r+0x24>
 8002536:	6810      	ldr	r0, [r2, #0]
 8002538:	6852      	ldr	r2, [r2, #4]
 800253a:	4401      	add	r1, r0
 800253c:	6019      	str	r1, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	e7d8      	b.n	80024f4 <_free_r+0x24>
 8002542:	d902      	bls.n	800254a <_free_r+0x7a>
 8002544:	230c      	movs	r3, #12
 8002546:	602b      	str	r3, [r5, #0]
 8002548:	e7d4      	b.n	80024f4 <_free_r+0x24>
 800254a:	6820      	ldr	r0, [r4, #0]
 800254c:	1821      	adds	r1, r4, r0
 800254e:	428a      	cmp	r2, r1
 8002550:	bf01      	itttt	eq
 8002552:	6811      	ldreq	r1, [r2, #0]
 8002554:	6852      	ldreq	r2, [r2, #4]
 8002556:	1809      	addeq	r1, r1, r0
 8002558:	6021      	streq	r1, [r4, #0]
 800255a:	6062      	str	r2, [r4, #4]
 800255c:	605c      	str	r4, [r3, #4]
 800255e:	e7c9      	b.n	80024f4 <_free_r+0x24>
 8002560:	bd38      	pop	{r3, r4, r5, pc}
 8002562:	bf00      	nop
 8002564:	20000090 	.word	0x20000090

08002568 <_malloc_r>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	1ccd      	adds	r5, r1, #3
 800256c:	f025 0503 	bic.w	r5, r5, #3
 8002570:	3508      	adds	r5, #8
 8002572:	2d0c      	cmp	r5, #12
 8002574:	bf38      	it	cc
 8002576:	250c      	movcc	r5, #12
 8002578:	2d00      	cmp	r5, #0
 800257a:	4606      	mov	r6, r0
 800257c:	db01      	blt.n	8002582 <_malloc_r+0x1a>
 800257e:	42a9      	cmp	r1, r5
 8002580:	d903      	bls.n	800258a <_malloc_r+0x22>
 8002582:	230c      	movs	r3, #12
 8002584:	6033      	str	r3, [r6, #0]
 8002586:	2000      	movs	r0, #0
 8002588:	bd70      	pop	{r4, r5, r6, pc}
 800258a:	f000 f8f1 	bl	8002770 <__malloc_lock>
 800258e:	4a21      	ldr	r2, [pc, #132]	; (8002614 <_malloc_r+0xac>)
 8002590:	6814      	ldr	r4, [r2, #0]
 8002592:	4621      	mov	r1, r4
 8002594:	b991      	cbnz	r1, 80025bc <_malloc_r+0x54>
 8002596:	4c20      	ldr	r4, [pc, #128]	; (8002618 <_malloc_r+0xb0>)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	b91b      	cbnz	r3, 80025a4 <_malloc_r+0x3c>
 800259c:	4630      	mov	r0, r6
 800259e:	f000 f83d 	bl	800261c <_sbrk_r>
 80025a2:	6020      	str	r0, [r4, #0]
 80025a4:	4629      	mov	r1, r5
 80025a6:	4630      	mov	r0, r6
 80025a8:	f000 f838 	bl	800261c <_sbrk_r>
 80025ac:	1c43      	adds	r3, r0, #1
 80025ae:	d124      	bne.n	80025fa <_malloc_r+0x92>
 80025b0:	230c      	movs	r3, #12
 80025b2:	4630      	mov	r0, r6
 80025b4:	6033      	str	r3, [r6, #0]
 80025b6:	f000 f8dc 	bl	8002772 <__malloc_unlock>
 80025ba:	e7e4      	b.n	8002586 <_malloc_r+0x1e>
 80025bc:	680b      	ldr	r3, [r1, #0]
 80025be:	1b5b      	subs	r3, r3, r5
 80025c0:	d418      	bmi.n	80025f4 <_malloc_r+0x8c>
 80025c2:	2b0b      	cmp	r3, #11
 80025c4:	d90f      	bls.n	80025e6 <_malloc_r+0x7e>
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	18cc      	adds	r4, r1, r3
 80025ca:	50cd      	str	r5, [r1, r3]
 80025cc:	4630      	mov	r0, r6
 80025ce:	f000 f8d0 	bl	8002772 <__malloc_unlock>
 80025d2:	f104 000b 	add.w	r0, r4, #11
 80025d6:	1d23      	adds	r3, r4, #4
 80025d8:	f020 0007 	bic.w	r0, r0, #7
 80025dc:	1ac3      	subs	r3, r0, r3
 80025de:	d0d3      	beq.n	8002588 <_malloc_r+0x20>
 80025e0:	425a      	negs	r2, r3
 80025e2:	50e2      	str	r2, [r4, r3]
 80025e4:	e7d0      	b.n	8002588 <_malloc_r+0x20>
 80025e6:	684b      	ldr	r3, [r1, #4]
 80025e8:	428c      	cmp	r4, r1
 80025ea:	bf16      	itet	ne
 80025ec:	6063      	strne	r3, [r4, #4]
 80025ee:	6013      	streq	r3, [r2, #0]
 80025f0:	460c      	movne	r4, r1
 80025f2:	e7eb      	b.n	80025cc <_malloc_r+0x64>
 80025f4:	460c      	mov	r4, r1
 80025f6:	6849      	ldr	r1, [r1, #4]
 80025f8:	e7cc      	b.n	8002594 <_malloc_r+0x2c>
 80025fa:	1cc4      	adds	r4, r0, #3
 80025fc:	f024 0403 	bic.w	r4, r4, #3
 8002600:	42a0      	cmp	r0, r4
 8002602:	d005      	beq.n	8002610 <_malloc_r+0xa8>
 8002604:	1a21      	subs	r1, r4, r0
 8002606:	4630      	mov	r0, r6
 8002608:	f000 f808 	bl	800261c <_sbrk_r>
 800260c:	3001      	adds	r0, #1
 800260e:	d0cf      	beq.n	80025b0 <_malloc_r+0x48>
 8002610:	6025      	str	r5, [r4, #0]
 8002612:	e7db      	b.n	80025cc <_malloc_r+0x64>
 8002614:	20000090 	.word	0x20000090
 8002618:	20000094 	.word	0x20000094

0800261c <_sbrk_r>:
 800261c:	b538      	push	{r3, r4, r5, lr}
 800261e:	2300      	movs	r3, #0
 8002620:	4c05      	ldr	r4, [pc, #20]	; (8002638 <_sbrk_r+0x1c>)
 8002622:	4605      	mov	r5, r0
 8002624:	4608      	mov	r0, r1
 8002626:	6023      	str	r3, [r4, #0]
 8002628:	f7fd ffd2 	bl	80005d0 <_sbrk>
 800262c:	1c43      	adds	r3, r0, #1
 800262e:	d102      	bne.n	8002636 <_sbrk_r+0x1a>
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	b103      	cbz	r3, 8002636 <_sbrk_r+0x1a>
 8002634:	602b      	str	r3, [r5, #0]
 8002636:	bd38      	pop	{r3, r4, r5, pc}
 8002638:	20000124 	.word	0x20000124

0800263c <__sread>:
 800263c:	b510      	push	{r4, lr}
 800263e:	460c      	mov	r4, r1
 8002640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002644:	f000 f896 	bl	8002774 <_read_r>
 8002648:	2800      	cmp	r0, #0
 800264a:	bfab      	itete	ge
 800264c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800264e:	89a3      	ldrhlt	r3, [r4, #12]
 8002650:	181b      	addge	r3, r3, r0
 8002652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002656:	bfac      	ite	ge
 8002658:	6563      	strge	r3, [r4, #84]	; 0x54
 800265a:	81a3      	strhlt	r3, [r4, #12]
 800265c:	bd10      	pop	{r4, pc}

0800265e <__swrite>:
 800265e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002662:	461f      	mov	r7, r3
 8002664:	898b      	ldrh	r3, [r1, #12]
 8002666:	4605      	mov	r5, r0
 8002668:	05db      	lsls	r3, r3, #23
 800266a:	460c      	mov	r4, r1
 800266c:	4616      	mov	r6, r2
 800266e:	d505      	bpl.n	800267c <__swrite+0x1e>
 8002670:	2302      	movs	r3, #2
 8002672:	2200      	movs	r2, #0
 8002674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002678:	f000 f868 	bl	800274c <_lseek_r>
 800267c:	89a3      	ldrh	r3, [r4, #12]
 800267e:	4632      	mov	r2, r6
 8002680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002684:	81a3      	strh	r3, [r4, #12]
 8002686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800268a:	463b      	mov	r3, r7
 800268c:	4628      	mov	r0, r5
 800268e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002692:	f000 b817 	b.w	80026c4 <_write_r>

08002696 <__sseek>:
 8002696:	b510      	push	{r4, lr}
 8002698:	460c      	mov	r4, r1
 800269a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800269e:	f000 f855 	bl	800274c <_lseek_r>
 80026a2:	1c43      	adds	r3, r0, #1
 80026a4:	89a3      	ldrh	r3, [r4, #12]
 80026a6:	bf15      	itete	ne
 80026a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80026aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80026ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80026b2:	81a3      	strheq	r3, [r4, #12]
 80026b4:	bf18      	it	ne
 80026b6:	81a3      	strhne	r3, [r4, #12]
 80026b8:	bd10      	pop	{r4, pc}

080026ba <__sclose>:
 80026ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026be:	f000 b813 	b.w	80026e8 <_close_r>
	...

080026c4 <_write_r>:
 80026c4:	b538      	push	{r3, r4, r5, lr}
 80026c6:	4605      	mov	r5, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	2200      	movs	r2, #0
 80026ce:	4c05      	ldr	r4, [pc, #20]	; (80026e4 <_write_r+0x20>)
 80026d0:	6022      	str	r2, [r4, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f7fd ff2f 	bl	8000536 <_write>
 80026d8:	1c43      	adds	r3, r0, #1
 80026da:	d102      	bne.n	80026e2 <_write_r+0x1e>
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	b103      	cbz	r3, 80026e2 <_write_r+0x1e>
 80026e0:	602b      	str	r3, [r5, #0]
 80026e2:	bd38      	pop	{r3, r4, r5, pc}
 80026e4:	20000124 	.word	0x20000124

080026e8 <_close_r>:
 80026e8:	b538      	push	{r3, r4, r5, lr}
 80026ea:	2300      	movs	r3, #0
 80026ec:	4c05      	ldr	r4, [pc, #20]	; (8002704 <_close_r+0x1c>)
 80026ee:	4605      	mov	r5, r0
 80026f0:	4608      	mov	r0, r1
 80026f2:	6023      	str	r3, [r4, #0]
 80026f4:	f7fd ff3b 	bl	800056e <_close>
 80026f8:	1c43      	adds	r3, r0, #1
 80026fa:	d102      	bne.n	8002702 <_close_r+0x1a>
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	b103      	cbz	r3, 8002702 <_close_r+0x1a>
 8002700:	602b      	str	r3, [r5, #0]
 8002702:	bd38      	pop	{r3, r4, r5, pc}
 8002704:	20000124 	.word	0x20000124

08002708 <_fstat_r>:
 8002708:	b538      	push	{r3, r4, r5, lr}
 800270a:	2300      	movs	r3, #0
 800270c:	4c06      	ldr	r4, [pc, #24]	; (8002728 <_fstat_r+0x20>)
 800270e:	4605      	mov	r5, r0
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	6023      	str	r3, [r4, #0]
 8002716:	f7fd ff35 	bl	8000584 <_fstat>
 800271a:	1c43      	adds	r3, r0, #1
 800271c:	d102      	bne.n	8002724 <_fstat_r+0x1c>
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	b103      	cbz	r3, 8002724 <_fstat_r+0x1c>
 8002722:	602b      	str	r3, [r5, #0]
 8002724:	bd38      	pop	{r3, r4, r5, pc}
 8002726:	bf00      	nop
 8002728:	20000124 	.word	0x20000124

0800272c <_isatty_r>:
 800272c:	b538      	push	{r3, r4, r5, lr}
 800272e:	2300      	movs	r3, #0
 8002730:	4c05      	ldr	r4, [pc, #20]	; (8002748 <_isatty_r+0x1c>)
 8002732:	4605      	mov	r5, r0
 8002734:	4608      	mov	r0, r1
 8002736:	6023      	str	r3, [r4, #0]
 8002738:	f7fd ff33 	bl	80005a2 <_isatty>
 800273c:	1c43      	adds	r3, r0, #1
 800273e:	d102      	bne.n	8002746 <_isatty_r+0x1a>
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	b103      	cbz	r3, 8002746 <_isatty_r+0x1a>
 8002744:	602b      	str	r3, [r5, #0]
 8002746:	bd38      	pop	{r3, r4, r5, pc}
 8002748:	20000124 	.word	0x20000124

0800274c <_lseek_r>:
 800274c:	b538      	push	{r3, r4, r5, lr}
 800274e:	4605      	mov	r5, r0
 8002750:	4608      	mov	r0, r1
 8002752:	4611      	mov	r1, r2
 8002754:	2200      	movs	r2, #0
 8002756:	4c05      	ldr	r4, [pc, #20]	; (800276c <_lseek_r+0x20>)
 8002758:	6022      	str	r2, [r4, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	f7fd ff2b 	bl	80005b6 <_lseek>
 8002760:	1c43      	adds	r3, r0, #1
 8002762:	d102      	bne.n	800276a <_lseek_r+0x1e>
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	b103      	cbz	r3, 800276a <_lseek_r+0x1e>
 8002768:	602b      	str	r3, [r5, #0]
 800276a:	bd38      	pop	{r3, r4, r5, pc}
 800276c:	20000124 	.word	0x20000124

08002770 <__malloc_lock>:
 8002770:	4770      	bx	lr

08002772 <__malloc_unlock>:
 8002772:	4770      	bx	lr

08002774 <_read_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	4605      	mov	r5, r0
 8002778:	4608      	mov	r0, r1
 800277a:	4611      	mov	r1, r2
 800277c:	2200      	movs	r2, #0
 800277e:	4c05      	ldr	r4, [pc, #20]	; (8002794 <_read_r+0x20>)
 8002780:	6022      	str	r2, [r4, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	f7fd feba 	bl	80004fc <_read>
 8002788:	1c43      	adds	r3, r0, #1
 800278a:	d102      	bne.n	8002792 <_read_r+0x1e>
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	b103      	cbz	r3, 8002792 <_read_r+0x1e>
 8002790:	602b      	str	r3, [r5, #0]
 8002792:	bd38      	pop	{r3, r4, r5, pc}
 8002794:	20000124 	.word	0x20000124

08002798 <_init>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	bf00      	nop
 800279c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279e:	bc08      	pop	{r3}
 80027a0:	469e      	mov	lr, r3
 80027a2:	4770      	bx	lr

080027a4 <_fini>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr
