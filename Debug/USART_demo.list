
USART_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003174  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003358  08003358  00013358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003384  08003384  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  08003384  08003384  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003384  08003384  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800338c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000220  080035ac  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  080035ac  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d50e  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020b1  00000000  00000000  0002d757  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002f808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  000304d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ae7e  00000000  00000000  00031090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb73  00000000  00000000  0004bf0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a8ea  00000000  00000000  00057a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f236b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003468  00000000  00000000  000f23e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000220 	.word	0x20000220
 8000200:	00000000 	.word	0x00000000
 8000204:	08003340 	.word	0x08003340

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000224 	.word	0x20000224
 8000220:	08003340 	.word	0x08003340

08000224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <MX_DMA_Init+0x38>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <MX_DMA_Init+0x38>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <MX_DMA_Init+0x38>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 8000242:	2200      	movs	r2, #0
 8000244:	2101      	movs	r1, #1
 8000246:	200f      	movs	r0, #15
 8000248:	f000 fdd7 	bl	8000dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800024c:	200f      	movs	r0, #15
 800024e:	f000 fdf0 	bl	8000e32 <HAL_NVIC_EnableIRQ>

}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000

08000260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000266:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MX_GPIO_Init+0x70>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a19      	ldr	r2, [pc, #100]	; (80002d0 <MX_GPIO_Init+0x70>)
 800026c:	f043 0310 	orr.w	r3, r3, #16
 8000270:	6193      	str	r3, [r2, #24]
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <MX_GPIO_Init+0x70>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f003 0310 	and.w	r3, r3, #16
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <MX_GPIO_Init+0x70>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <MX_GPIO_Init+0x70>)
 8000284:	f043 0320 	orr.w	r3, r3, #32
 8000288:	6193      	str	r3, [r2, #24]
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MX_GPIO_Init+0x70>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	f003 0320 	and.w	r3, r3, #32
 8000292:	60bb      	str	r3, [r7, #8]
 8000294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_GPIO_Init+0x70>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <MX_GPIO_Init+0x70>)
 800029c:	f043 0304 	orr.w	r3, r3, #4
 80002a0:	6193      	str	r3, [r2, #24]
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <MX_GPIO_Init+0x70>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f003 0304 	and.w	r3, r3, #4
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <MX_GPIO_Init+0x70>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <MX_GPIO_Init+0x70>)
 80002b4:	f043 0308 	orr.w	r3, r3, #8
 80002b8:	6193      	str	r3, [r2, #24]
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <MX_GPIO_Init+0x70>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	f003 0308 	and.w	r3, r3, #8
 80002c2:	603b      	str	r3, [r7, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]

}
 80002c6:	bf00      	nop
 80002c8:	3714      	adds	r7, #20
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000

080002d4 <kfifo_unused>:

/*
 * internal helper to calculate the unused elements in a fifo
 */
static inline unsigned int kfifo_unused(struct __kfifo *fifo)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	return (fifo->mask + 1) - (fifo->in - fifo->out);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	689a      	ldr	r2, [r3, #8]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	6859      	ldr	r1, [r3, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	1acb      	subs	r3, r1, r3
 80002ea:	4413      	add	r3, r2
 80002ec:	3301      	adds	r3, #1
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <kfifo_copy_in>:
}
// EXPORT_SYMBOL(__kfifo_init);

static void kfifo_copy_in(struct __kfifo *fifo, const void *src,
		unsigned int len, unsigned int off)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08a      	sub	sp, #40	; 0x28
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
 8000304:	603b      	str	r3, [r7, #0]
	unsigned int size = fifo->mask + 1;
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	3301      	adds	r3, #1
 800030c:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int esize = fifo->esize;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	623b      	str	r3, [r7, #32]
	unsigned int l;

	off &= fifo->mask;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	683a      	ldr	r2, [r7, #0]
 800031a:	4013      	ands	r3, r2
 800031c:	603b      	str	r3, [r7, #0]
	if (esize != 1) {
 800031e:	6a3b      	ldr	r3, [r7, #32]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d00e      	beq.n	8000342 <kfifo_copy_in+0x4a>
		off *= esize;
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	6a3a      	ldr	r2, [r7, #32]
 8000328:	fb02 f303 	mul.w	r3, r2, r3
 800032c:	603b      	str	r3, [r7, #0]
		size *= esize;
 800032e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000330:	6a3a      	ldr	r2, [r7, #32]
 8000332:	fb02 f303 	mul.w	r3, r2, r3
 8000336:	627b      	str	r3, [r7, #36]	; 0x24
		len *= esize;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6a3a      	ldr	r2, [r7, #32]
 800033c:	fb02 f303 	mul.w	r3, r2, r3
 8000340:	607b      	str	r3, [r7, #4]
	}
	l = min(len, size - off);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	61bb      	str	r3, [r7, #24]
 8000346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	1ad3      	subs	r3, r2, r3
 800034c:	617b      	str	r3, [r7, #20]
 800034e:	697a      	ldr	r2, [r7, #20]
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	4293      	cmp	r3, r2
 8000354:	bf28      	it	cs
 8000356:	4613      	movcs	r3, r2
 8000358:	61fb      	str	r3, [r7, #28]

	memcpy(fifo->data + off, src, l);
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	691a      	ldr	r2, [r3, #16]
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	4413      	add	r3, r2
 8000362:	69fa      	ldr	r2, [r7, #28]
 8000364:	68b9      	ldr	r1, [r7, #8]
 8000366:	4618      	mov	r0, r3
 8000368:	f002 ffd6 	bl	8003318 <memcpy>
	memcpy(fifo->data, src + l, len - l);
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	6918      	ldr	r0, [r3, #16]
 8000370:	68ba      	ldr	r2, [r7, #8]
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	18d1      	adds	r1, r2, r3
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	69fb      	ldr	r3, [r7, #28]
 800037a:	1ad3      	subs	r3, r2, r3
 800037c:	461a      	mov	r2, r3
 800037e:	f002 ffcb 	bl	8003318 <memcpy>
	/*
	 * make sure that the data in the fifo is up to date before
	 * incrementing the fifo->in index counter
	 */
	smp_wmb();
 8000382:	f3bf 8f5b 	dmb	ish
}
 8000386:	bf00      	nop
 8000388:	3728      	adds	r7, #40	; 0x28
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <__kfifo_in>:

unsigned int __kfifo_in(struct __kfifo *fifo,
		const void *buf, unsigned int len)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b086      	sub	sp, #24
 8000392:	af00      	add	r7, sp, #0
 8000394:	60f8      	str	r0, [r7, #12]
 8000396:	60b9      	str	r1, [r7, #8]
 8000398:	607a      	str	r2, [r7, #4]
	unsigned int l;

	l = kfifo_unused(fifo);
 800039a:	68f8      	ldr	r0, [r7, #12]
 800039c:	f7ff ff9a 	bl	80002d4 <kfifo_unused>
 80003a0:	6178      	str	r0, [r7, #20]
	if (len > l)
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d901      	bls.n	80003ae <__kfifo_in+0x20>
		len = l;
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	607b      	str	r3, [r7, #4]

	kfifo_copy_in(fifo, buf, len, fifo->in);
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	68b9      	ldr	r1, [r7, #8]
 80003b6:	68f8      	ldr	r0, [r7, #12]
 80003b8:	f7ff ff9e 	bl	80002f8 <kfifo_copy_in>
	fifo->in += len;
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	441a      	add	r2, r3
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	601a      	str	r2, [r3, #0]
	return len;
 80003c8:	687b      	ldr	r3, [r7, #4]
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <kfifo_copy_out>:
// EXPORT_SYMBOL(__kfifo_in);

static void kfifo_copy_out(struct __kfifo *fifo, void *dst,
		unsigned int len, unsigned int off)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b08a      	sub	sp, #40	; 0x28
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	60f8      	str	r0, [r7, #12]
 80003da:	60b9      	str	r1, [r7, #8]
 80003dc:	607a      	str	r2, [r7, #4]
 80003de:	603b      	str	r3, [r7, #0]
	unsigned int size = fifo->mask + 1;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	3301      	adds	r3, #1
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int esize = fifo->esize;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	623b      	str	r3, [r7, #32]
	unsigned int l;

	off &= fifo->mask;
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	4013      	ands	r3, r2
 80003f6:	603b      	str	r3, [r7, #0]
	if (esize != 1) {
 80003f8:	6a3b      	ldr	r3, [r7, #32]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d00e      	beq.n	800041c <kfifo_copy_out+0x4a>
		off *= esize;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	6a3a      	ldr	r2, [r7, #32]
 8000402:	fb02 f303 	mul.w	r3, r2, r3
 8000406:	603b      	str	r3, [r7, #0]
		size *= esize;
 8000408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040a:	6a3a      	ldr	r2, [r7, #32]
 800040c:	fb02 f303 	mul.w	r3, r2, r3
 8000410:	627b      	str	r3, [r7, #36]	; 0x24
		len *= esize;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	6a3a      	ldr	r2, [r7, #32]
 8000416:	fb02 f303 	mul.w	r3, r2, r3
 800041a:	607b      	str	r3, [r7, #4]
	}
	l = min(len, size - off);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	61bb      	str	r3, [r7, #24]
 8000420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	617b      	str	r3, [r7, #20]
 8000428:	697a      	ldr	r2, [r7, #20]
 800042a:	69bb      	ldr	r3, [r7, #24]
 800042c:	4293      	cmp	r3, r2
 800042e:	bf28      	it	cs
 8000430:	4613      	movcs	r3, r2
 8000432:	61fb      	str	r3, [r7, #28]

	memcpy(dst, fifo->data + off, l);
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	691a      	ldr	r2, [r3, #16]
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	4413      	add	r3, r2
 800043c:	69fa      	ldr	r2, [r7, #28]
 800043e:	4619      	mov	r1, r3
 8000440:	68b8      	ldr	r0, [r7, #8]
 8000442:	f002 ff69 	bl	8003318 <memcpy>
	memcpy(dst + l, fifo->data, len - l);
 8000446:	68ba      	ldr	r2, [r7, #8]
 8000448:	69fb      	ldr	r3, [r7, #28]
 800044a:	18d0      	adds	r0, r2, r3
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	6919      	ldr	r1, [r3, #16]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	461a      	mov	r2, r3
 8000458:	f002 ff5e 	bl	8003318 <memcpy>
	/*
	 * make sure that the data is copied before
	 * incrementing the fifo->out index counter
	 */
	smp_wmb();
 800045c:	f3bf 8f5b 	dmb	ish
}
 8000460:	bf00      	nop
 8000462:	3728      	adds	r7, #40	; 0x28
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <__kfifo_out_peek>:

unsigned int __kfifo_out_peek(struct __kfifo *fifo,
		void *buf, unsigned int len)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
	unsigned int l;

	l = fifo->in - fifo->out;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	1ad3      	subs	r3, r2, r3
 800047e:	617b      	str	r3, [r7, #20]
	if (len > l)
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	429a      	cmp	r2, r3
 8000486:	d901      	bls.n	800048c <__kfifo_out_peek+0x24>
		len = l;
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	607b      	str	r3, [r7, #4]

	kfifo_copy_out(fifo, buf, len, fifo->out);
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	68b9      	ldr	r1, [r7, #8]
 8000494:	68f8      	ldr	r0, [r7, #12]
 8000496:	f7ff ff9c 	bl	80003d2 <kfifo_copy_out>
	return len;
 800049a:	687b      	ldr	r3, [r7, #4]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <__kfifo_out>:
// EXPORT_SYMBOL(__kfifo_out_peek);

unsigned int __kfifo_out(struct __kfifo *fifo,
		void *buf, unsigned int len)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
	len = __kfifo_out_peek(fifo, buf, len);
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	68b9      	ldr	r1, [r7, #8]
 80004b4:	68f8      	ldr	r0, [r7, #12]
 80004b6:	f7ff ffd7 	bl	8000468 <__kfifo_out_peek>
 80004ba:	6078      	str	r0, [r7, #4]
	fifo->out += len;
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	685a      	ldr	r2, [r3, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	441a      	add	r2, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	605a      	str	r2, [r3, #4]
	return len;
 80004c8:	687b      	ldr	r3, [r7, #4]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <__kfifo_peek_n>:
/*
 * __kfifo_peek_n internal helper function for determinate the length of
 * the next record in the fifo
 */
static unsigned int __kfifo_peek_n(struct __kfifo *fifo, size_t recsize)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b087      	sub	sp, #28
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
 80004da:	6039      	str	r1, [r7, #0]
	unsigned int l;
	unsigned int mask = fifo->mask;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	613b      	str	r3, [r7, #16]
	unsigned char *data = fifo->data;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	60fb      	str	r3, [r7, #12]

	l = __KFIFO_PEEK(data, fifo->out, mask);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	685a      	ldr	r2, [r3, #4]
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	4013      	ands	r3, r2
 80004f0:	68fa      	ldr	r2, [r7, #12]
 80004f2:	4413      	add	r3, r2
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	617b      	str	r3, [r7, #20]

	if (--recsize)
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00c      	beq.n	800051e <__kfifo_peek_n+0x4c>
		l |= __KFIFO_PEEK(data, fifo->out + 1, mask) << 8;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	4013      	ands	r3, r2
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	4413      	add	r3, r2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	021b      	lsls	r3, r3, #8
 8000516:	461a      	mov	r2, r3
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	4313      	orrs	r3, r2
 800051c:	617b      	str	r3, [r7, #20]

	return l;
 800051e:	697b      	ldr	r3, [r7, #20]
}
 8000520:	4618      	mov	r0, r3
 8000522:	371c      	adds	r7, #28
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <__kfifo_poke_n>:
/*
 * __kfifo_poke_n internal helper function for storeing the length of
 * the record into the fifo
 */
static void __kfifo_poke_n(struct __kfifo *fifo, unsigned int n, size_t recsize)
{
 800052a:	b480      	push	{r7}
 800052c:	b087      	sub	sp, #28
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
	unsigned int mask = fifo->mask;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	617b      	str	r3, [r7, #20]
	unsigned char *data = fifo->data;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	691b      	ldr	r3, [r3, #16]
 8000540:	613b      	str	r3, [r7, #16]

	__KFIFO_POKE(data, fifo->in, mask, n);
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	4013      	ands	r3, r2
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	4413      	add	r3, r2
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	b2d2      	uxtb	r2, r2
 8000552:	701a      	strb	r2, [r3, #0]

	if (recsize > 1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d90a      	bls.n	8000570 <__kfifo_poke_n+0x46>
		__KFIFO_POKE(data, fifo->in + 1, mask, n >> 8);
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	0a19      	lsrs	r1, r3, #8
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	4013      	ands	r3, r2
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	4413      	add	r3, r2
 800056c:	b2ca      	uxtb	r2, r1
 800056e:	701a      	strb	r2, [r3, #0]
}
 8000570:	bf00      	nop
 8000572:	371c      	adds	r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <__kfifo_in_r>:
}
// EXPORT_SYMBOL(__kfifo_len_r);

unsigned int __kfifo_in_r(struct __kfifo *fifo, const void *buf,
		unsigned int len, size_t recsize)
{
 800057a:	b590      	push	{r4, r7, lr}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	60b9      	str	r1, [r7, #8]
 8000584:	607a      	str	r2, [r7, #4]
 8000586:	603b      	str	r3, [r7, #0]
	if (len + recsize > kfifo_unused(fifo))
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	18d4      	adds	r4, r2, r3
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f7ff fea0 	bl	80002d4 <kfifo_unused>
 8000594:	4603      	mov	r3, r0
 8000596:	429c      	cmp	r4, r3
 8000598:	d901      	bls.n	800059e <__kfifo_in_r+0x24>
		return 0;
 800059a:	2300      	movs	r3, #0
 800059c:	e016      	b.n	80005cc <__kfifo_in_r+0x52>

	__kfifo_poke_n(fifo, len, recsize);
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	68f8      	ldr	r0, [r7, #12]
 80005a4:	f7ff ffc1 	bl	800052a <__kfifo_poke_n>

	kfifo_copy_in(fifo, buf, len, fifo->in + recsize);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	f7ff fe9f 	bl	80002f8 <kfifo_copy_in>
	fifo->in += len + recsize;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	440b      	add	r3, r1
 80005c4:	441a      	add	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	601a      	str	r2, [r3, #0]
	return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd90      	pop	{r4, r7, pc}

080005d4 <kfifo_out_copy_r>:
// EXPORT_SYMBOL(__kfifo_in_r);

static unsigned int kfifo_out_copy_r(struct __kfifo *fifo,
	void *buf, unsigned int len, size_t recsize, unsigned int *n)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	603b      	str	r3, [r7, #0]
	*n = __kfifo_peek_n(fifo, recsize);
 80005e2:	6839      	ldr	r1, [r7, #0]
 80005e4:	68f8      	ldr	r0, [r7, #12]
 80005e6:	f7ff ff74 	bl	80004d2 <__kfifo_peek_n>
 80005ea:	4602      	mov	r2, r0
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	601a      	str	r2, [r3, #0]

	if (len > *n)
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d902      	bls.n	8000600 <kfifo_out_copy_r+0x2c>
		len = *n;
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	607b      	str	r3, [r7, #4]

	kfifo_copy_out(fifo, buf, len, fifo->out + recsize);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	4413      	add	r3, r2
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	68b9      	ldr	r1, [r7, #8]
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f7ff fee0 	bl	80003d2 <kfifo_copy_out>
	return len;
 8000612:	687b      	ldr	r3, [r7, #4]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <__kfifo_out_r>:
}
// EXPORT_SYMBOL(__kfifo_out_peek_r);

unsigned int __kfifo_out_r(struct __kfifo *fifo, void *buf,
		unsigned int len, size_t recsize)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af02      	add	r7, sp, #8
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	603b      	str	r3, [r7, #0]
	unsigned int n;

	if (fifo->in == fifo->out)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	429a      	cmp	r2, r3
 8000634:	d101      	bne.n	800063a <__kfifo_out_r+0x1e>
		return 0;
 8000636:	2300      	movs	r3, #0
 8000638:	e012      	b.n	8000660 <__kfifo_out_r+0x44>

	len = kfifo_out_copy_r(fifo, buf, len, recsize, &n);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff ffc4 	bl	80005d4 <kfifo_out_copy_r>
 800064c:	6078      	str	r0, [r7, #4]
	fifo->out += n + recsize;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	6979      	ldr	r1, [r7, #20]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	440b      	add	r3, r1
 8000658:	441a      	add	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	605a      	str	r2, [r3, #4]
	return len;
 800065e:	687b      	ldr	r3, [r7, #4]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fade 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f81a 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f7ff fdf4 	bl	8000260 <MX_GPIO_Init>
  MX_DMA_Init();
 8000678:	f7ff fdd4 	bl	8000224 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800067c:	f000 f958 	bl	8000930 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); //使能串口空闲中断
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <main+0x38>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	68da      	ldr	r2, [r3, #12]
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <main+0x38>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f042 0210 	orr.w	r2, r2, #16
 800068e:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)USART1_RxBuff, USART1_RxBuff_Size);
 8000690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000694:	4903      	ldr	r1, [pc, #12]	; (80006a4 <main+0x3c>)
 8000696:	4802      	ldr	r0, [pc, #8]	; (80006a0 <main+0x38>)
 8000698:	f002 f988 	bl	80029ac <HAL_UART_Receive_DMA>
  while (1)
 800069c:	e7fe      	b.n	800069c <main+0x34>
 800069e:	bf00      	nop
 80006a0:	200003c8 	.word	0x200003c8
 80006a4:	20000284 	.word	0x20000284

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b090      	sub	sp, #64	; 0x40
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	2228      	movs	r2, #40	; 0x28
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fe39 	bl	800332e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0318 	add.w	r3, r7, #24
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 f999 	bl	8001a28 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006fc:	f000 f82e 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fc04 	bl	8001f28 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000726:	f000 f819 	bl	800075c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800072a:	f001 fce7 	bl	80020fc <HAL_RCC_EnableCSS>
}
 800072e:	bf00      	nop
 8000730:	3740      	adds	r7, #64	; 0x40
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800074a:	f000 fa85 	bl	8000c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40001400 	.word	0x40001400

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_MspInit+0x5c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <HAL_MspInit+0x5c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_MspInit+0x5c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x5c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_MspInit+0x5c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x5c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_MspInit+0x60>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_MspInit+0x60>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010000 	.word	0x40010000

080007cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	2037      	movs	r0, #55	; 0x37
 80007e2:	f000 fb0a 	bl	8000dfa <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80007e6:	2037      	movs	r0, #55	; 0x37
 80007e8:	f000 fb23 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <HAL_InitTick+0xa0>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	4a1e      	ldr	r2, [pc, #120]	; (800086c <HAL_InitTick+0xa0>)
 80007f2:	f043 0320 	orr.w	r3, r3, #32
 80007f6:	61d3      	str	r3, [r2, #28]
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <HAL_InitTick+0xa0>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	f003 0320 	and.w	r3, r3, #32
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000804:	f107 0210 	add.w	r2, r7, #16
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f001 fd14 	bl	800223c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000814:	f001 fcea 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8000818:	4603      	mov	r3, r0
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <HAL_InitTick+0xa4>)
 8000822:	fba2 2303 	umull	r2, r3, r2, r3
 8000826:	0c9b      	lsrs	r3, r3, #18
 8000828:	3b01      	subs	r3, #1
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_InitTick+0xa8>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <HAL_InitTick+0xac>)
 8000830:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_InitTick+0xa8>)
 8000834:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000838:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_InitTick+0xa8>)
 800083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_InitTick+0xa8>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_InitTick+0xa8>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <HAL_InitTick+0xa8>)
 800084e:	f001 fd5d 	bl	800230c <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d104      	bne.n	8000862 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <HAL_InitTick+0xa8>)
 800085a:	f001 fdaf 	bl	80023bc <HAL_TIM_Base_Start_IT>
 800085e:	4603      	mov	r3, r0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3730      	adds	r7, #48	; 0x30
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	431bde83 	.word	0x431bde83
 8000874:	2000023c 	.word	0x2000023c
 8000878:	40001400 	.word	0x40001400

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000880:	f001 fd0c 	bl	800229c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <HardFault_Handler+0x4>

0800088e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <BusFault_Handler+0x4>

0800089a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <UsageFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <DMA1_Channel5_IRQHandler+0x10>)
 80008d6:	f000 fcd3 	bl	8001280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000384 	.word	0x20000384

080008e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <USART1_IRQHandler+0x14>)
 80008ea:	f002 f93b 	bl	8002b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 80008ee:	4802      	ldr	r0, [pc, #8]	; (80008f8 <USART1_IRQHandler+0x14>)
 80008f0:	f000 f8c6 	bl	8000a80 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200003c8 	.word	0x200003c8

080008fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <TIM7_IRQHandler+0x10>)
 8000902:	f001 fdbb 	bl	800247c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000023c 	.word	0x2000023c

08000910 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <__kfifo_uint_must_check_helper>:
	}


static inline unsigned int __must_check
__kfifo_uint_must_check_helper(unsigned int val)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	return val;
 8000924:	687b      	ldr	r3, [r7, #4]
}
 8000926:	4618      	mov	r0, r3
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MX_USART1_UART_Init+0x50>)
 8000938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_USART1_UART_Init+0x4c>)
 800093c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART1_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART1_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART1_UART_Init+0x4c>)
 8000968:	f001 ff40 	bl	80027ec <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000972:	f7ff fef3 	bl	800075c <Error_Handler>
  }

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200003c8 	.word	0x200003c8
 8000980:	40013800 	.word	0x40013800

08000984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <HAL_UART_MspInit+0xe8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d15f      	bne.n	8000a64 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a4:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <HAL_UART_MspInit+0xec>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a31      	ldr	r2, [pc, #196]	; (8000a70 <HAL_UART_MspInit+0xec>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <HAL_UART_MspInit+0xec>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <HAL_UART_MspInit+0xec>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <HAL_UART_MspInit+0xec>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <HAL_UART_MspInit+0xec>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	4619      	mov	r1, r3
 80009e8:	4822      	ldr	r0, [pc, #136]	; (8000a74 <HAL_UART_MspInit+0xf0>)
 80009ea:	f000 feb3 	bl	8001754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	481c      	ldr	r0, [pc, #112]	; (8000a74 <HAL_UART_MspInit+0xf0>)
 8000a04:	f000 fea6 	bl	8001754 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_UART_MspInit+0xf4>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <HAL_UART_MspInit+0xf8>)
 8000a0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_UART_MspInit+0xf4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0xf4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0xf4>)
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0xf4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_UART_MspInit+0xf4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_UART_MspInit+0xf4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0xf4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a38:	480f      	ldr	r0, [pc, #60]	; (8000a78 <HAL_UART_MspInit+0xf4>)
 8000a3a:	f000 fa09 	bl	8000e50 <HAL_DMA_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000a44:	f7ff fe8a 	bl	800075c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <HAL_UART_MspInit+0xf4>)
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_UART_MspInit+0xf4>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2101      	movs	r1, #1
 8000a58:	2025      	movs	r0, #37	; 0x25
 8000a5a:	f000 f9ce 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a5e:	2025      	movs	r0, #37	; 0x25
 8000a60:	f000 f9e7 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40013800 	.word	0x40013800
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010800 	.word	0x40010800
 8000a78:	20000384 	.word	0x20000384
 8000a7c:	40020058 	.word	0x40020058

08000a80 <USER_UART_IRQHandler>:
   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
   *                the configuration information for the specified UART module.
   * @retval None
   */
 void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
 {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
   if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	2b10      	cmp	r3, #16
 8000a94:	d10d      	bne.n	8000ab2 <USER_UART_IRQHandler+0x32>
   {
     __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
     USAR_UART_IDLECallback(huart);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 f805 	bl	8000abc <USAR_UART_IDLECallback>
   }
 }
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <USAR_UART_IDLECallback>:
   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
   *                the configuration information for the specified UART module.
   * @retval None
   */
 void USAR_UART_IDLECallback(UART_HandleTypeDef *huart)
 {
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	b090      	sub	sp, #64	; 0x40
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a40      	ldr	r2, [pc, #256]	; (8000bcc <USAR_UART_IDLECallback+0x110>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d179      	bne.n	8000bc2 <USAR_UART_IDLECallback+0x106>
   {
 8000ace:	466b      	mov	r3, sp
 8000ad0:	461d      	mov	r5, r3
     HAL_UART_DMAStop(&huart1); // 停止本次DMA传输
 8000ad2:	483f      	ldr	r0, [pc, #252]	; (8000bd0 <USAR_UART_IDLECallback+0x114>)
 8000ad4:	f001 ffea 	bl	8002aac <HAL_UART_DMAStop>

     // 测试函数：将接收到的数据打印出去
     uint16_t UART_DMA_RxData_Length = USART1_RxBuff_Size - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx); // 计算接收到的数据长度
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <USAR_UART_IDLECallback+0x118>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000ae4:	87fb      	strh	r3, [r7, #62]	; 0x3e

     // printf("Receive Data(length = %d): ", UART_DMA_RxData_Length);
     kfifo_in(&usart1_Rxkfifo, USART1_RxBuff, UART_DMA_RxData_Length);
 8000ae6:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <USAR_UART_IDLECallback+0x11c>)
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000aea:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <USAR_UART_IDLECallback+0x120>)
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
 8000aee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d006      	beq.n	8000b0e <USAR_UART_IDLECallback+0x52>
 8000b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b08:	f7ff fd37 	bl	800057a <__kfifo_in_r>
 8000b0c:	e004      	b.n	8000b18 <USAR_UART_IDLECallback+0x5c>
 8000b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b14:	f7ff fc3b 	bl	800038e <__kfifo_in>
     uint8_t UART_RxData[UART_DMA_RxData_Length];
 8000b18:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b20:	b281      	uxth	r1, r0
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f04f 0300 	mov.w	r3, #0
 8000b2a:	f04f 0400 	mov.w	r4, #0
 8000b2e:	00d4      	lsls	r4, r2, #3
 8000b30:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000b34:	00cb      	lsls	r3, r1, #3
 8000b36:	b281      	uxth	r1, r0
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	f04f 0400 	mov.w	r4, #0
 8000b44:	00d4      	lsls	r4, r2, #3
 8000b46:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000b4a:	00cb      	lsls	r3, r1, #3
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	3307      	adds	r3, #7
 8000b50:	08db      	lsrs	r3, r3, #3
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	ebad 0d03 	sub.w	sp, sp, r3
 8000b58:	466b      	mov	r3, sp
 8000b5a:	3300      	adds	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
     kfifo_out(&usart1_Rxkfifo, UART_RxData, UART_DMA_RxData_Length);
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <USAR_UART_IDLECallback+0x11c>)
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d007      	beq.n	8000b88 <USAR_UART_IDLECallback+0xcc>
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	69b9      	ldr	r1, [r7, #24]
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f7ff fd4c 	bl	800061c <__kfifo_out_r>
 8000b84:	4603      	mov	r3, r0
 8000b86:	e005      	b.n	8000b94 <USAR_UART_IDLECallback+0xd8>
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	69b9      	ldr	r1, [r7, #24]
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff fc89 	bl	80004a4 <__kfifo_out>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fec1 	bl	800091c <__kfifo_uint_must_check_helper>
     HAL_UART_Transmit(&huart1, USART1_RxBuff, UART_DMA_RxData_Length, 1000);
 8000b9a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba0:	490e      	ldr	r1, [pc, #56]	; (8000bdc <USAR_UART_IDLECallback+0x120>)
 8000ba2:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <USAR_UART_IDLECallback+0x114>)
 8000ba4:	f001 fe6f 	bl	8002886 <HAL_UART_Transmit>

     memset(USART1_RxBuff, 0, USART1_RxBuff_Size); // 清零接收缓冲�?
 8000ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bac:	2100      	movs	r1, #0
 8000bae:	480b      	ldr	r0, [pc, #44]	; (8000bdc <USAR_UART_IDLECallback+0x120>)
 8000bb0:	f002 fbbd 	bl	800332e <memset>

     HAL_UART_Receive_DMA(&huart1, (uint8_t *)USART1_RxBuff, USART1_RxBuff_Size); // 重启DMA传输 每次255字节数据
 8000bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb8:	4908      	ldr	r1, [pc, #32]	; (8000bdc <USAR_UART_IDLECallback+0x120>)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <USAR_UART_IDLECallback+0x114>)
 8000bbc:	f001 fef6 	bl	80029ac <HAL_UART_Receive_DMA>
 8000bc0:	46ad      	mov	sp, r5
   }
 }
 8000bc2:	bf00      	nop
 8000bc4:	3740      	adds	r7, #64	; 0x40
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	200003c8 	.word	0x200003c8
 8000bd4:	20000384 	.word	0x20000384
 8000bd8:	20000004 	.word	0x20000004
 8000bdc:	20000284 	.word	0x20000284

08000be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000be0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000be2:	e003      	b.n	8000bec <LoopCopyDataInit>

08000be4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000be6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000be8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bea:	3104      	adds	r1, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bec:	480a      	ldr	r0, [pc, #40]	; (8000c18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bf0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bf2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bf4:	d3f6      	bcc.n	8000be4 <CopyDataInit>
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bf8:	e002      	b.n	8000c00 <LoopFillZerobss>

08000bfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bfc:	f842 3b04 	str.w	r3, [r2], #4

08000c00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c04:	d3f9      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c06:	f7ff fe83 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f002 fb61 	bl	80032d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0e:	f7ff fd2b 	bl	8000668 <main>
  bx lr
 8000c12:	4770      	bx	lr
  ldr r3, =_sidata
 8000c14:	0800338c 	.word	0x0800338c
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c1c:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 8000c20:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 8000c24:	2000040c 	.word	0x2000040c

08000c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_2_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_Init+0x28>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_Init+0x28>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f8d1 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fdc2 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c48:	f7ff fd8e 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40022000 	.word	0x40022000

08000c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x20>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <HAL_IncTick+0x20>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	2000021c 	.word	0x2000021c
 8000c78:	20000408 	.word	0x20000408

08000c7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <HAL_GetTick+0x10>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	20000408 	.word	0x20000408

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4906      	ldr	r1, [pc, #24]	; (8000d28 <__NVIC_EnableIRQ+0x34>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff4f 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff64 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ffb2 	bl	8000d80 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff81 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff57 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e059      	b.n	8000f1a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_DMA_Init+0xd4>)
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d80f      	bhi.n	8000e92 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <HAL_DMA_Init+0xd8>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a2b      	ldr	r2, [pc, #172]	; (8000f2c <HAL_DMA_Init+0xdc>)
 8000e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	009a      	lsls	r2, r3, #2
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a28      	ldr	r2, [pc, #160]	; (8000f30 <HAL_DMA_Init+0xe0>)
 8000e8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e90:	e00e      	b.n	8000eb0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <HAL_DMA_Init+0xe4>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <HAL_DMA_Init+0xdc>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	009a      	lsls	r2, r3, #2
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <HAL_DMA_Init+0xe8>)
 8000eae:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ec6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000eca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40020407 	.word	0x40020407
 8000f28:	bffdfff8 	.word	0xbffdfff8
 8000f2c:	cccccccd 	.word	0xcccccccd
 8000f30:	40020000 	.word	0x40020000
 8000f34:	bffdfbf8 	.word	0xbffdfbf8
 8000f38:	40020400 	.word	0x40020400

08000f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <HAL_DMA_Start_IT+0x20>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e04a      	b.n	8000ff2 <HAL_DMA_Start_IT+0xb6>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d13a      	bne.n	8000fe4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2202      	movs	r2, #2
 8000f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0201 	bic.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f000 fbb0 	bl	80016f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 020e 	orr.w	r2, r2, #14
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e00f      	b.n	8000fd2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0204 	bic.w	r2, r2, #4
 8000fc0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 020a 	orr.w	r2, r2, #10
 8000fd0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0201 	orr.w	r2, r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e005      	b.n	8000ff0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fec:	2302      	movs	r3, #2
 8000fee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b085      	sub	sp, #20
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800100c:	2b02      	cmp	r3, #2
 800100e:	d008      	beq.n	8001022 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2204      	movs	r2, #4
 8001014:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e020      	b.n	8001064 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 020e 	bic.w	r2, r2, #14
 8001030:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0201 	bic.w	r2, r2, #1
 8001040:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001062:	7bfb      	ldrb	r3, [r7, #15]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
	...

08001070 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001082:	2b02      	cmp	r3, #2
 8001084:	d005      	beq.n	8001092 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2204      	movs	r2, #4
 800108a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e0d6      	b.n	8001240 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 020e 	bic.w	r2, r2, #14
 80010a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0201 	bic.w	r2, r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b64      	ldr	r3, [pc, #400]	; (800124c <HAL_DMA_Abort_IT+0x1dc>)
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d958      	bls.n	8001170 <HAL_DMA_Abort_IT+0x100>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a63      	ldr	r2, [pc, #396]	; (8001250 <HAL_DMA_Abort_IT+0x1e0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d04f      	beq.n	8001168 <HAL_DMA_Abort_IT+0xf8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a61      	ldr	r2, [pc, #388]	; (8001254 <HAL_DMA_Abort_IT+0x1e4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d048      	beq.n	8001164 <HAL_DMA_Abort_IT+0xf4>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a60      	ldr	r2, [pc, #384]	; (8001258 <HAL_DMA_Abort_IT+0x1e8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d040      	beq.n	800115e <HAL_DMA_Abort_IT+0xee>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a5e      	ldr	r2, [pc, #376]	; (800125c <HAL_DMA_Abort_IT+0x1ec>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d038      	beq.n	8001158 <HAL_DMA_Abort_IT+0xe8>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a5d      	ldr	r2, [pc, #372]	; (8001260 <HAL_DMA_Abort_IT+0x1f0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d030      	beq.n	8001152 <HAL_DMA_Abort_IT+0xe2>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a5b      	ldr	r2, [pc, #364]	; (8001264 <HAL_DMA_Abort_IT+0x1f4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d028      	beq.n	800114c <HAL_DMA_Abort_IT+0xdc>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a53      	ldr	r2, [pc, #332]	; (800124c <HAL_DMA_Abort_IT+0x1dc>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d020      	beq.n	8001146 <HAL_DMA_Abort_IT+0xd6>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a57      	ldr	r2, [pc, #348]	; (8001268 <HAL_DMA_Abort_IT+0x1f8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d019      	beq.n	8001142 <HAL_DMA_Abort_IT+0xd2>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a56      	ldr	r2, [pc, #344]	; (800126c <HAL_DMA_Abort_IT+0x1fc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d012      	beq.n	800113e <HAL_DMA_Abort_IT+0xce>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a54      	ldr	r2, [pc, #336]	; (8001270 <HAL_DMA_Abort_IT+0x200>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d00a      	beq.n	8001138 <HAL_DMA_Abort_IT+0xc8>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a53      	ldr	r2, [pc, #332]	; (8001274 <HAL_DMA_Abort_IT+0x204>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d102      	bne.n	8001132 <HAL_DMA_Abort_IT+0xc2>
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001130:	e01b      	b.n	800116a <HAL_DMA_Abort_IT+0xfa>
 8001132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001136:	e018      	b.n	800116a <HAL_DMA_Abort_IT+0xfa>
 8001138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800113c:	e015      	b.n	800116a <HAL_DMA_Abort_IT+0xfa>
 800113e:	2310      	movs	r3, #16
 8001140:	e013      	b.n	800116a <HAL_DMA_Abort_IT+0xfa>
 8001142:	2301      	movs	r3, #1
 8001144:	e011      	b.n	800116a <HAL_DMA_Abort_IT+0xfa>
 8001146:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800114a:	e00e      	b.n	800116a <HAL_DMA_Abort_IT+0xfa>
 800114c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001150:	e00b      	b.n	800116a <HAL_DMA_Abort_IT+0xfa>
 8001152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001156:	e008      	b.n	800116a <HAL_DMA_Abort_IT+0xfa>
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	e005      	b.n	800116a <HAL_DMA_Abort_IT+0xfa>
 800115e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001162:	e002      	b.n	800116a <HAL_DMA_Abort_IT+0xfa>
 8001164:	2310      	movs	r3, #16
 8001166:	e000      	b.n	800116a <HAL_DMA_Abort_IT+0xfa>
 8001168:	2301      	movs	r3, #1
 800116a:	4a43      	ldr	r2, [pc, #268]	; (8001278 <HAL_DMA_Abort_IT+0x208>)
 800116c:	6053      	str	r3, [r2, #4]
 800116e:	e057      	b.n	8001220 <HAL_DMA_Abort_IT+0x1b0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a36      	ldr	r2, [pc, #216]	; (8001250 <HAL_DMA_Abort_IT+0x1e0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d04f      	beq.n	800121a <HAL_DMA_Abort_IT+0x1aa>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a35      	ldr	r2, [pc, #212]	; (8001254 <HAL_DMA_Abort_IT+0x1e4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d048      	beq.n	8001216 <HAL_DMA_Abort_IT+0x1a6>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a33      	ldr	r2, [pc, #204]	; (8001258 <HAL_DMA_Abort_IT+0x1e8>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d040      	beq.n	8001210 <HAL_DMA_Abort_IT+0x1a0>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a32      	ldr	r2, [pc, #200]	; (800125c <HAL_DMA_Abort_IT+0x1ec>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d038      	beq.n	800120a <HAL_DMA_Abort_IT+0x19a>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a30      	ldr	r2, [pc, #192]	; (8001260 <HAL_DMA_Abort_IT+0x1f0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d030      	beq.n	8001204 <HAL_DMA_Abort_IT+0x194>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <HAL_DMA_Abort_IT+0x1f4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d028      	beq.n	80011fe <HAL_DMA_Abort_IT+0x18e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a26      	ldr	r2, [pc, #152]	; (800124c <HAL_DMA_Abort_IT+0x1dc>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d020      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x188>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a2b      	ldr	r2, [pc, #172]	; (8001268 <HAL_DMA_Abort_IT+0x1f8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d019      	beq.n	80011f4 <HAL_DMA_Abort_IT+0x184>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a29      	ldr	r2, [pc, #164]	; (800126c <HAL_DMA_Abort_IT+0x1fc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d012      	beq.n	80011f0 <HAL_DMA_Abort_IT+0x180>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a28      	ldr	r2, [pc, #160]	; (8001270 <HAL_DMA_Abort_IT+0x200>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00a      	beq.n	80011ea <HAL_DMA_Abort_IT+0x17a>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a26      	ldr	r2, [pc, #152]	; (8001274 <HAL_DMA_Abort_IT+0x204>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d102      	bne.n	80011e4 <HAL_DMA_Abort_IT+0x174>
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	e01b      	b.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 80011e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e8:	e018      	b.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 80011ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ee:	e015      	b.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 80011f0:	2310      	movs	r3, #16
 80011f2:	e013      	b.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e011      	b.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 80011f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011fc:	e00e      	b.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 80011fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001202:	e00b      	b.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 8001204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001208:	e008      	b.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	e005      	b.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	e002      	b.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 8001216:	2310      	movs	r3, #16
 8001218:	e000      	b.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 800121a:	2301      	movs	r3, #1
 800121c:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_DMA_Abort_IT+0x20c>)
 800121e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	4798      	blx	r3
    } 
  }
  return status;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40020080 	.word	0x40020080
 8001250:	40020008 	.word	0x40020008
 8001254:	4002001c 	.word	0x4002001c
 8001258:	40020030 	.word	0x40020030
 800125c:	40020044 	.word	0x40020044
 8001260:	40020058 	.word	0x40020058
 8001264:	4002006c 	.word	0x4002006c
 8001268:	40020408 	.word	0x40020408
 800126c:	4002041c 	.word	0x4002041c
 8001270:	40020430 	.word	0x40020430
 8001274:	40020444 	.word	0x40020444
 8001278:	40020400 	.word	0x40020400
 800127c:	40020000 	.word	0x40020000

08001280 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	2204      	movs	r2, #4
 800129e:	409a      	lsls	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80d6 	beq.w	8001456 <HAL_DMA_IRQHandler+0x1d6>
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80d0 	beq.w	8001456 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0204 	bic.w	r2, r2, #4
 80012d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b9b      	ldr	r3, [pc, #620]	; (8001548 <HAL_DMA_IRQHandler+0x2c8>)
 80012dc:	429a      	cmp	r2, r3
 80012de:	d958      	bls.n	8001392 <HAL_DMA_IRQHandler+0x112>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a99      	ldr	r2, [pc, #612]	; (800154c <HAL_DMA_IRQHandler+0x2cc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d04f      	beq.n	800138a <HAL_DMA_IRQHandler+0x10a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a98      	ldr	r2, [pc, #608]	; (8001550 <HAL_DMA_IRQHandler+0x2d0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d048      	beq.n	8001386 <HAL_DMA_IRQHandler+0x106>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a96      	ldr	r2, [pc, #600]	; (8001554 <HAL_DMA_IRQHandler+0x2d4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d040      	beq.n	8001380 <HAL_DMA_IRQHandler+0x100>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a95      	ldr	r2, [pc, #596]	; (8001558 <HAL_DMA_IRQHandler+0x2d8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d038      	beq.n	800137a <HAL_DMA_IRQHandler+0xfa>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a93      	ldr	r2, [pc, #588]	; (800155c <HAL_DMA_IRQHandler+0x2dc>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d030      	beq.n	8001374 <HAL_DMA_IRQHandler+0xf4>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a92      	ldr	r2, [pc, #584]	; (8001560 <HAL_DMA_IRQHandler+0x2e0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d028      	beq.n	800136e <HAL_DMA_IRQHandler+0xee>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a89      	ldr	r2, [pc, #548]	; (8001548 <HAL_DMA_IRQHandler+0x2c8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d020      	beq.n	8001368 <HAL_DMA_IRQHandler+0xe8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a8e      	ldr	r2, [pc, #568]	; (8001564 <HAL_DMA_IRQHandler+0x2e4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d019      	beq.n	8001364 <HAL_DMA_IRQHandler+0xe4>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a8c      	ldr	r2, [pc, #560]	; (8001568 <HAL_DMA_IRQHandler+0x2e8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d012      	beq.n	8001360 <HAL_DMA_IRQHandler+0xe0>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a8b      	ldr	r2, [pc, #556]	; (800156c <HAL_DMA_IRQHandler+0x2ec>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00a      	beq.n	800135a <HAL_DMA_IRQHandler+0xda>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a89      	ldr	r2, [pc, #548]	; (8001570 <HAL_DMA_IRQHandler+0x2f0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d102      	bne.n	8001354 <HAL_DMA_IRQHandler+0xd4>
 800134e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001352:	e01b      	b.n	800138c <HAL_DMA_IRQHandler+0x10c>
 8001354:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001358:	e018      	b.n	800138c <HAL_DMA_IRQHandler+0x10c>
 800135a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135e:	e015      	b.n	800138c <HAL_DMA_IRQHandler+0x10c>
 8001360:	2340      	movs	r3, #64	; 0x40
 8001362:	e013      	b.n	800138c <HAL_DMA_IRQHandler+0x10c>
 8001364:	2304      	movs	r3, #4
 8001366:	e011      	b.n	800138c <HAL_DMA_IRQHandler+0x10c>
 8001368:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800136c:	e00e      	b.n	800138c <HAL_DMA_IRQHandler+0x10c>
 800136e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001372:	e00b      	b.n	800138c <HAL_DMA_IRQHandler+0x10c>
 8001374:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001378:	e008      	b.n	800138c <HAL_DMA_IRQHandler+0x10c>
 800137a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800137e:	e005      	b.n	800138c <HAL_DMA_IRQHandler+0x10c>
 8001380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001384:	e002      	b.n	800138c <HAL_DMA_IRQHandler+0x10c>
 8001386:	2340      	movs	r3, #64	; 0x40
 8001388:	e000      	b.n	800138c <HAL_DMA_IRQHandler+0x10c>
 800138a:	2304      	movs	r3, #4
 800138c:	4a79      	ldr	r2, [pc, #484]	; (8001574 <HAL_DMA_IRQHandler+0x2f4>)
 800138e:	6053      	str	r3, [r2, #4]
 8001390:	e057      	b.n	8001442 <HAL_DMA_IRQHandler+0x1c2>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a6d      	ldr	r2, [pc, #436]	; (800154c <HAL_DMA_IRQHandler+0x2cc>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d04f      	beq.n	800143c <HAL_DMA_IRQHandler+0x1bc>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a6b      	ldr	r2, [pc, #428]	; (8001550 <HAL_DMA_IRQHandler+0x2d0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d048      	beq.n	8001438 <HAL_DMA_IRQHandler+0x1b8>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a6a      	ldr	r2, [pc, #424]	; (8001554 <HAL_DMA_IRQHandler+0x2d4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d040      	beq.n	8001432 <HAL_DMA_IRQHandler+0x1b2>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a68      	ldr	r2, [pc, #416]	; (8001558 <HAL_DMA_IRQHandler+0x2d8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d038      	beq.n	800142c <HAL_DMA_IRQHandler+0x1ac>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a67      	ldr	r2, [pc, #412]	; (800155c <HAL_DMA_IRQHandler+0x2dc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d030      	beq.n	8001426 <HAL_DMA_IRQHandler+0x1a6>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a65      	ldr	r2, [pc, #404]	; (8001560 <HAL_DMA_IRQHandler+0x2e0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d028      	beq.n	8001420 <HAL_DMA_IRQHandler+0x1a0>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a5d      	ldr	r2, [pc, #372]	; (8001548 <HAL_DMA_IRQHandler+0x2c8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d020      	beq.n	800141a <HAL_DMA_IRQHandler+0x19a>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a61      	ldr	r2, [pc, #388]	; (8001564 <HAL_DMA_IRQHandler+0x2e4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_DMA_IRQHandler+0x196>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a60      	ldr	r2, [pc, #384]	; (8001568 <HAL_DMA_IRQHandler+0x2e8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d012      	beq.n	8001412 <HAL_DMA_IRQHandler+0x192>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a5e      	ldr	r2, [pc, #376]	; (800156c <HAL_DMA_IRQHandler+0x2ec>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00a      	beq.n	800140c <HAL_DMA_IRQHandler+0x18c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a5d      	ldr	r2, [pc, #372]	; (8001570 <HAL_DMA_IRQHandler+0x2f0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d102      	bne.n	8001406 <HAL_DMA_IRQHandler+0x186>
 8001400:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001404:	e01b      	b.n	800143e <HAL_DMA_IRQHandler+0x1be>
 8001406:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800140a:	e018      	b.n	800143e <HAL_DMA_IRQHandler+0x1be>
 800140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001410:	e015      	b.n	800143e <HAL_DMA_IRQHandler+0x1be>
 8001412:	2340      	movs	r3, #64	; 0x40
 8001414:	e013      	b.n	800143e <HAL_DMA_IRQHandler+0x1be>
 8001416:	2304      	movs	r3, #4
 8001418:	e011      	b.n	800143e <HAL_DMA_IRQHandler+0x1be>
 800141a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800141e:	e00e      	b.n	800143e <HAL_DMA_IRQHandler+0x1be>
 8001420:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001424:	e00b      	b.n	800143e <HAL_DMA_IRQHandler+0x1be>
 8001426:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800142a:	e008      	b.n	800143e <HAL_DMA_IRQHandler+0x1be>
 800142c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001430:	e005      	b.n	800143e <HAL_DMA_IRQHandler+0x1be>
 8001432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001436:	e002      	b.n	800143e <HAL_DMA_IRQHandler+0x1be>
 8001438:	2340      	movs	r3, #64	; 0x40
 800143a:	e000      	b.n	800143e <HAL_DMA_IRQHandler+0x1be>
 800143c:	2304      	movs	r3, #4
 800143e:	4a4e      	ldr	r2, [pc, #312]	; (8001578 <HAL_DMA_IRQHandler+0x2f8>)
 8001440:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8136 	beq.w	80016b8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001454:	e130      	b.n	80016b8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	2202      	movs	r2, #2
 800145c:	409a      	lsls	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80f8 	beq.w	8001658 <HAL_DMA_IRQHandler+0x3d8>
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80f2 	beq.w	8001658 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10b      	bne.n	800149a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 020a 	bic.w	r2, r2, #10
 8001490:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	4b29      	ldr	r3, [pc, #164]	; (8001548 <HAL_DMA_IRQHandler+0x2c8>)
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d973      	bls.n	800158e <HAL_DMA_IRQHandler+0x30e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a28      	ldr	r2, [pc, #160]	; (800154c <HAL_DMA_IRQHandler+0x2cc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d06a      	beq.n	8001586 <HAL_DMA_IRQHandler+0x306>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a26      	ldr	r2, [pc, #152]	; (8001550 <HAL_DMA_IRQHandler+0x2d0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d063      	beq.n	8001582 <HAL_DMA_IRQHandler+0x302>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a25      	ldr	r2, [pc, #148]	; (8001554 <HAL_DMA_IRQHandler+0x2d4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d05b      	beq.n	800157c <HAL_DMA_IRQHandler+0x2fc>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a23      	ldr	r2, [pc, #140]	; (8001558 <HAL_DMA_IRQHandler+0x2d8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d038      	beq.n	8001540 <HAL_DMA_IRQHandler+0x2c0>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a22      	ldr	r2, [pc, #136]	; (800155c <HAL_DMA_IRQHandler+0x2dc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d030      	beq.n	800153a <HAL_DMA_IRQHandler+0x2ba>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a20      	ldr	r2, [pc, #128]	; (8001560 <HAL_DMA_IRQHandler+0x2e0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d028      	beq.n	8001534 <HAL_DMA_IRQHandler+0x2b4>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_DMA_IRQHandler+0x2c8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d020      	beq.n	800152e <HAL_DMA_IRQHandler+0x2ae>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_DMA_IRQHandler+0x2e4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d019      	beq.n	800152a <HAL_DMA_IRQHandler+0x2aa>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <HAL_DMA_IRQHandler+0x2e8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d012      	beq.n	8001526 <HAL_DMA_IRQHandler+0x2a6>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a19      	ldr	r2, [pc, #100]	; (800156c <HAL_DMA_IRQHandler+0x2ec>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00a      	beq.n	8001520 <HAL_DMA_IRQHandler+0x2a0>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a18      	ldr	r2, [pc, #96]	; (8001570 <HAL_DMA_IRQHandler+0x2f0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d102      	bne.n	800151a <HAL_DMA_IRQHandler+0x29a>
 8001514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001518:	e036      	b.n	8001588 <HAL_DMA_IRQHandler+0x308>
 800151a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800151e:	e033      	b.n	8001588 <HAL_DMA_IRQHandler+0x308>
 8001520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001524:	e030      	b.n	8001588 <HAL_DMA_IRQHandler+0x308>
 8001526:	2320      	movs	r3, #32
 8001528:	e02e      	b.n	8001588 <HAL_DMA_IRQHandler+0x308>
 800152a:	2302      	movs	r3, #2
 800152c:	e02c      	b.n	8001588 <HAL_DMA_IRQHandler+0x308>
 800152e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001532:	e029      	b.n	8001588 <HAL_DMA_IRQHandler+0x308>
 8001534:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001538:	e026      	b.n	8001588 <HAL_DMA_IRQHandler+0x308>
 800153a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800153e:	e023      	b.n	8001588 <HAL_DMA_IRQHandler+0x308>
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	e020      	b.n	8001588 <HAL_DMA_IRQHandler+0x308>
 8001546:	bf00      	nop
 8001548:	40020080 	.word	0x40020080
 800154c:	40020008 	.word	0x40020008
 8001550:	4002001c 	.word	0x4002001c
 8001554:	40020030 	.word	0x40020030
 8001558:	40020044 	.word	0x40020044
 800155c:	40020058 	.word	0x40020058
 8001560:	4002006c 	.word	0x4002006c
 8001564:	40020408 	.word	0x40020408
 8001568:	4002041c 	.word	0x4002041c
 800156c:	40020430 	.word	0x40020430
 8001570:	40020444 	.word	0x40020444
 8001574:	40020400 	.word	0x40020400
 8001578:	40020000 	.word	0x40020000
 800157c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001580:	e002      	b.n	8001588 <HAL_DMA_IRQHandler+0x308>
 8001582:	2320      	movs	r3, #32
 8001584:	e000      	b.n	8001588 <HAL_DMA_IRQHandler+0x308>
 8001586:	2302      	movs	r3, #2
 8001588:	4a4e      	ldr	r2, [pc, #312]	; (80016c4 <HAL_DMA_IRQHandler+0x444>)
 800158a:	6053      	str	r3, [r2, #4]
 800158c:	e057      	b.n	800163e <HAL_DMA_IRQHandler+0x3be>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a4d      	ldr	r2, [pc, #308]	; (80016c8 <HAL_DMA_IRQHandler+0x448>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d04f      	beq.n	8001638 <HAL_DMA_IRQHandler+0x3b8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a4b      	ldr	r2, [pc, #300]	; (80016cc <HAL_DMA_IRQHandler+0x44c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d048      	beq.n	8001634 <HAL_DMA_IRQHandler+0x3b4>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a4a      	ldr	r2, [pc, #296]	; (80016d0 <HAL_DMA_IRQHandler+0x450>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d040      	beq.n	800162e <HAL_DMA_IRQHandler+0x3ae>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a48      	ldr	r2, [pc, #288]	; (80016d4 <HAL_DMA_IRQHandler+0x454>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d038      	beq.n	8001628 <HAL_DMA_IRQHandler+0x3a8>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a47      	ldr	r2, [pc, #284]	; (80016d8 <HAL_DMA_IRQHandler+0x458>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d030      	beq.n	8001622 <HAL_DMA_IRQHandler+0x3a2>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a45      	ldr	r2, [pc, #276]	; (80016dc <HAL_DMA_IRQHandler+0x45c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d028      	beq.n	800161c <HAL_DMA_IRQHandler+0x39c>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a44      	ldr	r2, [pc, #272]	; (80016e0 <HAL_DMA_IRQHandler+0x460>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d020      	beq.n	8001616 <HAL_DMA_IRQHandler+0x396>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a42      	ldr	r2, [pc, #264]	; (80016e4 <HAL_DMA_IRQHandler+0x464>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_DMA_IRQHandler+0x392>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a41      	ldr	r2, [pc, #260]	; (80016e8 <HAL_DMA_IRQHandler+0x468>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d012      	beq.n	800160e <HAL_DMA_IRQHandler+0x38e>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <HAL_DMA_IRQHandler+0x46c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00a      	beq.n	8001608 <HAL_DMA_IRQHandler+0x388>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a3e      	ldr	r2, [pc, #248]	; (80016f0 <HAL_DMA_IRQHandler+0x470>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d102      	bne.n	8001602 <HAL_DMA_IRQHandler+0x382>
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	e01b      	b.n	800163a <HAL_DMA_IRQHandler+0x3ba>
 8001602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001606:	e018      	b.n	800163a <HAL_DMA_IRQHandler+0x3ba>
 8001608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160c:	e015      	b.n	800163a <HAL_DMA_IRQHandler+0x3ba>
 800160e:	2320      	movs	r3, #32
 8001610:	e013      	b.n	800163a <HAL_DMA_IRQHandler+0x3ba>
 8001612:	2302      	movs	r3, #2
 8001614:	e011      	b.n	800163a <HAL_DMA_IRQHandler+0x3ba>
 8001616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161a:	e00e      	b.n	800163a <HAL_DMA_IRQHandler+0x3ba>
 800161c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001620:	e00b      	b.n	800163a <HAL_DMA_IRQHandler+0x3ba>
 8001622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001626:	e008      	b.n	800163a <HAL_DMA_IRQHandler+0x3ba>
 8001628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162c:	e005      	b.n	800163a <HAL_DMA_IRQHandler+0x3ba>
 800162e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001632:	e002      	b.n	800163a <HAL_DMA_IRQHandler+0x3ba>
 8001634:	2320      	movs	r3, #32
 8001636:	e000      	b.n	800163a <HAL_DMA_IRQHandler+0x3ba>
 8001638:	2302      	movs	r3, #2
 800163a:	4a2e      	ldr	r2, [pc, #184]	; (80016f4 <HAL_DMA_IRQHandler+0x474>)
 800163c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	2b00      	cmp	r3, #0
 800164c:	d034      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001656:	e02f      	b.n	80016b8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	2208      	movs	r2, #8
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d028      	beq.n	80016ba <HAL_DMA_IRQHandler+0x43a>
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d023      	beq.n	80016ba <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 020e 	bic.w	r2, r2, #14
 8001680:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f202 	lsl.w	r2, r1, r2
 8001690:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
    }
  }
  return;
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
}
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40020008 	.word	0x40020008
 80016cc:	4002001c 	.word	0x4002001c
 80016d0:	40020030 	.word	0x40020030
 80016d4:	40020044 	.word	0x40020044
 80016d8:	40020058 	.word	0x40020058
 80016dc:	4002006c 	.word	0x4002006c
 80016e0:	40020080 	.word	0x40020080
 80016e4:	40020408 	.word	0x40020408
 80016e8:	4002041c 	.word	0x4002041c
 80016ec:	40020430 	.word	0x40020430
 80016f0:	40020444 	.word	0x40020444
 80016f4:	40020000 	.word	0x40020000

080016f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170e:	2101      	movs	r1, #1
 8001710:	fa01 f202 	lsl.w	r2, r1, r2
 8001714:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b10      	cmp	r3, #16
 8001724:	d108      	bne.n	8001738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001736:	e007      	b.n	8001748 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	60da      	str	r2, [r3, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
	...

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b08b      	sub	sp, #44	; 0x2c
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001766:	e133      	b.n	80019d0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001768:	2201      	movs	r2, #1
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	429a      	cmp	r2, r3
 8001782:	f040 8122 	bne.w	80019ca <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b12      	cmp	r3, #18
 800178c:	d034      	beq.n	80017f8 <HAL_GPIO_Init+0xa4>
 800178e:	2b12      	cmp	r3, #18
 8001790:	d80d      	bhi.n	80017ae <HAL_GPIO_Init+0x5a>
 8001792:	2b02      	cmp	r3, #2
 8001794:	d02b      	beq.n	80017ee <HAL_GPIO_Init+0x9a>
 8001796:	2b02      	cmp	r3, #2
 8001798:	d804      	bhi.n	80017a4 <HAL_GPIO_Init+0x50>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d031      	beq.n	8001802 <HAL_GPIO_Init+0xae>
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d01c      	beq.n	80017dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017a2:	e048      	b.n	8001836 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d043      	beq.n	8001830 <HAL_GPIO_Init+0xdc>
 80017a8:	2b11      	cmp	r3, #17
 80017aa:	d01b      	beq.n	80017e4 <HAL_GPIO_Init+0x90>
          break;
 80017ac:	e043      	b.n	8001836 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017ae:	4a8f      	ldr	r2, [pc, #572]	; (80019ec <HAL_GPIO_Init+0x298>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d026      	beq.n	8001802 <HAL_GPIO_Init+0xae>
 80017b4:	4a8d      	ldr	r2, [pc, #564]	; (80019ec <HAL_GPIO_Init+0x298>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d806      	bhi.n	80017c8 <HAL_GPIO_Init+0x74>
 80017ba:	4a8d      	ldr	r2, [pc, #564]	; (80019f0 <HAL_GPIO_Init+0x29c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d020      	beq.n	8001802 <HAL_GPIO_Init+0xae>
 80017c0:	4a8c      	ldr	r2, [pc, #560]	; (80019f4 <HAL_GPIO_Init+0x2a0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d01d      	beq.n	8001802 <HAL_GPIO_Init+0xae>
          break;
 80017c6:	e036      	b.n	8001836 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017c8:	4a8b      	ldr	r2, [pc, #556]	; (80019f8 <HAL_GPIO_Init+0x2a4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0xae>
 80017ce:	4a8b      	ldr	r2, [pc, #556]	; (80019fc <HAL_GPIO_Init+0x2a8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d016      	beq.n	8001802 <HAL_GPIO_Init+0xae>
 80017d4:	4a8a      	ldr	r2, [pc, #552]	; (8001a00 <HAL_GPIO_Init+0x2ac>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0xae>
          break;
 80017da:	e02c      	b.n	8001836 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e028      	b.n	8001836 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	3304      	adds	r3, #4
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e023      	b.n	8001836 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	3308      	adds	r3, #8
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e01e      	b.n	8001836 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	330c      	adds	r3, #12
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e019      	b.n	8001836 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800180a:	2304      	movs	r3, #4
 800180c:	623b      	str	r3, [r7, #32]
          break;
 800180e:	e012      	b.n	8001836 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001818:	2308      	movs	r3, #8
 800181a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	611a      	str	r2, [r3, #16]
          break;
 8001822:	e008      	b.n	8001836 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001824:	2308      	movs	r3, #8
 8001826:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	615a      	str	r2, [r3, #20]
          break;
 800182e:	e002      	b.n	8001836 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
          break;
 8001834:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2bff      	cmp	r3, #255	; 0xff
 800183a:	d801      	bhi.n	8001840 <HAL_GPIO_Init+0xec>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	e001      	b.n	8001844 <HAL_GPIO_Init+0xf0>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3304      	adds	r3, #4
 8001844:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2bff      	cmp	r3, #255	; 0xff
 800184a:	d802      	bhi.n	8001852 <HAL_GPIO_Init+0xfe>
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x104>
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	3b08      	subs	r3, #8
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	210f      	movs	r1, #15
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	401a      	ands	r2, r3
 800186a:	6a39      	ldr	r1, [r7, #32]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	431a      	orrs	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80a2 	beq.w	80019ca <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_GPIO_Init+0x2b0>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	4a5e      	ldr	r2, [pc, #376]	; (8001a04 <HAL_GPIO_Init+0x2b0>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6193      	str	r3, [r2, #24]
 8001892:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <HAL_GPIO_Init+0x2b0>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800189e:	4a5a      	ldr	r2, [pc, #360]	; (8001a08 <HAL_GPIO_Init+0x2b4>)
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4013      	ands	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a51      	ldr	r2, [pc, #324]	; (8001a0c <HAL_GPIO_Init+0x2b8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01f      	beq.n	800190a <HAL_GPIO_Init+0x1b6>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a50      	ldr	r2, [pc, #320]	; (8001a10 <HAL_GPIO_Init+0x2bc>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_GPIO_Init+0x1b2>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4f      	ldr	r2, [pc, #316]	; (8001a14 <HAL_GPIO_Init+0x2c0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x1ae>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <HAL_GPIO_Init+0x2c4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x1aa>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4d      	ldr	r2, [pc, #308]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x1a6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	; (8001a20 <HAL_GPIO_Init+0x2cc>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x1a2>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e00a      	b.n	800190c <HAL_GPIO_Init+0x1b8>
 80018f6:	2306      	movs	r3, #6
 80018f8:	e008      	b.n	800190c <HAL_GPIO_Init+0x1b8>
 80018fa:	2304      	movs	r3, #4
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x1b8>
 80018fe:	2303      	movs	r3, #3
 8001900:	e004      	b.n	800190c <HAL_GPIO_Init+0x1b8>
 8001902:	2302      	movs	r3, #2
 8001904:	e002      	b.n	800190c <HAL_GPIO_Init+0x1b8>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x1b8>
 800190a:	2300      	movs	r3, #0
 800190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190e:	f002 0203 	and.w	r2, r2, #3
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4093      	lsls	r3, r2
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800191c:	493a      	ldr	r1, [pc, #232]	; (8001a08 <HAL_GPIO_Init+0x2b4>)
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	493a      	ldr	r1, [pc, #232]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
 8001942:	e006      	b.n	8001952 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001944:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	43db      	mvns	r3, r3
 800194c:	4935      	ldr	r1, [pc, #212]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 800194e:	4013      	ands	r3, r2
 8001950:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4930      	ldr	r1, [pc, #192]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
 800196a:	e006      	b.n	800197a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	43db      	mvns	r3, r3
 8001974:	492b      	ldr	r1, [pc, #172]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 8001976:	4013      	ands	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	4926      	ldr	r1, [pc, #152]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
 8001992:	e006      	b.n	80019a2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	43db      	mvns	r3, r3
 800199c:	4921      	ldr	r1, [pc, #132]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 800199e:	4013      	ands	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	491c      	ldr	r1, [pc, #112]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60cb      	str	r3, [r1, #12]
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	4917      	ldr	r1, [pc, #92]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	3301      	adds	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f47f aec4 	bne.w	8001768 <HAL_GPIO_Init+0x14>
  }
}
 80019e0:	bf00      	nop
 80019e2:	372c      	adds	r7, #44	; 0x2c
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	10210000 	.word	0x10210000
 80019f0:	10110000 	.word	0x10110000
 80019f4:	10120000 	.word	0x10120000
 80019f8:	10310000 	.word	0x10310000
 80019fc:	10320000 	.word	0x10320000
 8001a00:	10220000 	.word	0x10220000
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	40010800 	.word	0x40010800
 8001a10:	40010c00 	.word	0x40010c00
 8001a14:	40011000 	.word	0x40011000
 8001a18:	40011400 	.word	0x40011400
 8001a1c:	40011800 	.word	0x40011800
 8001a20:	40011c00 	.word	0x40011c00
 8001a24:	40010400 	.word	0x40010400

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e26c      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8087 	beq.w	8001b56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a48:	4b92      	ldr	r3, [pc, #584]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d00c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a54:	4b8f      	ldr	r3, [pc, #572]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d112      	bne.n	8001a86 <HAL_RCC_OscConfig+0x5e>
 8001a60:	4b8c      	ldr	r3, [pc, #560]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d10b      	bne.n	8001a86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6e:	4b89      	ldr	r3, [pc, #548]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d06c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x12c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d168      	bne.n	8001b54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e246      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x76>
 8001a90:	4b80      	ldr	r3, [pc, #512]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a7f      	ldr	r2, [pc, #508]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e02e      	b.n	8001afc <HAL_RCC_OscConfig+0xd4>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x98>
 8001aa6:	4b7b      	ldr	r3, [pc, #492]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a7a      	ldr	r2, [pc, #488]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b78      	ldr	r3, [pc, #480]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a77      	ldr	r2, [pc, #476]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e01d      	b.n	8001afc <HAL_RCC_OscConfig+0xd4>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0xbc>
 8001aca:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a71      	ldr	r2, [pc, #452]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a6e      	ldr	r2, [pc, #440]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0xd4>
 8001ae4:	4b6b      	ldr	r3, [pc, #428]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a6a      	ldr	r2, [pc, #424]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b68      	ldr	r3, [pc, #416]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a67      	ldr	r2, [pc, #412]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff f8ba 	bl	8000c7c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff f8b6 	bl	8000c7c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1fa      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0xe4>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f8a6 	bl	8000c7c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff f8a2 	bl	8000c7c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e1e6      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x10c>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d063      	beq.n	8001c2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b62:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b6e:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d11c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x18c>
 8001b7a:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d116      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_RCC_OscConfig+0x176>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e1ba      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4939      	ldr	r1, [pc, #228]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	e03a      	b.n	8001c2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f85b 	bl	8000c7c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bca:	f7ff f857 	bl	8000c7c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e19b      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4927      	ldr	r1, [pc, #156]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
 8001bfc:	e015      	b.n	8001c2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_RCC_OscConfig+0x270>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff f83a 	bl	8000c7c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f836 	bl	8000c7c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e17a      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d03a      	beq.n	8001cac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d019      	beq.n	8001c72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c44:	f7ff f81a 	bl	8000c7c <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff f816 	bl	8000c7c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e15a      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f000 fb2a 	bl	80022c4 <RCC_Delay>
 8001c70:	e01c      	b.n	8001cac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c78:	f7ff f800 	bl	8000c7c <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7e:	e00f      	b.n	8001ca0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c80:	f7fe fffc 	bl	8000c7c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d908      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e140      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	42420000 	.word	0x42420000
 8001c9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca0:	4b9e      	ldr	r3, [pc, #632]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e9      	bne.n	8001c80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80a6 	beq.w	8001e06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cbe:	4b97      	ldr	r3, [pc, #604]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b94      	ldr	r3, [pc, #592]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a93      	ldr	r2, [pc, #588]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	61d3      	str	r3, [r2, #28]
 8001cd6:	4b91      	ldr	r3, [pc, #580]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d118      	bne.n	8001d24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf2:	4b8b      	ldr	r3, [pc, #556]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a8a      	ldr	r2, [pc, #552]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfe:	f7fe ffbd 	bl	8000c7c <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d06:	f7fe ffb9 	bl	8000c7c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b64      	cmp	r3, #100	; 0x64
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0fd      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	4b81      	ldr	r3, [pc, #516]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x312>
 8001d2c:	4b7b      	ldr	r3, [pc, #492]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a7a      	ldr	r2, [pc, #488]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	e02d      	b.n	8001d96 <HAL_RCC_OscConfig+0x36e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x334>
 8001d42:	4b76      	ldr	r3, [pc, #472]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4a75      	ldr	r2, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	6213      	str	r3, [r2, #32]
 8001d4e:	4b73      	ldr	r3, [pc, #460]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4a72      	ldr	r2, [pc, #456]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	f023 0304 	bic.w	r3, r3, #4
 8001d58:	6213      	str	r3, [r2, #32]
 8001d5a:	e01c      	b.n	8001d96 <HAL_RCC_OscConfig+0x36e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b05      	cmp	r3, #5
 8001d62:	d10c      	bne.n	8001d7e <HAL_RCC_OscConfig+0x356>
 8001d64:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4a6c      	ldr	r2, [pc, #432]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	f043 0304 	orr.w	r3, r3, #4
 8001d6e:	6213      	str	r3, [r2, #32]
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a69      	ldr	r2, [pc, #420]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6213      	str	r3, [r2, #32]
 8001d7c:	e00b      	b.n	8001d96 <HAL_RCC_OscConfig+0x36e>
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a66      	ldr	r2, [pc, #408]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a63      	ldr	r2, [pc, #396]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d015      	beq.n	8001dca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7fe ff6d 	bl	8000c7c <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7fe ff69 	bl	8000c7c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0ab      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	4b57      	ldr	r3, [pc, #348]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ee      	beq.n	8001da6 <HAL_RCC_OscConfig+0x37e>
 8001dc8:	e014      	b.n	8001df4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dca:	f7fe ff57 	bl	8000c7c <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd0:	e00a      	b.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f7fe ff53 	bl	8000c7c <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e095      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de8:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ee      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d105      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfa:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a47      	ldr	r2, [pc, #284]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8081 	beq.w	8001f12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e10:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d061      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d146      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e24:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <HAL_RCC_OscConfig+0x4fc>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7fe ff27 	bl	8000c7c <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e32:	f7fe ff23 	bl	8000c7c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e067      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e58:	d108      	bne.n	8001e6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	492d      	ldr	r1, [pc, #180]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6c:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a19      	ldr	r1, [r3, #32]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	4927      	ldr	r1, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_RCC_OscConfig+0x4fc>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fef7 	bl	8000c7c <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7fe fef3 	bl	8000c7c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e037      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x46a>
 8001eb0:	e02f      	b.n	8001f12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <HAL_RCC_OscConfig+0x4fc>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fee0 	bl	8000c7c <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe fedc 	bl	8000c7c <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e020      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x498>
 8001ede:	e018      	b.n	8001f12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e013      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40007000 	.word	0x40007000
 8001f24:	42420060 	.word	0x42420060

08001f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0d0      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d910      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b67      	ldr	r3, [pc, #412]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4965      	ldr	r1, [pc, #404]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0b8      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f84:	4b59      	ldr	r3, [pc, #356]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a58      	ldr	r2, [pc, #352]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a52      	ldr	r2, [pc, #328]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	494d      	ldr	r1, [pc, #308]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d040      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d115      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e07f      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e073      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e06b      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4936      	ldr	r1, [pc, #216]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7fe fe30 	bl	8000c7c <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7fe fe2c 	bl	8000c7c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e053      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d210      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4922      	ldr	r1, [pc, #136]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e032      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4916      	ldr	r1, [pc, #88]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	490e      	ldr	r1, [pc, #56]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b6:	f000 f82d 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80020ba:	4601      	mov	r1, r0
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	fa21 f303 	lsr.w	r3, r1, r3
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1cc>)
 80020d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fb78 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	0800336c 	.word	0x0800336c
 80020f4:	20000000 	.word	0x20000000
 80020f8:	20000218 	.word	0x20000218

080020fc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_RCC_EnableCSS+0x14>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	4242004c 	.word	0x4242004c

08002114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	b490      	push	{r4, r7}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800211c:	1d3c      	adds	r4, r7, #4
 800211e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002124:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800213e:	4b23      	ldr	r3, [pc, #140]	; (80021cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b04      	cmp	r3, #4
 800214c:	d002      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x40>
 800214e:	2b08      	cmp	r3, #8
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0x46>
 8002152:	e02d      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002156:	623b      	str	r3, [r7, #32]
      break;
 8002158:	e02d      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	0c9b      	lsrs	r3, r3, #18
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002166:	4413      	add	r3, r2
 8002168:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800216c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	0c5b      	lsrs	r3, r3, #17
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002186:	4413      	add	r3, r2
 8002188:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800218c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002192:	fb02 f203 	mul.w	r2, r2, r3
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
 800219e:	e004      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	623b      	str	r3, [r7, #32]
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021b2:	623b      	str	r3, [r7, #32]
      break;
 80021b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b6:	6a3b      	ldr	r3, [r7, #32]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc90      	pop	{r4, r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	08003358 	.word	0x08003358
 80021c8:	08003368 	.word	0x08003368
 80021cc:	40021000 	.word	0x40021000
 80021d0:	007a1200 	.word	0x007a1200
 80021d4:	003d0900 	.word	0x003d0900

080021d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b02      	ldr	r3, [pc, #8]	; (80021e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f0:	f7ff fff2 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f4:	4601      	mov	r1, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4a03      	ldr	r2, [pc, #12]	; (8002210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	0800337c 	.word	0x0800337c

08002214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002218:	f7ff ffde 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 800221c:	4601      	mov	r1, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	0adb      	lsrs	r3, r3, #11
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4a03      	ldr	r2, [pc, #12]	; (8002238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	0800337c 	.word	0x0800337c

0800223c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	220f      	movs	r2, #15
 800224a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_RCC_GetClockConfig+0x58>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_RCC_GetClockConfig+0x58>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_GetClockConfig+0x58>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_RCC_GetClockConfig+0x58>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_GetClockConfig+0x5c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0207 	and.w	r2, r3, #7
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40021000 	.word	0x40021000
 8002298:	40022000 	.word	0x40022000

0800229c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_NMI_IRQHandler+0x20>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a8:	2b80      	cmp	r3, #128	; 0x80
 80022aa:	d104      	bne.n	80022b6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80022ac:	f000 f828 	bl	8002300 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80022b2:	2280      	movs	r2, #128	; 0x80
 80022b4:	701a      	strb	r2, [r3, #0]
  }
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	4002100a 	.word	0x4002100a

080022c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <RCC_Delay+0x34>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <RCC_Delay+0x38>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0a5b      	lsrs	r3, r3, #9
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022e0:	bf00      	nop
  }
  while (Delay --);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1e5a      	subs	r2, r3, #1
 80022e6:	60fa      	str	r2, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f9      	bne.n	80022e0 <RCC_Delay+0x1c>
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000000 	.word	0x20000000
 80022fc:	10624dd3 	.word	0x10624dd3

08002300 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e041      	b.n	80023a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f839 	bl	80023aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f000 f9c2 	bl	80026d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d001      	beq.n	80023d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e044      	b.n	800245e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <HAL_TIM_Base_Start_IT+0xac>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d018      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x6c>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1c      	ldr	r2, [pc, #112]	; (800246c <HAL_TIM_Base_Start_IT+0xb0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x6c>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d00e      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x6c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a18      	ldr	r2, [pc, #96]	; (8002470 <HAL_TIM_Base_Start_IT+0xb4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d009      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x6c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a16      	ldr	r2, [pc, #88]	; (8002474 <HAL_TIM_Base_Start_IT+0xb8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d004      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x6c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a15      	ldr	r2, [pc, #84]	; (8002478 <HAL_TIM_Base_Start_IT+0xbc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d111      	bne.n	800244c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b06      	cmp	r3, #6
 8002438:	d010      	beq.n	800245c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244a:	e007      	b.n	800245c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	40012c00 	.word	0x40012c00
 800246c:	40013400 	.word	0x40013400
 8002470:	40000400 	.word	0x40000400
 8002474:	40000800 	.word	0x40000800
 8002478:	40000c00 	.word	0x40000c00

0800247c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b02      	cmp	r3, #2
 8002490:	d122      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b02      	cmp	r3, #2
 800249e:	d11b      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0202 	mvn.w	r2, #2
 80024a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8ed 	bl	800269e <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8e0 	bl	800268c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8ef 	bl	80026b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0204 	mvn.w	r2, #4
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2202      	movs	r2, #2
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f8c3 	bl	800269e <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8b6 	bl	800268c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8c5 	bl	80026b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b08      	cmp	r3, #8
 8002538:	d122      	bne.n	8002580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b08      	cmp	r3, #8
 8002546:	d11b      	bne.n	8002580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0208 	mvn.w	r2, #8
 8002550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2204      	movs	r2, #4
 8002556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f899 	bl	800269e <HAL_TIM_IC_CaptureCallback>
 800256c:	e005      	b.n	800257a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f88c 	bl	800268c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f89b 	bl	80026b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b10      	cmp	r3, #16
 800258c:	d122      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b10      	cmp	r3, #16
 800259a:	d11b      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0210 	mvn.w	r2, #16
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2208      	movs	r2, #8
 80025aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f86f 	bl	800269e <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f862 	bl	800268c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f871 	bl	80026b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10e      	bne.n	8002600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0201 	mvn.w	r2, #1
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe f89c 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260a:	2b80      	cmp	r3, #128	; 0x80
 800260c:	d10e      	bne.n	800262c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d107      	bne.n	800262c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8d7 	bl	80027da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b40      	cmp	r3, #64	; 0x40
 8002638:	d10e      	bne.n	8002658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d107      	bne.n	8002658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f835 	bl	80026c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b20      	cmp	r3, #32
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b20      	cmp	r3, #32
 8002672:	d107      	bne.n	8002684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0220 	mvn.w	r2, #32
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f8a2 	bl	80027c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a33      	ldr	r2, [pc, #204]	; (80027b4 <TIM_Base_SetConfig+0xe0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d013      	beq.n	8002714 <TIM_Base_SetConfig+0x40>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a32      	ldr	r2, [pc, #200]	; (80027b8 <TIM_Base_SetConfig+0xe4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00f      	beq.n	8002714 <TIM_Base_SetConfig+0x40>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fa:	d00b      	beq.n	8002714 <TIM_Base_SetConfig+0x40>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a2f      	ldr	r2, [pc, #188]	; (80027bc <TIM_Base_SetConfig+0xe8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d007      	beq.n	8002714 <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a2e      	ldr	r2, [pc, #184]	; (80027c0 <TIM_Base_SetConfig+0xec>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d003      	beq.n	8002714 <TIM_Base_SetConfig+0x40>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a2d      	ldr	r2, [pc, #180]	; (80027c4 <TIM_Base_SetConfig+0xf0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d108      	bne.n	8002726 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a22      	ldr	r2, [pc, #136]	; (80027b4 <TIM_Base_SetConfig+0xe0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <TIM_Base_SetConfig+0x82>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a21      	ldr	r2, [pc, #132]	; (80027b8 <TIM_Base_SetConfig+0xe4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00f      	beq.n	8002756 <TIM_Base_SetConfig+0x82>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d00b      	beq.n	8002756 <TIM_Base_SetConfig+0x82>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <TIM_Base_SetConfig+0xe8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <TIM_Base_SetConfig+0x82>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1d      	ldr	r2, [pc, #116]	; (80027c0 <TIM_Base_SetConfig+0xec>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d003      	beq.n	8002756 <TIM_Base_SetConfig+0x82>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <TIM_Base_SetConfig+0xf0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d108      	bne.n	8002768 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <TIM_Base_SetConfig+0xe0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d003      	beq.n	800279c <TIM_Base_SetConfig+0xc8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <TIM_Base_SetConfig+0xe4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d103      	bne.n	80027a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	615a      	str	r2, [r3, #20]
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40013400 	.word	0x40013400
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800
 80027c4:	40000c00 	.word	0x40000c00

080027c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e03f      	b.n	800287e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe f8b6 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2224      	movs	r2, #36	; 0x24
 800281c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800282e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fcbf 	bl	80031b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b08a      	sub	sp, #40	; 0x28
 800288a:	af02      	add	r7, sp, #8
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d17c      	bne.n	80029a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_UART_Transmit+0x2c>
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e075      	b.n	80029a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_UART_Transmit+0x3e>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e06e      	b.n	80029a2 <HAL_UART_Transmit+0x11c>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2221      	movs	r2, #33	; 0x21
 80028d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028da:	f7fe f9cf 	bl	8000c7c <HAL_GetTick>
 80028de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	88fa      	ldrh	r2, [r7, #6]
 80028e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	88fa      	ldrh	r2, [r7, #6]
 80028ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f4:	d108      	bne.n	8002908 <HAL_UART_Transmit+0x82>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	e003      	b.n	8002910 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002918:	e02a      	b.n	8002970 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 facd 	bl	8002ec4 <UART_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e036      	b.n	80029a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10b      	bne.n	8002952 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002948:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	3302      	adds	r3, #2
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	e007      	b.n	8002962 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	3301      	adds	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1cf      	bne.n	800291a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	2140      	movs	r1, #64	; 0x40
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fa9d 	bl	8002ec4 <UART_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e006      	b.n	80029a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	e000      	b.n	80029a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	4613      	mov	r3, r2
 80029b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d166      	bne.n	8002a94 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_UART_Receive_DMA+0x26>
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e05f      	b.n	8002a96 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_UART_Receive_DMA+0x38>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e058      	b.n	8002a96 <HAL_UART_Receive_DMA+0xea>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2222      	movs	r2, #34	; 0x22
 8002a02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <HAL_UART_Receive_DMA+0xf4>)
 8002a0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <HAL_UART_Receive_DMA+0xf8>)
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1a:	4a23      	ldr	r2, [pc, #140]	; (8002aa8 <HAL_UART_Receive_DMA+0xfc>)
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	2200      	movs	r2, #0
 8002a24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8002a26:	f107 0308 	add.w	r3, r7, #8
 8002a2a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3304      	adds	r3, #4
 8002a36:	4619      	mov	r1, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	f7fe fa7d 	bl	8000f3c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a8e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	08002dad 	.word	0x08002dad
 8002aa4:	08002e15 	.word	0x08002e15
 8002aa8:	08002e31 	.word	0x08002e31

08002aac <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bf14      	ite	ne
 8002ac6:	2301      	movne	r3, #1
 8002ac8:	2300      	moveq	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b21      	cmp	r3, #33	; 0x21
 8002ad8:	d116      	bne.n	8002b08 <HAL_UART_DMAStop+0x5c>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aee:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d004      	beq.n	8002b02 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fa7c 	bl	8000ffa <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fa28 	bl	8002f58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b22      	cmp	r3, #34	; 0x22
 8002b28:	d116      	bne.n	8002b58 <HAL_UART_DMAStop+0xac>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe fa54 	bl	8000ffa <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fa15 	bl	8002f82 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10d      	bne.n	8002bb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x52>
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fa7f 	bl	80030b2 <UART_Receive_IT>
      return;
 8002bb4:	e0d1      	b.n	8002d5a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80b0 	beq.w	8002d1e <HAL_UART_IRQHandler+0x1ba>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <HAL_UART_IRQHandler+0x70>
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80a5 	beq.w	8002d1e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x90>
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	f043 0201 	orr.w	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_UART_IRQHandler+0xb0>
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	f043 0202 	orr.w	r2, r3, #2
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_UART_IRQHandler+0xd0>
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2c:	f043 0204 	orr.w	r2, r3, #4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00f      	beq.n	8002c5e <HAL_UART_IRQHandler+0xfa>
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d104      	bne.n	8002c52 <HAL_UART_IRQHandler+0xee>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	f043 0208 	orr.w	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d078      	beq.n	8002d58 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <HAL_UART_IRQHandler+0x11c>
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fa19 	bl	80030b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf14      	ite	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	2300      	moveq	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d102      	bne.n	8002ca8 <HAL_UART_IRQHandler+0x144>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d031      	beq.n	8002d0c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f96a 	bl	8002f82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d023      	beq.n	8002d04 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd8:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <HAL_UART_IRQHandler+0x1fc>)
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe f9c5 	bl	8001070 <HAL_DMA_Abort_IT>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d016      	beq.n	8002d1a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfa:	e00e      	b.n	8002d1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f84c 	bl	8002d9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d02:	e00a      	b.n	8002d1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f848 	bl	8002d9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0a:	e006      	b.n	8002d1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f844 	bl	8002d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002d18:	e01e      	b.n	8002d58 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1a:	bf00      	nop
    return;
 8002d1c:	e01c      	b.n	8002d58 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_UART_IRQHandler+0x1d6>
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f956 	bl	8002fe4 <UART_Transmit_IT>
    return;
 8002d38:	e00f      	b.n	8002d5a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_UART_IRQHandler+0x1f6>
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f997 	bl	8003082 <UART_EndTransmit_IT>
    return;
 8002d54:	bf00      	nop
 8002d56:	e000      	b.n	8002d5a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002d58:	bf00      	nop
  }
}
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	08002fbd 	.word	0x08002fbd

08002d64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11e      	bne.n	8002e06 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ddc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff ffb5 	bl	8002d76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff ffb0 	bl	8002d88 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b21      	cmp	r3, #33	; 0x21
 8002e62:	d108      	bne.n	8002e76 <UART_DMAError+0x46>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002e70:	68b8      	ldr	r0, [r7, #8]
 8002e72:	f000 f871 	bl	8002f58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b22      	cmp	r3, #34	; 0x22
 8002e96:	d108      	bne.n	8002eaa <UART_DMAError+0x7a>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ea4:	68b8      	ldr	r0, [r7, #8]
 8002ea6:	f000 f86c 	bl	8002f82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	f043 0210 	orr.w	r2, r3, #16
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eb6:	68b8      	ldr	r0, [r7, #8]
 8002eb8:	f7ff ff6f 	bl	8002d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed4:	e02c      	b.n	8002f30 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d028      	beq.n	8002f30 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ee4:	f7fd feca 	bl	8000c7c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d21d      	bcs.n	8002f30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f02:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e00f      	b.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d0c3      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002f6e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f98:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff fedf 	bl	8002d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b21      	cmp	r3, #33	; 0x21
 8002ff6:	d13e      	bne.n	8003076 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003000:	d114      	bne.n	800302c <UART_Transmit_IT+0x48>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d110      	bne.n	800302c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800301e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	1c9a      	adds	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	621a      	str	r2, [r3, #32]
 800302a:	e008      	b.n	800303e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	1c59      	adds	r1, r3, #1
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6211      	str	r1, [r2, #32]
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29b      	uxth	r3, r3
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	4619      	mov	r1, r3
 800304c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003060:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003070:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003076:	2302      	movs	r3, #2
  }
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003098:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff fe5e 	bl	8002d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b22      	cmp	r3, #34	; 0x22
 80030c4:	d170      	bne.n	80031a8 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ce:	d117      	bne.n	8003100 <UART_Receive_IT+0x4e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d113      	bne.n	8003100 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	1c9a      	adds	r2, r3, #2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
 80030fe:	e026      	b.n	800314e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003112:	d007      	beq.n	8003124 <UART_Receive_IT+0x72>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <UART_Receive_IT+0x80>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e008      	b.n	8003144 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800313e:	b2da      	uxtb	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29b      	uxth	r3, r3
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4619      	mov	r1, r3
 800315c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800315e:	2b00      	cmp	r3, #0
 8003160:	d120      	bne.n	80031a4 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0220 	bic.w	r2, r2, #32
 8003170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fdeb 	bl	8002d76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e002      	b.n	80031aa <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ee:	f023 030c 	bic.w	r3, r3, #12
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2c      	ldr	r2, [pc, #176]	; (80032c8 <UART_SetConfig+0x114>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7fe fffa 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	e002      	b.n	800322a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003224:	f7fe ffe2 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8003228:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009a      	lsls	r2, r3, #2
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	4a22      	ldr	r2, [pc, #136]	; (80032cc <UART_SetConfig+0x118>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	0119      	lsls	r1, r3, #4
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003260:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <UART_SetConfig+0x118>)
 8003262:	fba3 0302 	umull	r0, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2064      	movs	r0, #100	; 0x64
 800326a:	fb00 f303 	mul.w	r3, r0, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	; 0x32
 8003274:	4a15      	ldr	r2, [pc, #84]	; (80032cc <UART_SetConfig+0x118>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003280:	4419      	add	r1, r3
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009a      	lsls	r2, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fbb2 f2f3 	udiv	r2, r2, r3
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <UART_SetConfig+0x118>)
 800329a:	fba3 0302 	umull	r0, r3, r3, r2
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2064      	movs	r0, #100	; 0x64
 80032a2:	fb00 f303 	mul.w	r3, r0, r3
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	3332      	adds	r3, #50	; 0x32
 80032ac:	4a07      	ldr	r2, [pc, #28]	; (80032cc <UART_SetConfig+0x118>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	f003 020f 	and.w	r2, r3, #15
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	440a      	add	r2, r1
 80032be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40013800 	.word	0x40013800
 80032cc:	51eb851f 	.word	0x51eb851f

080032d0 <__libc_init_array>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	2500      	movs	r5, #0
 80032d4:	4e0c      	ldr	r6, [pc, #48]	; (8003308 <__libc_init_array+0x38>)
 80032d6:	4c0d      	ldr	r4, [pc, #52]	; (800330c <__libc_init_array+0x3c>)
 80032d8:	1ba4      	subs	r4, r4, r6
 80032da:	10a4      	asrs	r4, r4, #2
 80032dc:	42a5      	cmp	r5, r4
 80032de:	d109      	bne.n	80032f4 <__libc_init_array+0x24>
 80032e0:	f000 f82e 	bl	8003340 <_init>
 80032e4:	2500      	movs	r5, #0
 80032e6:	4e0a      	ldr	r6, [pc, #40]	; (8003310 <__libc_init_array+0x40>)
 80032e8:	4c0a      	ldr	r4, [pc, #40]	; (8003314 <__libc_init_array+0x44>)
 80032ea:	1ba4      	subs	r4, r4, r6
 80032ec:	10a4      	asrs	r4, r4, #2
 80032ee:	42a5      	cmp	r5, r4
 80032f0:	d105      	bne.n	80032fe <__libc_init_array+0x2e>
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032f8:	4798      	blx	r3
 80032fa:	3501      	adds	r5, #1
 80032fc:	e7ee      	b.n	80032dc <__libc_init_array+0xc>
 80032fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003302:	4798      	blx	r3
 8003304:	3501      	adds	r5, #1
 8003306:	e7f2      	b.n	80032ee <__libc_init_array+0x1e>
 8003308:	08003384 	.word	0x08003384
 800330c:	08003384 	.word	0x08003384
 8003310:	08003384 	.word	0x08003384
 8003314:	08003388 	.word	0x08003388

08003318 <memcpy>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e43      	subs	r3, r0, #1
 800331c:	440a      	add	r2, r1
 800331e:	4291      	cmp	r1, r2
 8003320:	d100      	bne.n	8003324 <memcpy+0xc>
 8003322:	bd10      	pop	{r4, pc}
 8003324:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003328:	f803 4f01 	strb.w	r4, [r3, #1]!
 800332c:	e7f7      	b.n	800331e <memcpy+0x6>

0800332e <memset>:
 800332e:	4603      	mov	r3, r0
 8003330:	4402      	add	r2, r0
 8003332:	4293      	cmp	r3, r2
 8003334:	d100      	bne.n	8003338 <memset+0xa>
 8003336:	4770      	bx	lr
 8003338:	f803 1b01 	strb.w	r1, [r3], #1
 800333c:	e7f9      	b.n	8003332 <memset+0x4>
	...

08003340 <_init>:
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003342:	bf00      	nop
 8003344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003346:	bc08      	pop	{r3}
 8003348:	469e      	mov	lr, r3
 800334a:	4770      	bx	lr

0800334c <_fini>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	bf00      	nop
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr
