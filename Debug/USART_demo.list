
USART_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003194  08003194  00013194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003270  08003270  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003270  08003270  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003270  08003270  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  080032e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080032e8  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc7e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022df  00000000  00000000  0002dd17  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  0002fff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  00030cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b3d2  00000000  00000000  000318d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b4f3  00000000  00000000  0004cca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c271  00000000  00000000  00058195  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf4  00000000  00000000  000f4484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	0800317c 	.word	0x0800317c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	0800317c 	.word	0x0800317c

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <MX_GPIO_Init+0x70>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a19      	ldr	r2, [pc, #100]	; (8000294 <MX_GPIO_Init+0x70>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b17      	ldr	r3, [pc, #92]	; (8000294 <MX_GPIO_Init+0x70>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0310 	and.w	r3, r3, #16
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <MX_GPIO_Init+0x70>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a13      	ldr	r2, [pc, #76]	; (8000294 <MX_GPIO_Init+0x70>)
 8000248:	f043 0320 	orr.w	r3, r3, #32
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_GPIO_Init+0x70>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0320 	and.w	r3, r3, #32
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_GPIO_Init+0x70>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <MX_GPIO_Init+0x70>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_GPIO_Init+0x70>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0304 	and.w	r3, r3, #4
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <MX_GPIO_Init+0x70>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <MX_GPIO_Init+0x70>)
 8000278:	f043 0308 	orr.w	r3, r3, #8
 800027c:	6193      	str	r3, [r2, #24]
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <MX_GPIO_Init+0x70>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f003 0308 	and.w	r3, r3, #8
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40021000 	.word	0x40021000

08000298 <kfifo_unused>:

/*
 * internal helper to calculate the unused elements in a fifo
 */
static inline unsigned int kfifo_unused(struct __kfifo *fifo)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	return (fifo->mask + 1) - (fifo->in - fifo->out);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689a      	ldr	r2, [r3, #8]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	6859      	ldr	r1, [r3, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	1acb      	subs	r3, r1, r3
 80002ae:	4413      	add	r3, r2
 80002b0:	3301      	adds	r3, #1
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <kfifo_copy_in>:
}
// EXPORT_SYMBOL(__kfifo_init);

static void kfifo_copy_in(struct __kfifo *fifo, const void *src,
		unsigned int len, unsigned int off)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08a      	sub	sp, #40	; 0x28
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
 80002c8:	603b      	str	r3, [r7, #0]
	unsigned int size = fifo->mask + 1;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	3301      	adds	r3, #1
 80002d0:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int esize = fifo->esize;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	623b      	str	r3, [r7, #32]
	unsigned int l;

	off &= fifo->mask;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	683a      	ldr	r2, [r7, #0]
 80002de:	4013      	ands	r3, r2
 80002e0:	603b      	str	r3, [r7, #0]
	if (esize != 1) {
 80002e2:	6a3b      	ldr	r3, [r7, #32]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d00e      	beq.n	8000306 <kfifo_copy_in+0x4a>
		off *= esize;
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	6a3a      	ldr	r2, [r7, #32]
 80002ec:	fb02 f303 	mul.w	r3, r2, r3
 80002f0:	603b      	str	r3, [r7, #0]
		size *= esize;
 80002f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f4:	6a3a      	ldr	r2, [r7, #32]
 80002f6:	fb02 f303 	mul.w	r3, r2, r3
 80002fa:	627b      	str	r3, [r7, #36]	; 0x24
		len *= esize;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	6a3a      	ldr	r2, [r7, #32]
 8000300:	fb02 f303 	mul.w	r3, r2, r3
 8000304:	607b      	str	r3, [r7, #4]
	}
	l = min(len, size - off);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	61bb      	str	r3, [r7, #24]
 800030a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	1ad3      	subs	r3, r2, r3
 8000310:	617b      	str	r3, [r7, #20]
 8000312:	697a      	ldr	r2, [r7, #20]
 8000314:	69bb      	ldr	r3, [r7, #24]
 8000316:	4293      	cmp	r3, r2
 8000318:	bf28      	it	cs
 800031a:	4613      	movcs	r3, r2
 800031c:	61fb      	str	r3, [r7, #28]

	memcpy(fifo->data + off, src, l);
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	691a      	ldr	r2, [r3, #16]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	4413      	add	r3, r2
 8000326:	69fa      	ldr	r2, [r7, #28]
 8000328:	68b9      	ldr	r1, [r7, #8]
 800032a:	4618      	mov	r0, r3
 800032c:	f002 f824 	bl	8002378 <memcpy>
	memcpy(fifo->data, src + l, len - l);
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	6918      	ldr	r0, [r3, #16]
 8000334:	68ba      	ldr	r2, [r7, #8]
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	18d1      	adds	r1, r2, r3
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	1ad3      	subs	r3, r2, r3
 8000340:	461a      	mov	r2, r3
 8000342:	f002 f819 	bl	8002378 <memcpy>
	/*
	 * make sure that the data in the fifo is up to date before
	 * incrementing the fifo->in index counter
	 */
	smp_wmb();
 8000346:	f3bf 8f5b 	dmb	ish
}
 800034a:	bf00      	nop
 800034c:	3728      	adds	r7, #40	; 0x28
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}

08000352 <__kfifo_in>:

unsigned int __kfifo_in(struct __kfifo *fifo,
		const void *buf, unsigned int len)
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b086      	sub	sp, #24
 8000356:	af00      	add	r7, sp, #0
 8000358:	60f8      	str	r0, [r7, #12]
 800035a:	60b9      	str	r1, [r7, #8]
 800035c:	607a      	str	r2, [r7, #4]
	unsigned int l;

	l = kfifo_unused(fifo);
 800035e:	68f8      	ldr	r0, [r7, #12]
 8000360:	f7ff ff9a 	bl	8000298 <kfifo_unused>
 8000364:	6178      	str	r0, [r7, #20]
	if (len > l)
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	429a      	cmp	r2, r3
 800036c:	d901      	bls.n	8000372 <__kfifo_in+0x20>
		len = l;
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	607b      	str	r3, [r7, #4]

	kfifo_copy_in(fifo, buf, len, fifo->in);
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	68b9      	ldr	r1, [r7, #8]
 800037a:	68f8      	ldr	r0, [r7, #12]
 800037c:	f7ff ff9e 	bl	80002bc <kfifo_copy_in>
	fifo->in += len;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	441a      	add	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	601a      	str	r2, [r3, #0]
	return len;
 800038c:	687b      	ldr	r3, [r7, #4]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <kfifo_copy_out>:
// EXPORT_SYMBOL(__kfifo_in);

static void kfifo_copy_out(struct __kfifo *fifo, void *dst,
		unsigned int len, unsigned int off)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b08a      	sub	sp, #40	; 0x28
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
 80003a2:	603b      	str	r3, [r7, #0]
	unsigned int size = fifo->mask + 1;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	3301      	adds	r3, #1
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int esize = fifo->esize;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	623b      	str	r3, [r7, #32]
	unsigned int l;

	off &= fifo->mask;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	683a      	ldr	r2, [r7, #0]
 80003b8:	4013      	ands	r3, r2
 80003ba:	603b      	str	r3, [r7, #0]
	if (esize != 1) {
 80003bc:	6a3b      	ldr	r3, [r7, #32]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d00e      	beq.n	80003e0 <kfifo_copy_out+0x4a>
		off *= esize;
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	6a3a      	ldr	r2, [r7, #32]
 80003c6:	fb02 f303 	mul.w	r3, r2, r3
 80003ca:	603b      	str	r3, [r7, #0]
		size *= esize;
 80003cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ce:	6a3a      	ldr	r2, [r7, #32]
 80003d0:	fb02 f303 	mul.w	r3, r2, r3
 80003d4:	627b      	str	r3, [r7, #36]	; 0x24
		len *= esize;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	6a3a      	ldr	r2, [r7, #32]
 80003da:	fb02 f303 	mul.w	r3, r2, r3
 80003de:	607b      	str	r3, [r7, #4]
	}
	l = min(len, size - off);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	61bb      	str	r3, [r7, #24]
 80003e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	697a      	ldr	r2, [r7, #20]
 80003ee:	69bb      	ldr	r3, [r7, #24]
 80003f0:	4293      	cmp	r3, r2
 80003f2:	bf28      	it	cs
 80003f4:	4613      	movcs	r3, r2
 80003f6:	61fb      	str	r3, [r7, #28]

	memcpy(dst, fifo->data + off, l);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	691a      	ldr	r2, [r3, #16]
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	4413      	add	r3, r2
 8000400:	69fa      	ldr	r2, [r7, #28]
 8000402:	4619      	mov	r1, r3
 8000404:	68b8      	ldr	r0, [r7, #8]
 8000406:	f001 ffb7 	bl	8002378 <memcpy>
	memcpy(dst + l, fifo->data, len - l);
 800040a:	68ba      	ldr	r2, [r7, #8]
 800040c:	69fb      	ldr	r3, [r7, #28]
 800040e:	18d0      	adds	r0, r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	6919      	ldr	r1, [r3, #16]
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	461a      	mov	r2, r3
 800041c:	f001 ffac 	bl	8002378 <memcpy>
	/*
	 * make sure that the data is copied before
	 * incrementing the fifo->out index counter
	 */
	smp_wmb();
 8000420:	f3bf 8f5b 	dmb	ish
}
 8000424:	bf00      	nop
 8000426:	3728      	adds	r7, #40	; 0x28
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <__kfifo_out_peek>:

unsigned int __kfifo_out_peek(struct __kfifo *fifo,
		void *buf, unsigned int len)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
	unsigned int l;

	l = fifo->in - fifo->out;
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	617b      	str	r3, [r7, #20]
	if (len > l)
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	429a      	cmp	r2, r3
 800044a:	d901      	bls.n	8000450 <__kfifo_out_peek+0x24>
		len = l;
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	607b      	str	r3, [r7, #4]

	kfifo_copy_out(fifo, buf, len, fifo->out);
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	68b9      	ldr	r1, [r7, #8]
 8000458:	68f8      	ldr	r0, [r7, #12]
 800045a:	f7ff ff9c 	bl	8000396 <kfifo_copy_out>
	return len;
 800045e:	687b      	ldr	r3, [r7, #4]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3718      	adds	r7, #24
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <__kfifo_out>:
// EXPORT_SYMBOL(__kfifo_out_peek);

unsigned int __kfifo_out(struct __kfifo *fifo,
		void *buf, unsigned int len)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
	len = __kfifo_out_peek(fifo, buf, len);
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	68b9      	ldr	r1, [r7, #8]
 8000478:	68f8      	ldr	r0, [r7, #12]
 800047a:	f7ff ffd7 	bl	800042c <__kfifo_out_peek>
 800047e:	6078      	str	r0, [r7, #4]
	fifo->out += len;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	685a      	ldr	r2, [r3, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	441a      	add	r2, r3
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	605a      	str	r2, [r3, #4]
	return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <__kfifo_peek_n>:
/*
 * __kfifo_peek_n internal helper function for determinate the length of
 * the next record in the fifo
 */
static unsigned int __kfifo_peek_n(struct __kfifo *fifo, size_t recsize)
{
 8000496:	b480      	push	{r7}
 8000498:	b087      	sub	sp, #28
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	6039      	str	r1, [r7, #0]
	unsigned int l;
	unsigned int mask = fifo->mask;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	613b      	str	r3, [r7, #16]
	unsigned char *data = fifo->data;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	691b      	ldr	r3, [r3, #16]
 80004aa:	60fb      	str	r3, [r7, #12]

	l = __KFIFO_PEEK(data, fifo->out, mask);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	685a      	ldr	r2, [r3, #4]
 80004b0:	693b      	ldr	r3, [r7, #16]
 80004b2:	4013      	ands	r3, r2
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	4413      	add	r3, r2
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	617b      	str	r3, [r7, #20]

	if (--recsize)
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	3b01      	subs	r3, #1
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d00c      	beq.n	80004e2 <__kfifo_peek_n+0x4c>
		l |= __KFIFO_PEEK(data, fifo->out + 1, mask) << 8;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	4013      	ands	r3, r2
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	4413      	add	r3, r2
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	021b      	lsls	r3, r3, #8
 80004da:	461a      	mov	r2, r3
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	4313      	orrs	r3, r2
 80004e0:	617b      	str	r3, [r7, #20]

	return l;
 80004e2:	697b      	ldr	r3, [r7, #20]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	371c      	adds	r7, #28
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <__kfifo_poke_n>:
/*
 * __kfifo_poke_n internal helper function for storeing the length of
 * the record into the fifo
 */
static void __kfifo_poke_n(struct __kfifo *fifo, unsigned int n, size_t recsize)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b087      	sub	sp, #28
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	60b9      	str	r1, [r7, #8]
 80004f8:	607a      	str	r2, [r7, #4]
	unsigned int mask = fifo->mask;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	617b      	str	r3, [r7, #20]
	unsigned char *data = fifo->data;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	691b      	ldr	r3, [r3, #16]
 8000504:	613b      	str	r3, [r7, #16]

	__KFIFO_POKE(data, fifo->in, mask, n);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	4013      	ands	r3, r2
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	4413      	add	r3, r2
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	701a      	strb	r2, [r3, #0]

	if (recsize > 1)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d90a      	bls.n	8000534 <__kfifo_poke_n+0x46>
		__KFIFO_POKE(data, fifo->in + 1, mask, n >> 8);
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	0a19      	lsrs	r1, r3, #8
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	4013      	ands	r3, r2
 800052c:	693a      	ldr	r2, [r7, #16]
 800052e:	4413      	add	r3, r2
 8000530:	b2ca      	uxtb	r2, r1
 8000532:	701a      	strb	r2, [r3, #0]
}
 8000534:	bf00      	nop
 8000536:	371c      	adds	r7, #28
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <__kfifo_in_r>:
}
// EXPORT_SYMBOL(__kfifo_len_r);

unsigned int __kfifo_in_r(struct __kfifo *fifo, const void *buf,
		unsigned int len, size_t recsize)
{
 800053e:	b590      	push	{r4, r7, lr}
 8000540:	b085      	sub	sp, #20
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
 800054a:	603b      	str	r3, [r7, #0]
	if (len + recsize > kfifo_unused(fifo))
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	18d4      	adds	r4, r2, r3
 8000552:	68f8      	ldr	r0, [r7, #12]
 8000554:	f7ff fea0 	bl	8000298 <kfifo_unused>
 8000558:	4603      	mov	r3, r0
 800055a:	429c      	cmp	r4, r3
 800055c:	d901      	bls.n	8000562 <__kfifo_in_r+0x24>
		return 0;
 800055e:	2300      	movs	r3, #0
 8000560:	e016      	b.n	8000590 <__kfifo_in_r+0x52>

	__kfifo_poke_n(fifo, len, recsize);
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f7ff ffc1 	bl	80004ee <__kfifo_poke_n>

	kfifo_copy_in(fifo, buf, len, fifo->in + recsize);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	4413      	add	r3, r2
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	68b9      	ldr	r1, [r7, #8]
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f7ff fe9f 	bl	80002bc <kfifo_copy_in>
	fifo->in += len + recsize;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	440b      	add	r3, r1
 8000588:	441a      	add	r2, r3
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	601a      	str	r2, [r3, #0]
	return len;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bd90      	pop	{r4, r7, pc}

08000598 <kfifo_out_copy_r>:
// EXPORT_SYMBOL(__kfifo_in_r);

static unsigned int kfifo_out_copy_r(struct __kfifo *fifo,
	void *buf, unsigned int len, size_t recsize, unsigned int *n)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	603b      	str	r3, [r7, #0]
	*n = __kfifo_peek_n(fifo, recsize);
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	68f8      	ldr	r0, [r7, #12]
 80005aa:	f7ff ff74 	bl	8000496 <__kfifo_peek_n>
 80005ae:	4602      	mov	r2, r0
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	601a      	str	r2, [r3, #0]

	if (len > *n)
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d902      	bls.n	80005c4 <kfifo_out_copy_r+0x2c>
		len = *n;
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	607b      	str	r3, [r7, #4]

	kfifo_copy_out(fifo, buf, len, fifo->out + recsize);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	68b9      	ldr	r1, [r7, #8]
 80005d0:	68f8      	ldr	r0, [r7, #12]
 80005d2:	f7ff fee0 	bl	8000396 <kfifo_copy_out>
	return len;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <__kfifo_out_r>:
}
// EXPORT_SYMBOL(__kfifo_out_peek_r);

unsigned int __kfifo_out_r(struct __kfifo *fifo, void *buf,
		unsigned int len, size_t recsize)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
 80005ec:	603b      	str	r3, [r7, #0]
	unsigned int n;

	if (fifo->in == fifo->out)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d101      	bne.n	80005fe <__kfifo_out_r+0x1e>
		return 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e012      	b.n	8000624 <__kfifo_out_r+0x44>

	len = kfifo_out_copy_r(fifo, buf, len, recsize, &n);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	68b9      	ldr	r1, [r7, #8]
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f7ff ffc4 	bl	8000598 <kfifo_out_copy_r>
 8000610:	6078      	str	r0, [r7, #4]
	fifo->out += n + recsize;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	685a      	ldr	r2, [r3, #4]
 8000616:	6979      	ldr	r1, [r7, #20]
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	440b      	add	r3, r1
 800061c:	441a      	add	r2, r3
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	605a      	str	r2, [r3, #4]
	return len;
 8000622:	687b      	ldr	r3, [r7, #4]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <__kfifo_uint_must_check_helper>:
	}


static inline unsigned int __must_check
__kfifo_uint_must_check_helper(unsigned int val)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	return val;
 8000634:	687b      	ldr	r3, [r7, #4]
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	f5ad 7d74 	sub.w	sp, sp, #976	; 0x3d0
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fb34 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f896 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f7ff fde8 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000654:	f000 fa56 	bl	8000b04 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DEFINE_KFIFO(usart1_Rxkfifo, uint8_t, 512);
 8000658:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800065c:	4618      	mov	r0, r3
 800065e:	f44f 7305 	mov.w	r3, #532	; 0x214
 8000662:	461a      	mov	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f001 fe92 	bl	800238e <memset>
 800066a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800066e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000678:	2201      	movs	r2, #1
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000680:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8000684:	3214      	adds	r2, #20
 8000686:	611a      	str	r2, [r3, #16]
  uint8_t in[200] = {0};
 8000688:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800068c:	4618      	mov	r0, r3
 800068e:	23c8      	movs	r3, #200	; 0xc8
 8000690:	461a      	mov	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f001 fe7b 	bl	800238e <memset>
  in[0] = 1;
 8000698:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
  uint8_t out[200] = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	4618      	mov	r0, r3
 80006a4:	23c8      	movs	r3, #200	; 0xc8
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f001 fe70 	bl	800238e <memset>
  kfifo_in(&usart1_Rxkfifo, in, 200);
 80006ae:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80006b2:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80006b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80006ba:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80006be:	23c8      	movs	r3, #200	; 0xc8
 80006c0:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 80006ca:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80006ce:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80006d2:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00a      	beq.n	80006f0 <main+0xb0>
 80006da:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 80006de:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80006e2:	f8d7 13c8 	ldr.w	r1, [r7, #968]	; 0x3c8
 80006e6:	f8d7 03bc 	ldr.w	r0, [r7, #956]	; 0x3bc
 80006ea:	f7ff ff28 	bl	800053e <__kfifo_in_r>
 80006ee:	e007      	b.n	8000700 <main+0xc0>
 80006f0:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80006f4:	f8d7 13c8 	ldr.w	r1, [r7, #968]	; 0x3c8
 80006f8:	f8d7 03bc 	ldr.w	r0, [r7, #956]	; 0x3bc
 80006fc:	f7ff fe29 	bl	8000352 <__kfifo_in>
  int number = kfifo_out(&usart1_Rxkfifo, out, 50);
 8000700:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000704:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8000708:	463b      	mov	r3, r7
 800070a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800070e:	2332      	movs	r3, #50	; 0x32
 8000710:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800071a:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 800071e:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8000722:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00b      	beq.n	8000742 <main+0x102>
 800072a:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800072e:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8000732:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 8000736:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 800073a:	f7ff ff51 	bl	80005e0 <__kfifo_out_r>
 800073e:	4603      	mov	r3, r0
 8000740:	e008      	b.n	8000754 <main+0x114>
 8000742:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8000746:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 800074a:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 800074e:	f7ff fe8b 	bl	8000468 <__kfifo_out>
 8000752:	4603      	mov	r3, r0
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff69 	bl	800062c <__kfifo_uint_must_check_helper>
 800075a:	4603      	mov	r3, r0
 800075c:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("number = %d, out = %d\r\n", number, out);
 8000760:	463b      	mov	r3, r7
 8000762:	461a      	mov	r2, r3
 8000764:	f8d7 13a4 	ldr.w	r1, [r7, #932]	; 0x3a4
 8000768:	4803      	ldr	r0, [pc, #12]	; (8000778 <main+0x138>)
 800076a:	f001 fe19 	bl	80023a0 <iprintf>
	  HAL_Delay(500);
 800076e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000772:	f000 fad1 	bl	8000d18 <HAL_Delay>
	  printf("number = %d, out = %d\r\n", number, out);
 8000776:	e7f3      	b.n	8000760 <main+0x120>
 8000778:	08003194 	.word	0x08003194

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b090      	sub	sp, #64	; 0x40
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	2228      	movs	r2, #40	; 0x28
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fdff 	bl	800238e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079e:	2301      	movs	r3, #1
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0318 	add.w	r3, r7, #24
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fd13 	bl	80011f0 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007d0:	f000 f82e 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	2302      	movs	r3, #2
 80007da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2102      	movs	r1, #2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 ff7e 	bl	80016f0 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007fa:	f000 f819 	bl	8000830 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80007fe:	f001 f861 	bl	80018c4 <HAL_RCC_EnableCSS>
}
 8000802:	bf00      	nop
 8000804:	3740      	adds	r7, #64	; 0x40
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d101      	bne.n	8000822 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081e:	f000 fa5f 	bl	8000ce0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40001400 	.word	0x40001400

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <HAL_MspInit+0x5c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x5c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x5c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x5c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x60>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_MspInit+0x60>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000

080008a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	2037      	movs	r0, #55	; 0x37
 80008b6:	f000 fb06 	bl	8000ec6 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80008ba:	2037      	movs	r0, #55	; 0x37
 80008bc:	f000 fb1f 	bl	8000efe <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <HAL_InitTick+0xa0>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	4a1e      	ldr	r2, [pc, #120]	; (8000940 <HAL_InitTick+0xa0>)
 80008c6:	f043 0320 	orr.w	r3, r3, #32
 80008ca:	61d3      	str	r3, [r2, #28]
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <HAL_InitTick+0xa0>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	f003 0320 	and.w	r3, r3, #32
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d8:	f107 0210 	add.w	r2, r7, #16
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 f88e 	bl	8001a04 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008e8:	f001 f864 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 80008ec:	4603      	mov	r3, r0
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <HAL_InitTick+0xa4>)
 80008f6:	fba2 2303 	umull	r2, r3, r2, r3
 80008fa:	0c9b      	lsrs	r3, r3, #18
 80008fc:	3b01      	subs	r3, #1
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_InitTick+0xa8>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <HAL_InitTick+0xac>)
 8000904:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_InitTick+0xa8>)
 8000908:	f240 32e7 	movw	r2, #999	; 0x3e7
 800090c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800090e:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_InitTick+0xa8>)
 8000910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000912:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_InitTick+0xa8>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_InitTick+0xa8>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <HAL_InitTick+0xa8>)
 8000922:	f001 f8d7 	bl	8001ad4 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d104      	bne.n	8000936 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <HAL_InitTick+0xa8>)
 800092e:	f001 f929 	bl	8001b84 <HAL_TIM_Base_Start_IT>
 8000932:	4603      	mov	r3, r0
 8000934:	e000      	b.n	8000938 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	3730      	adds	r7, #48	; 0x30
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	431bde83 	.word	0x431bde83
 8000948:	20000098 	.word	0x20000098
 800094c:	40001400 	.word	0x40001400

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000954:	f001 f886 	bl	8001a64 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <HardFault_Handler+0x4>

08000962 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <MemManage_Handler+0x4>

08000968 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <BusFault_Handler+0x4>

0800096e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <UsageFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <TIM7_IRQHandler+0x10>)
 80009aa:	f001 f94b 	bl	8001c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000098 	.word	0x20000098

080009b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e00a      	b.n	80009e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ca:	f3af 8000 	nop.w
 80009ce:	4601      	mov	r1, r0
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60ba      	str	r2, [r7, #8]
 80009d6:	b2ca      	uxtb	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf0      	blt.n	80009ca <_read+0x12>
	}

return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e009      	b.n	8000a18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f915 	bl	8000c3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbf1      	blt.n	8000a04 <_write+0x12>
	}
	return len;
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_close>:

int _close(int file)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	return -1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a50:	605a      	str	r2, [r3, #4]
	return 0;
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <_isatty>:

int _isatty(int file)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	return 1;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b085      	sub	sp, #20
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
	...

08000a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <_sbrk+0x5c>)
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <_sbrk+0x60>)
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <_sbrk+0x64>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <_sbrk+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d207      	bcs.n	8000acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000abc:	f001 fc32 	bl	8002324 <__errno>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	e009      	b.n	8000ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <_sbrk+0x64>)
 8000adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000c000 	.word	0x2000c000
 8000aec:	00000400 	.word	0x00000400
 8000af0:	2000008c 	.word	0x2000008c
 8000af4:	20000128 	.word	0x20000128

08000af8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <MX_USART1_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b3c:	f001 fa3a 	bl	8001fb4 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f7ff fe73 	bl	8000830 <Error_Handler>
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000e0 	.word	0x200000e0
 8000b54:	40013800 	.word	0x40013800

08000b58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <HAL_UART_MspInit+0x8c>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d131      	bne.n	8000bdc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <HAL_UART_MspInit+0x90>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <HAL_UART_MspInit+0x90>)
 8000b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_UART_MspInit+0x90>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_UART_MspInit+0x90>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <HAL_UART_MspInit+0x90>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_UART_MspInit+0x90>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <HAL_UART_MspInit+0x94>)
 8000bbe:	f000 f9ad 	bl	8000f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_UART_MspInit+0x94>)
 8000bd8:	f000 f9a0 	bl	8000f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40013800 	.word	0x40013800
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010800 	.word	0x40010800

08000bf0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00b      	beq.n	8000c30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c18:	e000      	b.n	8000c1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f9      	beq.n	8000c1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000c44:	1d39      	adds	r1, r7, #4
 8000c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <__io_putchar+0x28>)
 8000c4e:	f001 f9fe 	bl	800204e <HAL_UART_Transmit>

  ITM_SendChar(ch);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffcb 	bl	8000bf0 <ITM_SendChar>

  return ch;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200000e0 	.word	0x200000e0

08000c68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c6a:	e003      	b.n	8000c74 <LoopCopyDataInit>

08000c6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c72:	3104      	adds	r1, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c74:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c7c:	d3f6      	bcc.n	8000c6c <CopyDataInit>
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c80:	e002      	b.n	8000c88 <LoopFillZerobss>

08000c82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c84:	f842 3b04 	str.w	r3, [r2], #4

08000c88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c8c:	d3f9      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c8e:	f7ff ff33 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f001 fb4d 	bl	8002330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c96:	f7ff fcd3 	bl	8000640 <main>
  bx lr
 8000c9a:	4770      	bx	lr
  ldr r3, =_sidata
 8000c9c:	08003278 	.word	0x08003278
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ca4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000ca8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000cac:	20000128 	.word	0x20000128

08000cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_2_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x28>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x28>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f8f3 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fde8 	bl	80008a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fdb4 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x20>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <HAL_IncTick+0x20>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000120 	.word	0x20000120

08000d04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <HAL_GetTick+0x10>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	20000120 	.word	0x20000120

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff fff0 	bl	8000d04 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_Delay+0x40>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffe0 	bl	8000d04 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000008 	.word	0x20000008

08000d5c <__NVIC_SetPriorityGrouping>:
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4906      	ldr	r1, [pc, #24]	; (8000df4 <__NVIC_EnableIRQ+0x34>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff4f 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff64 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ffb2 	bl	8000e4c <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff81 	bl	8000df8 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff57 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b08b      	sub	sp, #44	; 0x2c
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	e133      	b.n	8001198 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f30:	2201      	movs	r2, #1
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 8122 	bne.w	8001192 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d034      	beq.n	8000fc0 <HAL_GPIO_Init+0xa4>
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d80d      	bhi.n	8000f76 <HAL_GPIO_Init+0x5a>
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d02b      	beq.n	8000fb6 <HAL_GPIO_Init+0x9a>
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d804      	bhi.n	8000f6c <HAL_GPIO_Init+0x50>
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d031      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d01c      	beq.n	8000fa4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f6a:	e048      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d043      	beq.n	8000ff8 <HAL_GPIO_Init+0xdc>
 8000f70:	2b11      	cmp	r3, #17
 8000f72:	d01b      	beq.n	8000fac <HAL_GPIO_Init+0x90>
          break;
 8000f74:	e043      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f76:	4a8f      	ldr	r2, [pc, #572]	; (80011b4 <HAL_GPIO_Init+0x298>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d026      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f7c:	4a8d      	ldr	r2, [pc, #564]	; (80011b4 <HAL_GPIO_Init+0x298>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d806      	bhi.n	8000f90 <HAL_GPIO_Init+0x74>
 8000f82:	4a8d      	ldr	r2, [pc, #564]	; (80011b8 <HAL_GPIO_Init+0x29c>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d020      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f88:	4a8c      	ldr	r2, [pc, #560]	; (80011bc <HAL_GPIO_Init+0x2a0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01d      	beq.n	8000fca <HAL_GPIO_Init+0xae>
          break;
 8000f8e:	e036      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f90:	4a8b      	ldr	r2, [pc, #556]	; (80011c0 <HAL_GPIO_Init+0x2a4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f96:	4a8b      	ldr	r2, [pc, #556]	; (80011c4 <HAL_GPIO_Init+0x2a8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d016      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f9c:	4a8a      	ldr	r2, [pc, #552]	; (80011c8 <HAL_GPIO_Init+0x2ac>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0xae>
          break;
 8000fa2:	e02c      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e028      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	623b      	str	r3, [r7, #32]
          break;
 8000fb4:	e023      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	623b      	str	r3, [r7, #32]
          break;
 8000fbe:	e01e      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	330c      	adds	r3, #12
 8000fc6:	623b      	str	r3, [r7, #32]
          break;
 8000fc8:	e019      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	623b      	str	r3, [r7, #32]
          break;
 8000fd6:	e012      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d105      	bne.n	8000fec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	611a      	str	r2, [r3, #16]
          break;
 8000fea:	e008      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fec:	2308      	movs	r3, #8
 8000fee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	615a      	str	r2, [r3, #20]
          break;
 8000ff6:	e002      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2bff      	cmp	r3, #255	; 0xff
 8001002:	d801      	bhi.n	8001008 <HAL_GPIO_Init+0xec>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	e001      	b.n	800100c <HAL_GPIO_Init+0xf0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3304      	adds	r3, #4
 800100c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	2bff      	cmp	r3, #255	; 0xff
 8001012:	d802      	bhi.n	800101a <HAL_GPIO_Init+0xfe>
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x104>
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	3b08      	subs	r3, #8
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	210f      	movs	r1, #15
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	401a      	ands	r2, r3
 8001032:	6a39      	ldr	r1, [r7, #32]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	431a      	orrs	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80a2 	beq.w	8001192 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800104e:	4b5f      	ldr	r3, [pc, #380]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a5e      	ldr	r2, [pc, #376]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	4b5c      	ldr	r3, [pc, #368]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <HAL_GPIO_Init+0x2b4>)
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4013      	ands	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a51      	ldr	r2, [pc, #324]	; (80011d4 <HAL_GPIO_Init+0x2b8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01f      	beq.n	80010d2 <HAL_GPIO_Init+0x1b6>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a50      	ldr	r2, [pc, #320]	; (80011d8 <HAL_GPIO_Init+0x2bc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x1b2>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <HAL_GPIO_Init+0x2c0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x1ae>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	; (80011e0 <HAL_GPIO_Init+0x2c4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x1aa>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4d      	ldr	r2, [pc, #308]	; (80011e4 <HAL_GPIO_Init+0x2c8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x1a6>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	; (80011e8 <HAL_GPIO_Init+0x2cc>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x1a2>
 80010ba:	2305      	movs	r3, #5
 80010bc:	e00a      	b.n	80010d4 <HAL_GPIO_Init+0x1b8>
 80010be:	2306      	movs	r3, #6
 80010c0:	e008      	b.n	80010d4 <HAL_GPIO_Init+0x1b8>
 80010c2:	2304      	movs	r3, #4
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x1b8>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x1b8>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x1b8>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x1b8>
 80010d2:	2300      	movs	r3, #0
 80010d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d6:	f002 0203 	and.w	r2, r2, #3
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	4093      	lsls	r3, r2
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010e4:	493a      	ldr	r1, [pc, #232]	; (80011d0 <HAL_GPIO_Init+0x2b4>)
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010fe:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	493a      	ldr	r1, [pc, #232]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
 800110a:	e006      	b.n	800111a <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	43db      	mvns	r3, r3
 8001114:	4935      	ldr	r1, [pc, #212]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001116:	4013      	ands	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d006      	beq.n	8001134 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	4930      	ldr	r1, [pc, #192]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	604b      	str	r3, [r1, #4]
 8001132:	e006      	b.n	8001142 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	43db      	mvns	r3, r3
 800113c:	492b      	ldr	r1, [pc, #172]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800113e:	4013      	ands	r3, r2
 8001140:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	4926      	ldr	r1, [pc, #152]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	608b      	str	r3, [r1, #8]
 800115a:	e006      	b.n	800116a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	43db      	mvns	r3, r3
 8001164:	4921      	ldr	r1, [pc, #132]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001166:	4013      	ands	r3, r2
 8001168:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	491c      	ldr	r1, [pc, #112]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	60cb      	str	r3, [r1, #12]
 8001182:	e006      	b.n	8001192 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	43db      	mvns	r3, r3
 800118c:	4917      	ldr	r1, [pc, #92]	; (80011ec <HAL_GPIO_Init+0x2d0>)
 800118e:	4013      	ands	r3, r2
 8001190:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	3301      	adds	r3, #1
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	fa22 f303 	lsr.w	r3, r2, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f aec4 	bne.w	8000f30 <HAL_GPIO_Init+0x14>
  }
}
 80011a8:	bf00      	nop
 80011aa:	372c      	adds	r7, #44	; 0x2c
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	10210000 	.word	0x10210000
 80011b8:	10110000 	.word	0x10110000
 80011bc:	10120000 	.word	0x10120000
 80011c0:	10310000 	.word	0x10310000
 80011c4:	10320000 	.word	0x10320000
 80011c8:	10220000 	.word	0x10220000
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000
 80011d4:	40010800 	.word	0x40010800
 80011d8:	40010c00 	.word	0x40010c00
 80011dc:	40011000 	.word	0x40011000
 80011e0:	40011400 	.word	0x40011400
 80011e4:	40011800 	.word	0x40011800
 80011e8:	40011c00 	.word	0x40011c00
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e26c      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8087 	beq.w	800131e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001210:	4b92      	ldr	r3, [pc, #584]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b04      	cmp	r3, #4
 800121a:	d00c      	beq.n	8001236 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800121c:	4b8f      	ldr	r3, [pc, #572]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d112      	bne.n	800124e <HAL_RCC_OscConfig+0x5e>
 8001228:	4b8c      	ldr	r3, [pc, #560]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d10b      	bne.n	800124e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001236:	4b89      	ldr	r3, [pc, #548]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d06c      	beq.n	800131c <HAL_RCC_OscConfig+0x12c>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d168      	bne.n	800131c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e246      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x76>
 8001258:	4b80      	ldr	r3, [pc, #512]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a7f      	ldr	r2, [pc, #508]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e02e      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 800126e:	4b7b      	ldr	r3, [pc, #492]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a7a      	ldr	r2, [pc, #488]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b78      	ldr	r3, [pc, #480]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a77      	ldr	r2, [pc, #476]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e01d      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0xbc>
 8001292:	4b72      	ldr	r3, [pc, #456]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a71      	ldr	r2, [pc, #452]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b6f      	ldr	r3, [pc, #444]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a6e      	ldr	r2, [pc, #440]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0xd4>
 80012ac:	4b6b      	ldr	r3, [pc, #428]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a6a      	ldr	r2, [pc, #424]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b68      	ldr	r3, [pc, #416]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a67      	ldr	r2, [pc, #412]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fd1a 	bl	8000d04 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fd16 	bl	8000d04 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1fa      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b5d      	ldr	r3, [pc, #372]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0xe4>
 80012f2:	e014      	b.n	800131e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fd06 	bl	8000d04 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fd02 	bl	8000d04 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e1e6      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	4b53      	ldr	r3, [pc, #332]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x10c>
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d063      	beq.n	80013f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800132a:	4b4c      	ldr	r3, [pc, #304]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00b      	beq.n	800134e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001336:	4b49      	ldr	r3, [pc, #292]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b08      	cmp	r3, #8
 8001340:	d11c      	bne.n	800137c <HAL_RCC_OscConfig+0x18c>
 8001342:	4b46      	ldr	r3, [pc, #280]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d116      	bne.n	800137c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134e:	4b43      	ldr	r3, [pc, #268]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <HAL_RCC_OscConfig+0x176>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e1ba      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4939      	ldr	r1, [pc, #228]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	e03a      	b.n	80013f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d020      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fcbb 	bl	8000d04 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fcb7 	bl	8000d04 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e19b      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4927      	ldr	r1, [pc, #156]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
 80013c4:	e015      	b.n	80013f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc9a 	bl	8000d04 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc96 	bl	8000d04 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e17a      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d03a      	beq.n	8001474 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d019      	beq.n	800143a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_RCC_OscConfig+0x274>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff fc7a 	bl	8000d04 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fc76 	bl	8000d04 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e15a      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_RCC_OscConfig+0x26c>)
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 fb2a 	bl	8001a8c <RCC_Delay>
 8001438:	e01c      	b.n	8001474 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_RCC_OscConfig+0x274>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fc60 	bl	8000d04 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001446:	e00f      	b.n	8001468 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fc5c 	bl	8000d04 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d908      	bls.n	8001468 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e140      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	42420000 	.word	0x42420000
 8001464:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	4b9e      	ldr	r3, [pc, #632]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1e9      	bne.n	8001448 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80a6 	beq.w	80015ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001486:	4b97      	ldr	r3, [pc, #604]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b94      	ldr	r3, [pc, #592]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a93      	ldr	r2, [pc, #588]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b91      	ldr	r3, [pc, #580]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4b8e      	ldr	r3, [pc, #568]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d118      	bne.n	80014ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ba:	4b8b      	ldr	r3, [pc, #556]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a8a      	ldr	r2, [pc, #552]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fc1d 	bl	8000d04 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ce:	f7ff fc19 	bl	8000d04 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b64      	cmp	r3, #100	; 0x64
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e0fd      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <HAL_RCC_OscConfig+0x4f8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x312>
 80014f4:	4b7b      	ldr	r3, [pc, #492]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4a7a      	ldr	r2, [pc, #488]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6213      	str	r3, [r2, #32]
 8001500:	e02d      	b.n	800155e <HAL_RCC_OscConfig+0x36e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x334>
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a75      	ldr	r2, [pc, #468]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6213      	str	r3, [r2, #32]
 8001516:	4b73      	ldr	r3, [pc, #460]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4a72      	ldr	r2, [pc, #456]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	6213      	str	r3, [r2, #32]
 8001522:	e01c      	b.n	800155e <HAL_RCC_OscConfig+0x36e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_OscConfig+0x356>
 800152c:	4b6d      	ldr	r3, [pc, #436]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a6c      	ldr	r2, [pc, #432]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	4b6a      	ldr	r3, [pc, #424]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a69      	ldr	r2, [pc, #420]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6213      	str	r3, [r2, #32]
 8001544:	e00b      	b.n	800155e <HAL_RCC_OscConfig+0x36e>
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4a66      	ldr	r2, [pc, #408]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	6213      	str	r3, [r2, #32]
 8001552:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	f023 0304 	bic.w	r3, r3, #4
 800155c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d015      	beq.n	8001592 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff fbcd 	bl	8000d04 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff fbc9 	bl	8000d04 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e0ab      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	4b57      	ldr	r3, [pc, #348]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0ee      	beq.n	800156e <HAL_RCC_OscConfig+0x37e>
 8001590:	e014      	b.n	80015bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001592:	f7ff fbb7 	bl	8000d04 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff fbb3 	bl	8000d04 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e095      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ee      	bne.n	800159a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d105      	bne.n	80015ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c2:	4b48      	ldr	r3, [pc, #288]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a47      	ldr	r2, [pc, #284]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8081 	beq.w	80016da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d061      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d146      	bne.n	800167a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ec:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_RCC_OscConfig+0x4fc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fb87 	bl	8000d04 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff fb83 	bl	8000d04 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e067      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160c:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001620:	d108      	bne.n	8001634 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	492d      	ldr	r1, [pc, #180]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a19      	ldr	r1, [r3, #32]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	430b      	orrs	r3, r1
 8001646:	4927      	ldr	r1, [pc, #156]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_RCC_OscConfig+0x4fc>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb57 	bl	8000d04 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb53 	bl	8000d04 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e037      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x46a>
 8001678:	e02f      	b.n	80016da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_RCC_OscConfig+0x4fc>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb40 	bl	8000d04 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb3c 	bl	8000d04 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e020      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x498>
 80016a6:	e018      	b.n	80016da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e013      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40007000 	.word	0x40007000
 80016ec:	42420060 	.word	0x42420060

080016f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0d0      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b6a      	ldr	r3, [pc, #424]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d910      	bls.n	8001734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 0207 	bic.w	r2, r3, #7
 800171a:	4965      	ldr	r1, [pc, #404]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001756:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800176e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d040      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e073      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e06b      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4936      	ldr	r1, [pc, #216]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa90 	bl	8000d04 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fa8c 	bl	8000d04 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e053      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d210      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 0207 	bic.w	r2, r3, #7
 8001826:	4922      	ldr	r1, [pc, #136]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f82d 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 8001882:	4601      	mov	r1, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	fa21 f303 	lsr.w	r3, r1, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1cc>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1d0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fffe 	bl	80008a0 <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40022000 	.word	0x40022000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	080031c0 	.word	0x080031c0
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_RCC_EnableCSS+0x14>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	4242004c 	.word	0x4242004c

080018dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018dc:	b490      	push	{r4, r7}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018e4:	1d3c      	adds	r4, r7, #4
 80018e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018ec:	4b28      	ldr	r3, [pc, #160]	; (8001990 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b04      	cmp	r3, #4
 8001914:	d002      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x40>
 8001916:	2b08      	cmp	r3, #8
 8001918:	d003      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x46>
 800191a:	e02d      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_RCC_GetSysClockFreq+0xbc>)
 800191e:	623b      	str	r3, [r7, #32]
      break;
 8001920:	e02d      	b.n	800197e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	0c9b      	lsrs	r3, r3, #18
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800192e:	4413      	add	r3, r2
 8001930:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001934:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	0c5b      	lsrs	r3, r3, #17
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800194e:	4413      	add	r3, r2
 8001950:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001954:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_RCC_GetSysClockFreq+0xbc>)
 800195a:	fb02 f203 	mul.w	r2, r2, r3
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e004      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	4a0c      	ldr	r2, [pc, #48]	; (800199c <HAL_RCC_GetSysClockFreq+0xc0>)
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	623b      	str	r3, [r7, #32]
      break;
 8001976:	e002      	b.n	800197e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <HAL_RCC_GetSysClockFreq+0xbc>)
 800197a:	623b      	str	r3, [r7, #32]
      break;
 800197c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800197e:	6a3b      	ldr	r3, [r7, #32]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bc90      	pop	{r4, r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	080031ac 	.word	0x080031ac
 8001990:	080031bc 	.word	0x080031bc
 8001994:	40021000 	.word	0x40021000
 8001998:	007a1200 	.word	0x007a1200
 800199c:	003d0900 	.word	0x003d0900

080019a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a4:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	20000000 	.word	0x20000000

080019b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b8:	f7ff fff2 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019bc:	4601      	mov	r1, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4a03      	ldr	r2, [pc, #12]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	080031d0 	.word	0x080031d0

080019dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019e4:	4601      	mov	r1, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	0adb      	lsrs	r3, r3, #11
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	080031d0 	.word	0x080031d0

08001a04 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	220f      	movs	r2, #15
 8001a12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_RCC_GetClockConfig+0x58>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0203 	and.w	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_RCC_GetClockConfig+0x58>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_GetClockConfig+0x58>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_RCC_GetClockConfig+0x58>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_RCC_GetClockConfig+0x5c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0207 	and.w	r2, r3, #7
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40022000 	.word	0x40022000

08001a64 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a70:	2b80      	cmp	r3, #128	; 0x80
 8001a72:	d104      	bne.n	8001a7e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001a74:	f000 f828 	bl	8001ac8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	701a      	strb	r2, [r3, #0]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	4002100a 	.word	0x4002100a

08001a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <RCC_Delay+0x34>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <RCC_Delay+0x38>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0a5b      	lsrs	r3, r3, #9
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aa8:	bf00      	nop
  }
  while (Delay --);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <RCC_Delay+0x1c>
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	10624dd3 	.word	0x10624dd3

08001ac8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e041      	b.n	8001b6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f839 	bl	8001b72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f000 f9c2 	bl	8001e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d001      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e044      	b.n	8001c26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <HAL_TIM_Base_Start_IT+0xac>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d018      	beq.n	8001bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d013      	beq.n	8001bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d00e      	beq.n	8001bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d009      	beq.n	8001bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <HAL_TIM_Base_Start_IT+0xb8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d004      	beq.n	8001bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <HAL_TIM_Base_Start_IT+0xbc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d111      	bne.n	8001c14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d010      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0201 	orr.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c12:	e007      	b.n	8001c24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	40012c00 	.word	0x40012c00
 8001c34:	40013400 	.word	0x40013400
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40000800 	.word	0x40000800
 8001c40:	40000c00 	.word	0x40000c00

08001c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d122      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d11b      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0202 	mvn.w	r2, #2
 8001c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8ed 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001c8c:	e005      	b.n	8001c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8e0 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f8ef 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d122      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d11b      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0204 	mvn.w	r2, #4
 8001cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8c3 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001ce0:	e005      	b.n	8001cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8b6 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8c5 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d122      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d11b      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0208 	mvn.w	r2, #8
 8001d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f899 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f88c 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f89b 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d122      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d11b      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0210 	mvn.w	r2, #16
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2208      	movs	r2, #8
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f86f 	bl	8001e66 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f862 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f871 	bl	8001e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0201 	mvn.w	r2, #1
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fd22 	bl	800080c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd2:	2b80      	cmp	r3, #128	; 0x80
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8d7 	bl	8001fa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b40      	cmp	r3, #64	; 0x40
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f835 	bl	8001e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0220 	mvn.w	r2, #32
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8a2 	bl	8001f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a33      	ldr	r2, [pc, #204]	; (8001f7c <TIM_Base_SetConfig+0xe0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d013      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a32      	ldr	r2, [pc, #200]	; (8001f80 <TIM_Base_SetConfig+0xe4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00f      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec2:	d00b      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a2f      	ldr	r2, [pc, #188]	; (8001f84 <TIM_Base_SetConfig+0xe8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d007      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a2e      	ldr	r2, [pc, #184]	; (8001f88 <TIM_Base_SetConfig+0xec>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d003      	beq.n	8001edc <TIM_Base_SetConfig+0x40>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <TIM_Base_SetConfig+0xf0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d108      	bne.n	8001eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <TIM_Base_SetConfig+0xe0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <TIM_Base_SetConfig+0x82>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <TIM_Base_SetConfig+0xe4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00f      	beq.n	8001f1e <TIM_Base_SetConfig+0x82>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f04:	d00b      	beq.n	8001f1e <TIM_Base_SetConfig+0x82>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <TIM_Base_SetConfig+0xe8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <TIM_Base_SetConfig+0x82>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <TIM_Base_SetConfig+0xec>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d003      	beq.n	8001f1e <TIM_Base_SetConfig+0x82>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <TIM_Base_SetConfig+0xf0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <TIM_Base_SetConfig+0xe0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <TIM_Base_SetConfig+0xc8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <TIM_Base_SetConfig+0xe4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d103      	bne.n	8001f6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	615a      	str	r2, [r3, #20]
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	40012c00 	.word	0x40012c00
 8001f80:	40013400 	.word	0x40013400
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	40000c00 	.word	0x40000c00

08001f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e03f      	b.n	8002046 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fdbc 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2224      	movs	r2, #36	; 0x24
 8001fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f905 	bl	8002208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800200c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800201c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800202c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b08a      	sub	sp, #40	; 0x28
 8002052:	af02      	add	r7, sp, #8
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b20      	cmp	r3, #32
 800206c:	d17c      	bne.n	8002168 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_UART_Transmit+0x2c>
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e075      	b.n	800216a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_UART_Transmit+0x3e>
 8002088:	2302      	movs	r3, #2
 800208a:	e06e      	b.n	800216a <HAL_UART_Transmit+0x11c>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2221      	movs	r2, #33	; 0x21
 800209e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80020a2:	f7fe fe2f 	bl	8000d04 <HAL_GetTick>
 80020a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	88fa      	ldrh	r2, [r7, #6]
 80020ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	88fa      	ldrh	r2, [r7, #6]
 80020b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020bc:	d108      	bne.n	80020d0 <HAL_UART_Transmit+0x82>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d104      	bne.n	80020d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	e003      	b.n	80020d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80020e0:	e02a      	b.n	8002138 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2200      	movs	r2, #0
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f840 	bl	8002172 <UART_WaitOnFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e036      	b.n	800216a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10b      	bne.n	800211a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002110:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	3302      	adds	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	e007      	b.n	800212a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	3301      	adds	r3, #1
 8002128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800212e:	b29b      	uxth	r3, r3
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1cf      	bne.n	80020e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2200      	movs	r2, #0
 800214a:	2140      	movs	r1, #64	; 0x40
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f810 	bl	8002172 <UART_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e006      	b.n	800216a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	e000      	b.n	800216a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002168:	2302      	movs	r3, #2
  }
}
 800216a:	4618      	mov	r0, r3
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002182:	e02c      	b.n	80021de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d028      	beq.n	80021de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d007      	beq.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002192:	f7fe fdb7 	bl	8000d04 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d21d      	bcs.n	80021de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e00f      	b.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4013      	ands	r3, r2
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d0c3      	beq.n	8002184 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002242:	f023 030c 	bic.w	r3, r3, #12
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	430b      	orrs	r3, r1
 800224e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2c      	ldr	r2, [pc, #176]	; (800231c <UART_SetConfig+0x114>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d103      	bne.n	8002278 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002270:	f7ff fbb4 	bl	80019dc <HAL_RCC_GetPCLK2Freq>
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	e002      	b.n	800227e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002278:	f7ff fb9c 	bl	80019b4 <HAL_RCC_GetPCLK1Freq>
 800227c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	009a      	lsls	r2, r3, #2
 8002288:	441a      	add	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	4a22      	ldr	r2, [pc, #136]	; (8002320 <UART_SetConfig+0x118>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	0119      	lsls	r1, r3, #4
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <UART_SetConfig+0x118>)
 80022b6:	fba3 0302 	umull	r0, r3, r3, r2
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2064      	movs	r0, #100	; 0x64
 80022be:	fb00 f303 	mul.w	r3, r0, r3
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	3332      	adds	r3, #50	; 0x32
 80022c8:	4a15      	ldr	r2, [pc, #84]	; (8002320 <UART_SetConfig+0x118>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d4:	4419      	add	r1, r3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	009a      	lsls	r2, r3, #2
 80022e0:	441a      	add	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <UART_SetConfig+0x118>)
 80022ee:	fba3 0302 	umull	r0, r3, r3, r2
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2064      	movs	r0, #100	; 0x64
 80022f6:	fb00 f303 	mul.w	r3, r0, r3
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	3332      	adds	r3, #50	; 0x32
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <UART_SetConfig+0x118>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	f003 020f 	and.w	r2, r3, #15
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	440a      	add	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40013800 	.word	0x40013800
 8002320:	51eb851f 	.word	0x51eb851f

08002324 <__errno>:
 8002324:	4b01      	ldr	r3, [pc, #4]	; (800232c <__errno+0x8>)
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	2000000c 	.word	0x2000000c

08002330 <__libc_init_array>:
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	2500      	movs	r5, #0
 8002334:	4e0c      	ldr	r6, [pc, #48]	; (8002368 <__libc_init_array+0x38>)
 8002336:	4c0d      	ldr	r4, [pc, #52]	; (800236c <__libc_init_array+0x3c>)
 8002338:	1ba4      	subs	r4, r4, r6
 800233a:	10a4      	asrs	r4, r4, #2
 800233c:	42a5      	cmp	r5, r4
 800233e:	d109      	bne.n	8002354 <__libc_init_array+0x24>
 8002340:	f000 ff1c 	bl	800317c <_init>
 8002344:	2500      	movs	r5, #0
 8002346:	4e0a      	ldr	r6, [pc, #40]	; (8002370 <__libc_init_array+0x40>)
 8002348:	4c0a      	ldr	r4, [pc, #40]	; (8002374 <__libc_init_array+0x44>)
 800234a:	1ba4      	subs	r4, r4, r6
 800234c:	10a4      	asrs	r4, r4, #2
 800234e:	42a5      	cmp	r5, r4
 8002350:	d105      	bne.n	800235e <__libc_init_array+0x2e>
 8002352:	bd70      	pop	{r4, r5, r6, pc}
 8002354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002358:	4798      	blx	r3
 800235a:	3501      	adds	r5, #1
 800235c:	e7ee      	b.n	800233c <__libc_init_array+0xc>
 800235e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002362:	4798      	blx	r3
 8002364:	3501      	adds	r5, #1
 8002366:	e7f2      	b.n	800234e <__libc_init_array+0x1e>
 8002368:	08003270 	.word	0x08003270
 800236c:	08003270 	.word	0x08003270
 8002370:	08003270 	.word	0x08003270
 8002374:	08003274 	.word	0x08003274

08002378 <memcpy>:
 8002378:	b510      	push	{r4, lr}
 800237a:	1e43      	subs	r3, r0, #1
 800237c:	440a      	add	r2, r1
 800237e:	4291      	cmp	r1, r2
 8002380:	d100      	bne.n	8002384 <memcpy+0xc>
 8002382:	bd10      	pop	{r4, pc}
 8002384:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002388:	f803 4f01 	strb.w	r4, [r3, #1]!
 800238c:	e7f7      	b.n	800237e <memcpy+0x6>

0800238e <memset>:
 800238e:	4603      	mov	r3, r0
 8002390:	4402      	add	r2, r0
 8002392:	4293      	cmp	r3, r2
 8002394:	d100      	bne.n	8002398 <memset+0xa>
 8002396:	4770      	bx	lr
 8002398:	f803 1b01 	strb.w	r1, [r3], #1
 800239c:	e7f9      	b.n	8002392 <memset+0x4>
	...

080023a0 <iprintf>:
 80023a0:	b40f      	push	{r0, r1, r2, r3}
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <iprintf+0x2c>)
 80023a4:	b513      	push	{r0, r1, r4, lr}
 80023a6:	681c      	ldr	r4, [r3, #0]
 80023a8:	b124      	cbz	r4, 80023b4 <iprintf+0x14>
 80023aa:	69a3      	ldr	r3, [r4, #24]
 80023ac:	b913      	cbnz	r3, 80023b4 <iprintf+0x14>
 80023ae:	4620      	mov	r0, r4
 80023b0:	f000 f84e 	bl	8002450 <__sinit>
 80023b4:	ab05      	add	r3, sp, #20
 80023b6:	9a04      	ldr	r2, [sp, #16]
 80023b8:	68a1      	ldr	r1, [r4, #8]
 80023ba:	4620      	mov	r0, r4
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	f000 f953 	bl	8002668 <_vfiprintf_r>
 80023c2:	b002      	add	sp, #8
 80023c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c8:	b004      	add	sp, #16
 80023ca:	4770      	bx	lr
 80023cc:	2000000c 	.word	0x2000000c

080023d0 <std>:
 80023d0:	2300      	movs	r3, #0
 80023d2:	b510      	push	{r4, lr}
 80023d4:	4604      	mov	r4, r0
 80023d6:	e9c0 3300 	strd	r3, r3, [r0]
 80023da:	6083      	str	r3, [r0, #8]
 80023dc:	8181      	strh	r1, [r0, #12]
 80023de:	6643      	str	r3, [r0, #100]	; 0x64
 80023e0:	81c2      	strh	r2, [r0, #14]
 80023e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023e6:	6183      	str	r3, [r0, #24]
 80023e8:	4619      	mov	r1, r3
 80023ea:	2208      	movs	r2, #8
 80023ec:	305c      	adds	r0, #92	; 0x5c
 80023ee:	f7ff ffce 	bl	800238e <memset>
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <std+0x38>)
 80023f4:	6224      	str	r4, [r4, #32]
 80023f6:	6263      	str	r3, [r4, #36]	; 0x24
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <std+0x3c>)
 80023fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <std+0x40>)
 80023fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <std+0x44>)
 8002402:	6323      	str	r3, [r4, #48]	; 0x30
 8002404:	bd10      	pop	{r4, pc}
 8002406:	bf00      	nop
 8002408:	08002bc5 	.word	0x08002bc5
 800240c:	08002be7 	.word	0x08002be7
 8002410:	08002c1f 	.word	0x08002c1f
 8002414:	08002c43 	.word	0x08002c43

08002418 <_cleanup_r>:
 8002418:	4901      	ldr	r1, [pc, #4]	; (8002420 <_cleanup_r+0x8>)
 800241a:	f000 b885 	b.w	8002528 <_fwalk_reent>
 800241e:	bf00      	nop
 8002420:	08002f1d 	.word	0x08002f1d

08002424 <__sfmoreglue>:
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	2568      	movs	r5, #104	; 0x68
 8002428:	1e4a      	subs	r2, r1, #1
 800242a:	4355      	muls	r5, r2
 800242c:	460e      	mov	r6, r1
 800242e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002432:	f000 f897 	bl	8002564 <_malloc_r>
 8002436:	4604      	mov	r4, r0
 8002438:	b140      	cbz	r0, 800244c <__sfmoreglue+0x28>
 800243a:	2100      	movs	r1, #0
 800243c:	e9c0 1600 	strd	r1, r6, [r0]
 8002440:	300c      	adds	r0, #12
 8002442:	60a0      	str	r0, [r4, #8]
 8002444:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002448:	f7ff ffa1 	bl	800238e <memset>
 800244c:	4620      	mov	r0, r4
 800244e:	bd70      	pop	{r4, r5, r6, pc}

08002450 <__sinit>:
 8002450:	6983      	ldr	r3, [r0, #24]
 8002452:	b510      	push	{r4, lr}
 8002454:	4604      	mov	r4, r0
 8002456:	bb33      	cbnz	r3, 80024a6 <__sinit+0x56>
 8002458:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800245c:	6503      	str	r3, [r0, #80]	; 0x50
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <__sinit+0x58>)
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <__sinit+0x5c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6282      	str	r2, [r0, #40]	; 0x28
 8002466:	4298      	cmp	r0, r3
 8002468:	bf04      	itt	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	6183      	streq	r3, [r0, #24]
 800246e:	f000 f81f 	bl	80024b0 <__sfp>
 8002472:	6060      	str	r0, [r4, #4]
 8002474:	4620      	mov	r0, r4
 8002476:	f000 f81b 	bl	80024b0 <__sfp>
 800247a:	60a0      	str	r0, [r4, #8]
 800247c:	4620      	mov	r0, r4
 800247e:	f000 f817 	bl	80024b0 <__sfp>
 8002482:	2200      	movs	r2, #0
 8002484:	60e0      	str	r0, [r4, #12]
 8002486:	2104      	movs	r1, #4
 8002488:	6860      	ldr	r0, [r4, #4]
 800248a:	f7ff ffa1 	bl	80023d0 <std>
 800248e:	2201      	movs	r2, #1
 8002490:	2109      	movs	r1, #9
 8002492:	68a0      	ldr	r0, [r4, #8]
 8002494:	f7ff ff9c 	bl	80023d0 <std>
 8002498:	2202      	movs	r2, #2
 800249a:	2112      	movs	r1, #18
 800249c:	68e0      	ldr	r0, [r4, #12]
 800249e:	f7ff ff97 	bl	80023d0 <std>
 80024a2:	2301      	movs	r3, #1
 80024a4:	61a3      	str	r3, [r4, #24]
 80024a6:	bd10      	pop	{r4, pc}
 80024a8:	080031d8 	.word	0x080031d8
 80024ac:	08002419 	.word	0x08002419

080024b0 <__sfp>:
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <__sfp+0x70>)
 80024b4:	4607      	mov	r7, r0
 80024b6:	681e      	ldr	r6, [r3, #0]
 80024b8:	69b3      	ldr	r3, [r6, #24]
 80024ba:	b913      	cbnz	r3, 80024c2 <__sfp+0x12>
 80024bc:	4630      	mov	r0, r6
 80024be:	f7ff ffc7 	bl	8002450 <__sinit>
 80024c2:	3648      	adds	r6, #72	; 0x48
 80024c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	d503      	bpl.n	80024d4 <__sfp+0x24>
 80024cc:	6833      	ldr	r3, [r6, #0]
 80024ce:	b133      	cbz	r3, 80024de <__sfp+0x2e>
 80024d0:	6836      	ldr	r6, [r6, #0]
 80024d2:	e7f7      	b.n	80024c4 <__sfp+0x14>
 80024d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80024d8:	b16d      	cbz	r5, 80024f6 <__sfp+0x46>
 80024da:	3468      	adds	r4, #104	; 0x68
 80024dc:	e7f4      	b.n	80024c8 <__sfp+0x18>
 80024de:	2104      	movs	r1, #4
 80024e0:	4638      	mov	r0, r7
 80024e2:	f7ff ff9f 	bl	8002424 <__sfmoreglue>
 80024e6:	6030      	str	r0, [r6, #0]
 80024e8:	2800      	cmp	r0, #0
 80024ea:	d1f1      	bne.n	80024d0 <__sfp+0x20>
 80024ec:	230c      	movs	r3, #12
 80024ee:	4604      	mov	r4, r0
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4620      	mov	r0, r4
 80024f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <__sfp+0x74>)
 80024f8:	6665      	str	r5, [r4, #100]	; 0x64
 80024fa:	e9c4 5500 	strd	r5, r5, [r4]
 80024fe:	60a5      	str	r5, [r4, #8]
 8002500:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002504:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002508:	2208      	movs	r2, #8
 800250a:	4629      	mov	r1, r5
 800250c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002510:	f7ff ff3d 	bl	800238e <memset>
 8002514:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002518:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800251c:	e7e9      	b.n	80024f2 <__sfp+0x42>
 800251e:	bf00      	nop
 8002520:	080031d8 	.word	0x080031d8
 8002524:	ffff0001 	.word	0xffff0001

08002528 <_fwalk_reent>:
 8002528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800252c:	4680      	mov	r8, r0
 800252e:	4689      	mov	r9, r1
 8002530:	2600      	movs	r6, #0
 8002532:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002536:	b914      	cbnz	r4, 800253e <_fwalk_reent+0x16>
 8002538:	4630      	mov	r0, r6
 800253a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800253e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002542:	3f01      	subs	r7, #1
 8002544:	d501      	bpl.n	800254a <_fwalk_reent+0x22>
 8002546:	6824      	ldr	r4, [r4, #0]
 8002548:	e7f5      	b.n	8002536 <_fwalk_reent+0xe>
 800254a:	89ab      	ldrh	r3, [r5, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d907      	bls.n	8002560 <_fwalk_reent+0x38>
 8002550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002554:	3301      	adds	r3, #1
 8002556:	d003      	beq.n	8002560 <_fwalk_reent+0x38>
 8002558:	4629      	mov	r1, r5
 800255a:	4640      	mov	r0, r8
 800255c:	47c8      	blx	r9
 800255e:	4306      	orrs	r6, r0
 8002560:	3568      	adds	r5, #104	; 0x68
 8002562:	e7ee      	b.n	8002542 <_fwalk_reent+0x1a>

08002564 <_malloc_r>:
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	1ccd      	adds	r5, r1, #3
 8002568:	f025 0503 	bic.w	r5, r5, #3
 800256c:	3508      	adds	r5, #8
 800256e:	2d0c      	cmp	r5, #12
 8002570:	bf38      	it	cc
 8002572:	250c      	movcc	r5, #12
 8002574:	2d00      	cmp	r5, #0
 8002576:	4606      	mov	r6, r0
 8002578:	db01      	blt.n	800257e <_malloc_r+0x1a>
 800257a:	42a9      	cmp	r1, r5
 800257c:	d903      	bls.n	8002586 <_malloc_r+0x22>
 800257e:	230c      	movs	r3, #12
 8002580:	6033      	str	r3, [r6, #0]
 8002582:	2000      	movs	r0, #0
 8002584:	bd70      	pop	{r4, r5, r6, pc}
 8002586:	f000 fd77 	bl	8003078 <__malloc_lock>
 800258a:	4a21      	ldr	r2, [pc, #132]	; (8002610 <_malloc_r+0xac>)
 800258c:	6814      	ldr	r4, [r2, #0]
 800258e:	4621      	mov	r1, r4
 8002590:	b991      	cbnz	r1, 80025b8 <_malloc_r+0x54>
 8002592:	4c20      	ldr	r4, [pc, #128]	; (8002614 <_malloc_r+0xb0>)
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	b91b      	cbnz	r3, 80025a0 <_malloc_r+0x3c>
 8002598:	4630      	mov	r0, r6
 800259a:	f000 fb03 	bl	8002ba4 <_sbrk_r>
 800259e:	6020      	str	r0, [r4, #0]
 80025a0:	4629      	mov	r1, r5
 80025a2:	4630      	mov	r0, r6
 80025a4:	f000 fafe 	bl	8002ba4 <_sbrk_r>
 80025a8:	1c43      	adds	r3, r0, #1
 80025aa:	d124      	bne.n	80025f6 <_malloc_r+0x92>
 80025ac:	230c      	movs	r3, #12
 80025ae:	4630      	mov	r0, r6
 80025b0:	6033      	str	r3, [r6, #0]
 80025b2:	f000 fd62 	bl	800307a <__malloc_unlock>
 80025b6:	e7e4      	b.n	8002582 <_malloc_r+0x1e>
 80025b8:	680b      	ldr	r3, [r1, #0]
 80025ba:	1b5b      	subs	r3, r3, r5
 80025bc:	d418      	bmi.n	80025f0 <_malloc_r+0x8c>
 80025be:	2b0b      	cmp	r3, #11
 80025c0:	d90f      	bls.n	80025e2 <_malloc_r+0x7e>
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	18cc      	adds	r4, r1, r3
 80025c6:	50cd      	str	r5, [r1, r3]
 80025c8:	4630      	mov	r0, r6
 80025ca:	f000 fd56 	bl	800307a <__malloc_unlock>
 80025ce:	f104 000b 	add.w	r0, r4, #11
 80025d2:	1d23      	adds	r3, r4, #4
 80025d4:	f020 0007 	bic.w	r0, r0, #7
 80025d8:	1ac3      	subs	r3, r0, r3
 80025da:	d0d3      	beq.n	8002584 <_malloc_r+0x20>
 80025dc:	425a      	negs	r2, r3
 80025de:	50e2      	str	r2, [r4, r3]
 80025e0:	e7d0      	b.n	8002584 <_malloc_r+0x20>
 80025e2:	684b      	ldr	r3, [r1, #4]
 80025e4:	428c      	cmp	r4, r1
 80025e6:	bf16      	itet	ne
 80025e8:	6063      	strne	r3, [r4, #4]
 80025ea:	6013      	streq	r3, [r2, #0]
 80025ec:	460c      	movne	r4, r1
 80025ee:	e7eb      	b.n	80025c8 <_malloc_r+0x64>
 80025f0:	460c      	mov	r4, r1
 80025f2:	6849      	ldr	r1, [r1, #4]
 80025f4:	e7cc      	b.n	8002590 <_malloc_r+0x2c>
 80025f6:	1cc4      	adds	r4, r0, #3
 80025f8:	f024 0403 	bic.w	r4, r4, #3
 80025fc:	42a0      	cmp	r0, r4
 80025fe:	d005      	beq.n	800260c <_malloc_r+0xa8>
 8002600:	1a21      	subs	r1, r4, r0
 8002602:	4630      	mov	r0, r6
 8002604:	f000 face 	bl	8002ba4 <_sbrk_r>
 8002608:	3001      	adds	r0, #1
 800260a:	d0cf      	beq.n	80025ac <_malloc_r+0x48>
 800260c:	6025      	str	r5, [r4, #0]
 800260e:	e7db      	b.n	80025c8 <_malloc_r+0x64>
 8002610:	20000090 	.word	0x20000090
 8002614:	20000094 	.word	0x20000094

08002618 <__sfputc_r>:
 8002618:	6893      	ldr	r3, [r2, #8]
 800261a:	b410      	push	{r4}
 800261c:	3b01      	subs	r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	6093      	str	r3, [r2, #8]
 8002622:	da07      	bge.n	8002634 <__sfputc_r+0x1c>
 8002624:	6994      	ldr	r4, [r2, #24]
 8002626:	42a3      	cmp	r3, r4
 8002628:	db01      	blt.n	800262e <__sfputc_r+0x16>
 800262a:	290a      	cmp	r1, #10
 800262c:	d102      	bne.n	8002634 <__sfputc_r+0x1c>
 800262e:	bc10      	pop	{r4}
 8002630:	f000 bb0c 	b.w	8002c4c <__swbuf_r>
 8002634:	6813      	ldr	r3, [r2, #0]
 8002636:	1c58      	adds	r0, r3, #1
 8002638:	6010      	str	r0, [r2, #0]
 800263a:	7019      	strb	r1, [r3, #0]
 800263c:	4608      	mov	r0, r1
 800263e:	bc10      	pop	{r4}
 8002640:	4770      	bx	lr

08002642 <__sfputs_r>:
 8002642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002644:	4606      	mov	r6, r0
 8002646:	460f      	mov	r7, r1
 8002648:	4614      	mov	r4, r2
 800264a:	18d5      	adds	r5, r2, r3
 800264c:	42ac      	cmp	r4, r5
 800264e:	d101      	bne.n	8002654 <__sfputs_r+0x12>
 8002650:	2000      	movs	r0, #0
 8002652:	e007      	b.n	8002664 <__sfputs_r+0x22>
 8002654:	463a      	mov	r2, r7
 8002656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800265a:	4630      	mov	r0, r6
 800265c:	f7ff ffdc 	bl	8002618 <__sfputc_r>
 8002660:	1c43      	adds	r3, r0, #1
 8002662:	d1f3      	bne.n	800264c <__sfputs_r+0xa>
 8002664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002668 <_vfiprintf_r>:
 8002668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800266c:	460c      	mov	r4, r1
 800266e:	b09d      	sub	sp, #116	; 0x74
 8002670:	4617      	mov	r7, r2
 8002672:	461d      	mov	r5, r3
 8002674:	4606      	mov	r6, r0
 8002676:	b118      	cbz	r0, 8002680 <_vfiprintf_r+0x18>
 8002678:	6983      	ldr	r3, [r0, #24]
 800267a:	b90b      	cbnz	r3, 8002680 <_vfiprintf_r+0x18>
 800267c:	f7ff fee8 	bl	8002450 <__sinit>
 8002680:	4b7c      	ldr	r3, [pc, #496]	; (8002874 <_vfiprintf_r+0x20c>)
 8002682:	429c      	cmp	r4, r3
 8002684:	d158      	bne.n	8002738 <_vfiprintf_r+0xd0>
 8002686:	6874      	ldr	r4, [r6, #4]
 8002688:	89a3      	ldrh	r3, [r4, #12]
 800268a:	0718      	lsls	r0, r3, #28
 800268c:	d55e      	bpl.n	800274c <_vfiprintf_r+0xe4>
 800268e:	6923      	ldr	r3, [r4, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d05b      	beq.n	800274c <_vfiprintf_r+0xe4>
 8002694:	2300      	movs	r3, #0
 8002696:	9309      	str	r3, [sp, #36]	; 0x24
 8002698:	2320      	movs	r3, #32
 800269a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800269e:	2330      	movs	r3, #48	; 0x30
 80026a0:	f04f 0b01 	mov.w	fp, #1
 80026a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026a8:	9503      	str	r5, [sp, #12]
 80026aa:	46b8      	mov	r8, r7
 80026ac:	4645      	mov	r5, r8
 80026ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80026b2:	b10b      	cbz	r3, 80026b8 <_vfiprintf_r+0x50>
 80026b4:	2b25      	cmp	r3, #37	; 0x25
 80026b6:	d154      	bne.n	8002762 <_vfiprintf_r+0xfa>
 80026b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80026bc:	d00b      	beq.n	80026d6 <_vfiprintf_r+0x6e>
 80026be:	4653      	mov	r3, sl
 80026c0:	463a      	mov	r2, r7
 80026c2:	4621      	mov	r1, r4
 80026c4:	4630      	mov	r0, r6
 80026c6:	f7ff ffbc 	bl	8002642 <__sfputs_r>
 80026ca:	3001      	adds	r0, #1
 80026cc:	f000 80c2 	beq.w	8002854 <_vfiprintf_r+0x1ec>
 80026d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026d2:	4453      	add	r3, sl
 80026d4:	9309      	str	r3, [sp, #36]	; 0x24
 80026d6:	f898 3000 	ldrb.w	r3, [r8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80ba 	beq.w	8002854 <_vfiprintf_r+0x1ec>
 80026e0:	2300      	movs	r3, #0
 80026e2:	f04f 32ff 	mov.w	r2, #4294967295
 80026e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026ea:	9304      	str	r3, [sp, #16]
 80026ec:	9307      	str	r3, [sp, #28]
 80026ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026f2:	931a      	str	r3, [sp, #104]	; 0x68
 80026f4:	46a8      	mov	r8, r5
 80026f6:	2205      	movs	r2, #5
 80026f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80026fc:	485e      	ldr	r0, [pc, #376]	; (8002878 <_vfiprintf_r+0x210>)
 80026fe:	f000 fcad 	bl	800305c <memchr>
 8002702:	9b04      	ldr	r3, [sp, #16]
 8002704:	bb78      	cbnz	r0, 8002766 <_vfiprintf_r+0xfe>
 8002706:	06d9      	lsls	r1, r3, #27
 8002708:	bf44      	itt	mi
 800270a:	2220      	movmi	r2, #32
 800270c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002710:	071a      	lsls	r2, r3, #28
 8002712:	bf44      	itt	mi
 8002714:	222b      	movmi	r2, #43	; 0x2b
 8002716:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800271a:	782a      	ldrb	r2, [r5, #0]
 800271c:	2a2a      	cmp	r2, #42	; 0x2a
 800271e:	d02a      	beq.n	8002776 <_vfiprintf_r+0x10e>
 8002720:	46a8      	mov	r8, r5
 8002722:	2000      	movs	r0, #0
 8002724:	250a      	movs	r5, #10
 8002726:	9a07      	ldr	r2, [sp, #28]
 8002728:	4641      	mov	r1, r8
 800272a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800272e:	3b30      	subs	r3, #48	; 0x30
 8002730:	2b09      	cmp	r3, #9
 8002732:	d969      	bls.n	8002808 <_vfiprintf_r+0x1a0>
 8002734:	b360      	cbz	r0, 8002790 <_vfiprintf_r+0x128>
 8002736:	e024      	b.n	8002782 <_vfiprintf_r+0x11a>
 8002738:	4b50      	ldr	r3, [pc, #320]	; (800287c <_vfiprintf_r+0x214>)
 800273a:	429c      	cmp	r4, r3
 800273c:	d101      	bne.n	8002742 <_vfiprintf_r+0xda>
 800273e:	68b4      	ldr	r4, [r6, #8]
 8002740:	e7a2      	b.n	8002688 <_vfiprintf_r+0x20>
 8002742:	4b4f      	ldr	r3, [pc, #316]	; (8002880 <_vfiprintf_r+0x218>)
 8002744:	429c      	cmp	r4, r3
 8002746:	bf08      	it	eq
 8002748:	68f4      	ldreq	r4, [r6, #12]
 800274a:	e79d      	b.n	8002688 <_vfiprintf_r+0x20>
 800274c:	4621      	mov	r1, r4
 800274e:	4630      	mov	r0, r6
 8002750:	f000 fae0 	bl	8002d14 <__swsetup_r>
 8002754:	2800      	cmp	r0, #0
 8002756:	d09d      	beq.n	8002694 <_vfiprintf_r+0x2c>
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	b01d      	add	sp, #116	; 0x74
 800275e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002762:	46a8      	mov	r8, r5
 8002764:	e7a2      	b.n	80026ac <_vfiprintf_r+0x44>
 8002766:	4a44      	ldr	r2, [pc, #272]	; (8002878 <_vfiprintf_r+0x210>)
 8002768:	4645      	mov	r5, r8
 800276a:	1a80      	subs	r0, r0, r2
 800276c:	fa0b f000 	lsl.w	r0, fp, r0
 8002770:	4318      	orrs	r0, r3
 8002772:	9004      	str	r0, [sp, #16]
 8002774:	e7be      	b.n	80026f4 <_vfiprintf_r+0x8c>
 8002776:	9a03      	ldr	r2, [sp, #12]
 8002778:	1d11      	adds	r1, r2, #4
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	9103      	str	r1, [sp, #12]
 800277e:	2a00      	cmp	r2, #0
 8002780:	db01      	blt.n	8002786 <_vfiprintf_r+0x11e>
 8002782:	9207      	str	r2, [sp, #28]
 8002784:	e004      	b.n	8002790 <_vfiprintf_r+0x128>
 8002786:	4252      	negs	r2, r2
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	9207      	str	r2, [sp, #28]
 800278e:	9304      	str	r3, [sp, #16]
 8002790:	f898 3000 	ldrb.w	r3, [r8]
 8002794:	2b2e      	cmp	r3, #46	; 0x2e
 8002796:	d10e      	bne.n	80027b6 <_vfiprintf_r+0x14e>
 8002798:	f898 3001 	ldrb.w	r3, [r8, #1]
 800279c:	2b2a      	cmp	r3, #42	; 0x2a
 800279e:	d138      	bne.n	8002812 <_vfiprintf_r+0x1aa>
 80027a0:	9b03      	ldr	r3, [sp, #12]
 80027a2:	f108 0802 	add.w	r8, r8, #2
 80027a6:	1d1a      	adds	r2, r3, #4
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	9203      	str	r2, [sp, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bfb8      	it	lt
 80027b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80027b4:	9305      	str	r3, [sp, #20]
 80027b6:	4d33      	ldr	r5, [pc, #204]	; (8002884 <_vfiprintf_r+0x21c>)
 80027b8:	2203      	movs	r2, #3
 80027ba:	f898 1000 	ldrb.w	r1, [r8]
 80027be:	4628      	mov	r0, r5
 80027c0:	f000 fc4c 	bl	800305c <memchr>
 80027c4:	b140      	cbz	r0, 80027d8 <_vfiprintf_r+0x170>
 80027c6:	2340      	movs	r3, #64	; 0x40
 80027c8:	1b40      	subs	r0, r0, r5
 80027ca:	fa03 f000 	lsl.w	r0, r3, r0
 80027ce:	9b04      	ldr	r3, [sp, #16]
 80027d0:	f108 0801 	add.w	r8, r8, #1
 80027d4:	4303      	orrs	r3, r0
 80027d6:	9304      	str	r3, [sp, #16]
 80027d8:	f898 1000 	ldrb.w	r1, [r8]
 80027dc:	2206      	movs	r2, #6
 80027de:	482a      	ldr	r0, [pc, #168]	; (8002888 <_vfiprintf_r+0x220>)
 80027e0:	f108 0701 	add.w	r7, r8, #1
 80027e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027e8:	f000 fc38 	bl	800305c <memchr>
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d037      	beq.n	8002860 <_vfiprintf_r+0x1f8>
 80027f0:	4b26      	ldr	r3, [pc, #152]	; (800288c <_vfiprintf_r+0x224>)
 80027f2:	bb1b      	cbnz	r3, 800283c <_vfiprintf_r+0x1d4>
 80027f4:	9b03      	ldr	r3, [sp, #12]
 80027f6:	3307      	adds	r3, #7
 80027f8:	f023 0307 	bic.w	r3, r3, #7
 80027fc:	3308      	adds	r3, #8
 80027fe:	9303      	str	r3, [sp, #12]
 8002800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002802:	444b      	add	r3, r9
 8002804:	9309      	str	r3, [sp, #36]	; 0x24
 8002806:	e750      	b.n	80026aa <_vfiprintf_r+0x42>
 8002808:	fb05 3202 	mla	r2, r5, r2, r3
 800280c:	2001      	movs	r0, #1
 800280e:	4688      	mov	r8, r1
 8002810:	e78a      	b.n	8002728 <_vfiprintf_r+0xc0>
 8002812:	2300      	movs	r3, #0
 8002814:	250a      	movs	r5, #10
 8002816:	4619      	mov	r1, r3
 8002818:	f108 0801 	add.w	r8, r8, #1
 800281c:	9305      	str	r3, [sp, #20]
 800281e:	4640      	mov	r0, r8
 8002820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002824:	3a30      	subs	r2, #48	; 0x30
 8002826:	2a09      	cmp	r2, #9
 8002828:	d903      	bls.n	8002832 <_vfiprintf_r+0x1ca>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0c3      	beq.n	80027b6 <_vfiprintf_r+0x14e>
 800282e:	9105      	str	r1, [sp, #20]
 8002830:	e7c1      	b.n	80027b6 <_vfiprintf_r+0x14e>
 8002832:	fb05 2101 	mla	r1, r5, r1, r2
 8002836:	2301      	movs	r3, #1
 8002838:	4680      	mov	r8, r0
 800283a:	e7f0      	b.n	800281e <_vfiprintf_r+0x1b6>
 800283c:	ab03      	add	r3, sp, #12
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4622      	mov	r2, r4
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <_vfiprintf_r+0x228>)
 8002844:	a904      	add	r1, sp, #16
 8002846:	4630      	mov	r0, r6
 8002848:	f3af 8000 	nop.w
 800284c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002850:	4681      	mov	r9, r0
 8002852:	d1d5      	bne.n	8002800 <_vfiprintf_r+0x198>
 8002854:	89a3      	ldrh	r3, [r4, #12]
 8002856:	065b      	lsls	r3, r3, #25
 8002858:	f53f af7e 	bmi.w	8002758 <_vfiprintf_r+0xf0>
 800285c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800285e:	e77d      	b.n	800275c <_vfiprintf_r+0xf4>
 8002860:	ab03      	add	r3, sp, #12
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	4622      	mov	r2, r4
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <_vfiprintf_r+0x228>)
 8002868:	a904      	add	r1, sp, #16
 800286a:	4630      	mov	r0, r6
 800286c:	f000 f888 	bl	8002980 <_printf_i>
 8002870:	e7ec      	b.n	800284c <_vfiprintf_r+0x1e4>
 8002872:	bf00      	nop
 8002874:	080031fc 	.word	0x080031fc
 8002878:	0800323c 	.word	0x0800323c
 800287c:	0800321c 	.word	0x0800321c
 8002880:	080031dc 	.word	0x080031dc
 8002884:	08003242 	.word	0x08003242
 8002888:	08003246 	.word	0x08003246
 800288c:	00000000 	.word	0x00000000
 8002890:	08002643 	.word	0x08002643

08002894 <_printf_common>:
 8002894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002898:	4691      	mov	r9, r2
 800289a:	461f      	mov	r7, r3
 800289c:	688a      	ldr	r2, [r1, #8]
 800289e:	690b      	ldr	r3, [r1, #16]
 80028a0:	4606      	mov	r6, r0
 80028a2:	4293      	cmp	r3, r2
 80028a4:	bfb8      	it	lt
 80028a6:	4613      	movlt	r3, r2
 80028a8:	f8c9 3000 	str.w	r3, [r9]
 80028ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028b0:	460c      	mov	r4, r1
 80028b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028b6:	b112      	cbz	r2, 80028be <_printf_common+0x2a>
 80028b8:	3301      	adds	r3, #1
 80028ba:	f8c9 3000 	str.w	r3, [r9]
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	0699      	lsls	r1, r3, #26
 80028c2:	bf42      	ittt	mi
 80028c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80028c8:	3302      	addmi	r3, #2
 80028ca:	f8c9 3000 	strmi.w	r3, [r9]
 80028ce:	6825      	ldr	r5, [r4, #0]
 80028d0:	f015 0506 	ands.w	r5, r5, #6
 80028d4:	d107      	bne.n	80028e6 <_printf_common+0x52>
 80028d6:	f104 0a19 	add.w	sl, r4, #25
 80028da:	68e3      	ldr	r3, [r4, #12]
 80028dc:	f8d9 2000 	ldr.w	r2, [r9]
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	42ab      	cmp	r3, r5
 80028e4:	dc29      	bgt.n	800293a <_printf_common+0xa6>
 80028e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80028ea:	6822      	ldr	r2, [r4, #0]
 80028ec:	3300      	adds	r3, #0
 80028ee:	bf18      	it	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	0692      	lsls	r2, r2, #26
 80028f4:	d42e      	bmi.n	8002954 <_printf_common+0xc0>
 80028f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028fa:	4639      	mov	r1, r7
 80028fc:	4630      	mov	r0, r6
 80028fe:	47c0      	blx	r8
 8002900:	3001      	adds	r0, #1
 8002902:	d021      	beq.n	8002948 <_printf_common+0xb4>
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	68e5      	ldr	r5, [r4, #12]
 8002908:	f003 0306 	and.w	r3, r3, #6
 800290c:	2b04      	cmp	r3, #4
 800290e:	bf18      	it	ne
 8002910:	2500      	movne	r5, #0
 8002912:	f8d9 2000 	ldr.w	r2, [r9]
 8002916:	f04f 0900 	mov.w	r9, #0
 800291a:	bf08      	it	eq
 800291c:	1aad      	subeq	r5, r5, r2
 800291e:	68a3      	ldr	r3, [r4, #8]
 8002920:	6922      	ldr	r2, [r4, #16]
 8002922:	bf08      	it	eq
 8002924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002928:	4293      	cmp	r3, r2
 800292a:	bfc4      	itt	gt
 800292c:	1a9b      	subgt	r3, r3, r2
 800292e:	18ed      	addgt	r5, r5, r3
 8002930:	341a      	adds	r4, #26
 8002932:	454d      	cmp	r5, r9
 8002934:	d11a      	bne.n	800296c <_printf_common+0xd8>
 8002936:	2000      	movs	r0, #0
 8002938:	e008      	b.n	800294c <_printf_common+0xb8>
 800293a:	2301      	movs	r3, #1
 800293c:	4652      	mov	r2, sl
 800293e:	4639      	mov	r1, r7
 8002940:	4630      	mov	r0, r6
 8002942:	47c0      	blx	r8
 8002944:	3001      	adds	r0, #1
 8002946:	d103      	bne.n	8002950 <_printf_common+0xbc>
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002950:	3501      	adds	r5, #1
 8002952:	e7c2      	b.n	80028da <_printf_common+0x46>
 8002954:	2030      	movs	r0, #48	; 0x30
 8002956:	18e1      	adds	r1, r4, r3
 8002958:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002962:	4422      	add	r2, r4
 8002964:	3302      	adds	r3, #2
 8002966:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800296a:	e7c4      	b.n	80028f6 <_printf_common+0x62>
 800296c:	2301      	movs	r3, #1
 800296e:	4622      	mov	r2, r4
 8002970:	4639      	mov	r1, r7
 8002972:	4630      	mov	r0, r6
 8002974:	47c0      	blx	r8
 8002976:	3001      	adds	r0, #1
 8002978:	d0e6      	beq.n	8002948 <_printf_common+0xb4>
 800297a:	f109 0901 	add.w	r9, r9, #1
 800297e:	e7d8      	b.n	8002932 <_printf_common+0x9e>

08002980 <_printf_i>:
 8002980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002984:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002988:	460c      	mov	r4, r1
 800298a:	7e09      	ldrb	r1, [r1, #24]
 800298c:	b085      	sub	sp, #20
 800298e:	296e      	cmp	r1, #110	; 0x6e
 8002990:	4617      	mov	r7, r2
 8002992:	4606      	mov	r6, r0
 8002994:	4698      	mov	r8, r3
 8002996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002998:	f000 80b3 	beq.w	8002b02 <_printf_i+0x182>
 800299c:	d822      	bhi.n	80029e4 <_printf_i+0x64>
 800299e:	2963      	cmp	r1, #99	; 0x63
 80029a0:	d036      	beq.n	8002a10 <_printf_i+0x90>
 80029a2:	d80a      	bhi.n	80029ba <_printf_i+0x3a>
 80029a4:	2900      	cmp	r1, #0
 80029a6:	f000 80b9 	beq.w	8002b1c <_printf_i+0x19c>
 80029aa:	2958      	cmp	r1, #88	; 0x58
 80029ac:	f000 8083 	beq.w	8002ab6 <_printf_i+0x136>
 80029b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80029b8:	e032      	b.n	8002a20 <_printf_i+0xa0>
 80029ba:	2964      	cmp	r1, #100	; 0x64
 80029bc:	d001      	beq.n	80029c2 <_printf_i+0x42>
 80029be:	2969      	cmp	r1, #105	; 0x69
 80029c0:	d1f6      	bne.n	80029b0 <_printf_i+0x30>
 80029c2:	6820      	ldr	r0, [r4, #0]
 80029c4:	6813      	ldr	r3, [r2, #0]
 80029c6:	0605      	lsls	r5, r0, #24
 80029c8:	f103 0104 	add.w	r1, r3, #4
 80029cc:	d52a      	bpl.n	8002a24 <_printf_i+0xa4>
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6011      	str	r1, [r2, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	da03      	bge.n	80029de <_printf_i+0x5e>
 80029d6:	222d      	movs	r2, #45	; 0x2d
 80029d8:	425b      	negs	r3, r3
 80029da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80029de:	486f      	ldr	r0, [pc, #444]	; (8002b9c <_printf_i+0x21c>)
 80029e0:	220a      	movs	r2, #10
 80029e2:	e039      	b.n	8002a58 <_printf_i+0xd8>
 80029e4:	2973      	cmp	r1, #115	; 0x73
 80029e6:	f000 809d 	beq.w	8002b24 <_printf_i+0x1a4>
 80029ea:	d808      	bhi.n	80029fe <_printf_i+0x7e>
 80029ec:	296f      	cmp	r1, #111	; 0x6f
 80029ee:	d020      	beq.n	8002a32 <_printf_i+0xb2>
 80029f0:	2970      	cmp	r1, #112	; 0x70
 80029f2:	d1dd      	bne.n	80029b0 <_printf_i+0x30>
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	f043 0320 	orr.w	r3, r3, #32
 80029fa:	6023      	str	r3, [r4, #0]
 80029fc:	e003      	b.n	8002a06 <_printf_i+0x86>
 80029fe:	2975      	cmp	r1, #117	; 0x75
 8002a00:	d017      	beq.n	8002a32 <_printf_i+0xb2>
 8002a02:	2978      	cmp	r1, #120	; 0x78
 8002a04:	d1d4      	bne.n	80029b0 <_printf_i+0x30>
 8002a06:	2378      	movs	r3, #120	; 0x78
 8002a08:	4865      	ldr	r0, [pc, #404]	; (8002ba0 <_printf_i+0x220>)
 8002a0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a0e:	e055      	b.n	8002abc <_printf_i+0x13c>
 8002a10:	6813      	ldr	r3, [r2, #0]
 8002a12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a16:	1d19      	adds	r1, r3, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6011      	str	r1, [r2, #0]
 8002a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a20:	2301      	movs	r3, #1
 8002a22:	e08c      	b.n	8002b3e <_printf_i+0x1be>
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a2a:	6011      	str	r1, [r2, #0]
 8002a2c:	bf18      	it	ne
 8002a2e:	b21b      	sxthne	r3, r3
 8002a30:	e7cf      	b.n	80029d2 <_printf_i+0x52>
 8002a32:	6813      	ldr	r3, [r2, #0]
 8002a34:	6825      	ldr	r5, [r4, #0]
 8002a36:	1d18      	adds	r0, r3, #4
 8002a38:	6010      	str	r0, [r2, #0]
 8002a3a:	0628      	lsls	r0, r5, #24
 8002a3c:	d501      	bpl.n	8002a42 <_printf_i+0xc2>
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	e002      	b.n	8002a48 <_printf_i+0xc8>
 8002a42:	0668      	lsls	r0, r5, #25
 8002a44:	d5fb      	bpl.n	8002a3e <_printf_i+0xbe>
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	296f      	cmp	r1, #111	; 0x6f
 8002a4a:	bf14      	ite	ne
 8002a4c:	220a      	movne	r2, #10
 8002a4e:	2208      	moveq	r2, #8
 8002a50:	4852      	ldr	r0, [pc, #328]	; (8002b9c <_printf_i+0x21c>)
 8002a52:	2100      	movs	r1, #0
 8002a54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a58:	6865      	ldr	r5, [r4, #4]
 8002a5a:	2d00      	cmp	r5, #0
 8002a5c:	60a5      	str	r5, [r4, #8]
 8002a5e:	f2c0 8095 	blt.w	8002b8c <_printf_i+0x20c>
 8002a62:	6821      	ldr	r1, [r4, #0]
 8002a64:	f021 0104 	bic.w	r1, r1, #4
 8002a68:	6021      	str	r1, [r4, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d13d      	bne.n	8002aea <_printf_i+0x16a>
 8002a6e:	2d00      	cmp	r5, #0
 8002a70:	f040 808e 	bne.w	8002b90 <_printf_i+0x210>
 8002a74:	4665      	mov	r5, ip
 8002a76:	2a08      	cmp	r2, #8
 8002a78:	d10b      	bne.n	8002a92 <_printf_i+0x112>
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	07db      	lsls	r3, r3, #31
 8002a7e:	d508      	bpl.n	8002a92 <_printf_i+0x112>
 8002a80:	6923      	ldr	r3, [r4, #16]
 8002a82:	6862      	ldr	r2, [r4, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	bfde      	ittt	le
 8002a88:	2330      	movle	r3, #48	; 0x30
 8002a8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a92:	ebac 0305 	sub.w	r3, ip, r5
 8002a96:	6123      	str	r3, [r4, #16]
 8002a98:	f8cd 8000 	str.w	r8, [sp]
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	aa03      	add	r2, sp, #12
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f7ff fef6 	bl	8002894 <_printf_common>
 8002aa8:	3001      	adds	r0, #1
 8002aaa:	d14d      	bne.n	8002b48 <_printf_i+0x1c8>
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	b005      	add	sp, #20
 8002ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ab6:	4839      	ldr	r0, [pc, #228]	; (8002b9c <_printf_i+0x21c>)
 8002ab8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002abc:	6813      	ldr	r3, [r2, #0]
 8002abe:	6821      	ldr	r1, [r4, #0]
 8002ac0:	1d1d      	adds	r5, r3, #4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6015      	str	r5, [r2, #0]
 8002ac6:	060a      	lsls	r2, r1, #24
 8002ac8:	d50b      	bpl.n	8002ae2 <_printf_i+0x162>
 8002aca:	07ca      	lsls	r2, r1, #31
 8002acc:	bf44      	itt	mi
 8002ace:	f041 0120 	orrmi.w	r1, r1, #32
 8002ad2:	6021      	strmi	r1, [r4, #0]
 8002ad4:	b91b      	cbnz	r3, 8002ade <_printf_i+0x15e>
 8002ad6:	6822      	ldr	r2, [r4, #0]
 8002ad8:	f022 0220 	bic.w	r2, r2, #32
 8002adc:	6022      	str	r2, [r4, #0]
 8002ade:	2210      	movs	r2, #16
 8002ae0:	e7b7      	b.n	8002a52 <_printf_i+0xd2>
 8002ae2:	064d      	lsls	r5, r1, #25
 8002ae4:	bf48      	it	mi
 8002ae6:	b29b      	uxthmi	r3, r3
 8002ae8:	e7ef      	b.n	8002aca <_printf_i+0x14a>
 8002aea:	4665      	mov	r5, ip
 8002aec:	fbb3 f1f2 	udiv	r1, r3, r2
 8002af0:	fb02 3311 	mls	r3, r2, r1, r3
 8002af4:	5cc3      	ldrb	r3, [r0, r3]
 8002af6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002afa:	460b      	mov	r3, r1
 8002afc:	2900      	cmp	r1, #0
 8002afe:	d1f5      	bne.n	8002aec <_printf_i+0x16c>
 8002b00:	e7b9      	b.n	8002a76 <_printf_i+0xf6>
 8002b02:	6813      	ldr	r3, [r2, #0]
 8002b04:	6825      	ldr	r5, [r4, #0]
 8002b06:	1d18      	adds	r0, r3, #4
 8002b08:	6961      	ldr	r1, [r4, #20]
 8002b0a:	6010      	str	r0, [r2, #0]
 8002b0c:	0628      	lsls	r0, r5, #24
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	d501      	bpl.n	8002b16 <_printf_i+0x196>
 8002b12:	6019      	str	r1, [r3, #0]
 8002b14:	e002      	b.n	8002b1c <_printf_i+0x19c>
 8002b16:	066a      	lsls	r2, r5, #25
 8002b18:	d5fb      	bpl.n	8002b12 <_printf_i+0x192>
 8002b1a:	8019      	strh	r1, [r3, #0]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	4665      	mov	r5, ip
 8002b20:	6123      	str	r3, [r4, #16]
 8002b22:	e7b9      	b.n	8002a98 <_printf_i+0x118>
 8002b24:	6813      	ldr	r3, [r2, #0]
 8002b26:	1d19      	adds	r1, r3, #4
 8002b28:	6011      	str	r1, [r2, #0]
 8002b2a:	681d      	ldr	r5, [r3, #0]
 8002b2c:	6862      	ldr	r2, [r4, #4]
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4628      	mov	r0, r5
 8002b32:	f000 fa93 	bl	800305c <memchr>
 8002b36:	b108      	cbz	r0, 8002b3c <_printf_i+0x1bc>
 8002b38:	1b40      	subs	r0, r0, r5
 8002b3a:	6060      	str	r0, [r4, #4]
 8002b3c:	6863      	ldr	r3, [r4, #4]
 8002b3e:	6123      	str	r3, [r4, #16]
 8002b40:	2300      	movs	r3, #0
 8002b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b46:	e7a7      	b.n	8002a98 <_printf_i+0x118>
 8002b48:	6923      	ldr	r3, [r4, #16]
 8002b4a:	462a      	mov	r2, r5
 8002b4c:	4639      	mov	r1, r7
 8002b4e:	4630      	mov	r0, r6
 8002b50:	47c0      	blx	r8
 8002b52:	3001      	adds	r0, #1
 8002b54:	d0aa      	beq.n	8002aac <_printf_i+0x12c>
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	079b      	lsls	r3, r3, #30
 8002b5a:	d413      	bmi.n	8002b84 <_printf_i+0x204>
 8002b5c:	68e0      	ldr	r0, [r4, #12]
 8002b5e:	9b03      	ldr	r3, [sp, #12]
 8002b60:	4298      	cmp	r0, r3
 8002b62:	bfb8      	it	lt
 8002b64:	4618      	movlt	r0, r3
 8002b66:	e7a3      	b.n	8002ab0 <_printf_i+0x130>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	464a      	mov	r2, r9
 8002b6c:	4639      	mov	r1, r7
 8002b6e:	4630      	mov	r0, r6
 8002b70:	47c0      	blx	r8
 8002b72:	3001      	adds	r0, #1
 8002b74:	d09a      	beq.n	8002aac <_printf_i+0x12c>
 8002b76:	3501      	adds	r5, #1
 8002b78:	68e3      	ldr	r3, [r4, #12]
 8002b7a:	9a03      	ldr	r2, [sp, #12]
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	42ab      	cmp	r3, r5
 8002b80:	dcf2      	bgt.n	8002b68 <_printf_i+0x1e8>
 8002b82:	e7eb      	b.n	8002b5c <_printf_i+0x1dc>
 8002b84:	2500      	movs	r5, #0
 8002b86:	f104 0919 	add.w	r9, r4, #25
 8002b8a:	e7f5      	b.n	8002b78 <_printf_i+0x1f8>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ac      	bne.n	8002aea <_printf_i+0x16a>
 8002b90:	7803      	ldrb	r3, [r0, #0]
 8002b92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b9a:	e76c      	b.n	8002a76 <_printf_i+0xf6>
 8002b9c:	0800324d 	.word	0x0800324d
 8002ba0:	0800325e 	.word	0x0800325e

08002ba4 <_sbrk_r>:
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	4c05      	ldr	r4, [pc, #20]	; (8002bc0 <_sbrk_r+0x1c>)
 8002baa:	4605      	mov	r5, r0
 8002bac:	4608      	mov	r0, r1
 8002bae:	6023      	str	r3, [r4, #0]
 8002bb0:	f7fd ff6c 	bl	8000a8c <_sbrk>
 8002bb4:	1c43      	adds	r3, r0, #1
 8002bb6:	d102      	bne.n	8002bbe <_sbrk_r+0x1a>
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	b103      	cbz	r3, 8002bbe <_sbrk_r+0x1a>
 8002bbc:	602b      	str	r3, [r5, #0]
 8002bbe:	bd38      	pop	{r3, r4, r5, pc}
 8002bc0:	20000124 	.word	0x20000124

08002bc4 <__sread>:
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	460c      	mov	r4, r1
 8002bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bcc:	f000 faa2 	bl	8003114 <_read_r>
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	bfab      	itete	ge
 8002bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8002bd8:	181b      	addge	r3, r3, r0
 8002bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bde:	bfac      	ite	ge
 8002be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002be2:	81a3      	strhlt	r3, [r4, #12]
 8002be4:	bd10      	pop	{r4, pc}

08002be6 <__swrite>:
 8002be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bea:	461f      	mov	r7, r3
 8002bec:	898b      	ldrh	r3, [r1, #12]
 8002bee:	4605      	mov	r5, r0
 8002bf0:	05db      	lsls	r3, r3, #23
 8002bf2:	460c      	mov	r4, r1
 8002bf4:	4616      	mov	r6, r2
 8002bf6:	d505      	bpl.n	8002c04 <__swrite+0x1e>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c00:	f000 f9b6 	bl	8002f70 <_lseek_r>
 8002c04:	89a3      	ldrh	r3, [r4, #12]
 8002c06:	4632      	mov	r2, r6
 8002c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c0c:	81a3      	strh	r3, [r4, #12]
 8002c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c12:	463b      	mov	r3, r7
 8002c14:	4628      	mov	r0, r5
 8002c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c1a:	f000 b869 	b.w	8002cf0 <_write_r>

08002c1e <__sseek>:
 8002c1e:	b510      	push	{r4, lr}
 8002c20:	460c      	mov	r4, r1
 8002c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c26:	f000 f9a3 	bl	8002f70 <_lseek_r>
 8002c2a:	1c43      	adds	r3, r0, #1
 8002c2c:	89a3      	ldrh	r3, [r4, #12]
 8002c2e:	bf15      	itete	ne
 8002c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c3a:	81a3      	strheq	r3, [r4, #12]
 8002c3c:	bf18      	it	ne
 8002c3e:	81a3      	strhne	r3, [r4, #12]
 8002c40:	bd10      	pop	{r4, pc}

08002c42 <__sclose>:
 8002c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c46:	f000 b8d3 	b.w	8002df0 <_close_r>
	...

08002c4c <__swbuf_r>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	460e      	mov	r6, r1
 8002c50:	4614      	mov	r4, r2
 8002c52:	4605      	mov	r5, r0
 8002c54:	b118      	cbz	r0, 8002c5e <__swbuf_r+0x12>
 8002c56:	6983      	ldr	r3, [r0, #24]
 8002c58:	b90b      	cbnz	r3, 8002c5e <__swbuf_r+0x12>
 8002c5a:	f7ff fbf9 	bl	8002450 <__sinit>
 8002c5e:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <__swbuf_r+0x98>)
 8002c60:	429c      	cmp	r4, r3
 8002c62:	d12a      	bne.n	8002cba <__swbuf_r+0x6e>
 8002c64:	686c      	ldr	r4, [r5, #4]
 8002c66:	69a3      	ldr	r3, [r4, #24]
 8002c68:	60a3      	str	r3, [r4, #8]
 8002c6a:	89a3      	ldrh	r3, [r4, #12]
 8002c6c:	071a      	lsls	r2, r3, #28
 8002c6e:	d52e      	bpl.n	8002cce <__swbuf_r+0x82>
 8002c70:	6923      	ldr	r3, [r4, #16]
 8002c72:	b363      	cbz	r3, 8002cce <__swbuf_r+0x82>
 8002c74:	6923      	ldr	r3, [r4, #16]
 8002c76:	6820      	ldr	r0, [r4, #0]
 8002c78:	b2f6      	uxtb	r6, r6
 8002c7a:	1ac0      	subs	r0, r0, r3
 8002c7c:	6963      	ldr	r3, [r4, #20]
 8002c7e:	4637      	mov	r7, r6
 8002c80:	4283      	cmp	r3, r0
 8002c82:	dc04      	bgt.n	8002c8e <__swbuf_r+0x42>
 8002c84:	4621      	mov	r1, r4
 8002c86:	4628      	mov	r0, r5
 8002c88:	f000 f948 	bl	8002f1c <_fflush_r>
 8002c8c:	bb28      	cbnz	r0, 8002cda <__swbuf_r+0x8e>
 8002c8e:	68a3      	ldr	r3, [r4, #8]
 8002c90:	3001      	adds	r0, #1
 8002c92:	3b01      	subs	r3, #1
 8002c94:	60a3      	str	r3, [r4, #8]
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	6022      	str	r2, [r4, #0]
 8002c9c:	701e      	strb	r6, [r3, #0]
 8002c9e:	6963      	ldr	r3, [r4, #20]
 8002ca0:	4283      	cmp	r3, r0
 8002ca2:	d004      	beq.n	8002cae <__swbuf_r+0x62>
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	07db      	lsls	r3, r3, #31
 8002ca8:	d519      	bpl.n	8002cde <__swbuf_r+0x92>
 8002caa:	2e0a      	cmp	r6, #10
 8002cac:	d117      	bne.n	8002cde <__swbuf_r+0x92>
 8002cae:	4621      	mov	r1, r4
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	f000 f933 	bl	8002f1c <_fflush_r>
 8002cb6:	b190      	cbz	r0, 8002cde <__swbuf_r+0x92>
 8002cb8:	e00f      	b.n	8002cda <__swbuf_r+0x8e>
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <__swbuf_r+0x9c>)
 8002cbc:	429c      	cmp	r4, r3
 8002cbe:	d101      	bne.n	8002cc4 <__swbuf_r+0x78>
 8002cc0:	68ac      	ldr	r4, [r5, #8]
 8002cc2:	e7d0      	b.n	8002c66 <__swbuf_r+0x1a>
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <__swbuf_r+0xa0>)
 8002cc6:	429c      	cmp	r4, r3
 8002cc8:	bf08      	it	eq
 8002cca:	68ec      	ldreq	r4, [r5, #12]
 8002ccc:	e7cb      	b.n	8002c66 <__swbuf_r+0x1a>
 8002cce:	4621      	mov	r1, r4
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	f000 f81f 	bl	8002d14 <__swsetup_r>
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d0cc      	beq.n	8002c74 <__swbuf_r+0x28>
 8002cda:	f04f 37ff 	mov.w	r7, #4294967295
 8002cde:	4638      	mov	r0, r7
 8002ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	080031fc 	.word	0x080031fc
 8002ce8:	0800321c 	.word	0x0800321c
 8002cec:	080031dc 	.word	0x080031dc

08002cf0 <_write_r>:
 8002cf0:	b538      	push	{r3, r4, r5, lr}
 8002cf2:	4605      	mov	r5, r0
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4c05      	ldr	r4, [pc, #20]	; (8002d10 <_write_r+0x20>)
 8002cfc:	6022      	str	r2, [r4, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f7fd fe77 	bl	80009f2 <_write>
 8002d04:	1c43      	adds	r3, r0, #1
 8002d06:	d102      	bne.n	8002d0e <_write_r+0x1e>
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	b103      	cbz	r3, 8002d0e <_write_r+0x1e>
 8002d0c:	602b      	str	r3, [r5, #0]
 8002d0e:	bd38      	pop	{r3, r4, r5, pc}
 8002d10:	20000124 	.word	0x20000124

08002d14 <__swsetup_r>:
 8002d14:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <__swsetup_r+0xcc>)
 8002d16:	b570      	push	{r4, r5, r6, lr}
 8002d18:	681d      	ldr	r5, [r3, #0]
 8002d1a:	4606      	mov	r6, r0
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	b125      	cbz	r5, 8002d2a <__swsetup_r+0x16>
 8002d20:	69ab      	ldr	r3, [r5, #24]
 8002d22:	b913      	cbnz	r3, 8002d2a <__swsetup_r+0x16>
 8002d24:	4628      	mov	r0, r5
 8002d26:	f7ff fb93 	bl	8002450 <__sinit>
 8002d2a:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <__swsetup_r+0xd0>)
 8002d2c:	429c      	cmp	r4, r3
 8002d2e:	d10f      	bne.n	8002d50 <__swsetup_r+0x3c>
 8002d30:	686c      	ldr	r4, [r5, #4]
 8002d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	0715      	lsls	r5, r2, #28
 8002d3a:	d42c      	bmi.n	8002d96 <__swsetup_r+0x82>
 8002d3c:	06d0      	lsls	r0, r2, #27
 8002d3e:	d411      	bmi.n	8002d64 <__swsetup_r+0x50>
 8002d40:	2209      	movs	r2, #9
 8002d42:	6032      	str	r2, [r6, #0]
 8002d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d48:	81a3      	strh	r3, [r4, #12]
 8002d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4e:	e03e      	b.n	8002dce <__swsetup_r+0xba>
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <__swsetup_r+0xd4>)
 8002d52:	429c      	cmp	r4, r3
 8002d54:	d101      	bne.n	8002d5a <__swsetup_r+0x46>
 8002d56:	68ac      	ldr	r4, [r5, #8]
 8002d58:	e7eb      	b.n	8002d32 <__swsetup_r+0x1e>
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <__swsetup_r+0xd8>)
 8002d5c:	429c      	cmp	r4, r3
 8002d5e:	bf08      	it	eq
 8002d60:	68ec      	ldreq	r4, [r5, #12]
 8002d62:	e7e6      	b.n	8002d32 <__swsetup_r+0x1e>
 8002d64:	0751      	lsls	r1, r2, #29
 8002d66:	d512      	bpl.n	8002d8e <__swsetup_r+0x7a>
 8002d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d6a:	b141      	cbz	r1, 8002d7e <__swsetup_r+0x6a>
 8002d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d70:	4299      	cmp	r1, r3
 8002d72:	d002      	beq.n	8002d7a <__swsetup_r+0x66>
 8002d74:	4630      	mov	r0, r6
 8002d76:	f000 f981 	bl	800307c <_free_r>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8002d7e:	89a3      	ldrh	r3, [r4, #12]
 8002d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d84:	81a3      	strh	r3, [r4, #12]
 8002d86:	2300      	movs	r3, #0
 8002d88:	6063      	str	r3, [r4, #4]
 8002d8a:	6923      	ldr	r3, [r4, #16]
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	89a3      	ldrh	r3, [r4, #12]
 8002d90:	f043 0308 	orr.w	r3, r3, #8
 8002d94:	81a3      	strh	r3, [r4, #12]
 8002d96:	6923      	ldr	r3, [r4, #16]
 8002d98:	b94b      	cbnz	r3, 8002dae <__swsetup_r+0x9a>
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d003      	beq.n	8002dae <__swsetup_r+0x9a>
 8002da6:	4621      	mov	r1, r4
 8002da8:	4630      	mov	r0, r6
 8002daa:	f000 f917 	bl	8002fdc <__smakebuf_r>
 8002dae:	89a2      	ldrh	r2, [r4, #12]
 8002db0:	f012 0301 	ands.w	r3, r2, #1
 8002db4:	d00c      	beq.n	8002dd0 <__swsetup_r+0xbc>
 8002db6:	2300      	movs	r3, #0
 8002db8:	60a3      	str	r3, [r4, #8]
 8002dba:	6963      	ldr	r3, [r4, #20]
 8002dbc:	425b      	negs	r3, r3
 8002dbe:	61a3      	str	r3, [r4, #24]
 8002dc0:	6923      	ldr	r3, [r4, #16]
 8002dc2:	b953      	cbnz	r3, 8002dda <__swsetup_r+0xc6>
 8002dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002dcc:	d1ba      	bne.n	8002d44 <__swsetup_r+0x30>
 8002dce:	bd70      	pop	{r4, r5, r6, pc}
 8002dd0:	0792      	lsls	r2, r2, #30
 8002dd2:	bf58      	it	pl
 8002dd4:	6963      	ldrpl	r3, [r4, #20]
 8002dd6:	60a3      	str	r3, [r4, #8]
 8002dd8:	e7f2      	b.n	8002dc0 <__swsetup_r+0xac>
 8002dda:	2000      	movs	r0, #0
 8002ddc:	e7f7      	b.n	8002dce <__swsetup_r+0xba>
 8002dde:	bf00      	nop
 8002de0:	2000000c 	.word	0x2000000c
 8002de4:	080031fc 	.word	0x080031fc
 8002de8:	0800321c 	.word	0x0800321c
 8002dec:	080031dc 	.word	0x080031dc

08002df0 <_close_r>:
 8002df0:	b538      	push	{r3, r4, r5, lr}
 8002df2:	2300      	movs	r3, #0
 8002df4:	4c05      	ldr	r4, [pc, #20]	; (8002e0c <_close_r+0x1c>)
 8002df6:	4605      	mov	r5, r0
 8002df8:	4608      	mov	r0, r1
 8002dfa:	6023      	str	r3, [r4, #0]
 8002dfc:	f7fd fe15 	bl	8000a2a <_close>
 8002e00:	1c43      	adds	r3, r0, #1
 8002e02:	d102      	bne.n	8002e0a <_close_r+0x1a>
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	b103      	cbz	r3, 8002e0a <_close_r+0x1a>
 8002e08:	602b      	str	r3, [r5, #0]
 8002e0a:	bd38      	pop	{r3, r4, r5, pc}
 8002e0c:	20000124 	.word	0x20000124

08002e10 <__sflush_r>:
 8002e10:	898a      	ldrh	r2, [r1, #12]
 8002e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e16:	4605      	mov	r5, r0
 8002e18:	0710      	lsls	r0, r2, #28
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	d458      	bmi.n	8002ed0 <__sflush_r+0xc0>
 8002e1e:	684b      	ldr	r3, [r1, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	dc05      	bgt.n	8002e30 <__sflush_r+0x20>
 8002e24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	dc02      	bgt.n	8002e30 <__sflush_r+0x20>
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e32:	2e00      	cmp	r6, #0
 8002e34:	d0f9      	beq.n	8002e2a <__sflush_r+0x1a>
 8002e36:	2300      	movs	r3, #0
 8002e38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e3c:	682f      	ldr	r7, [r5, #0]
 8002e3e:	6a21      	ldr	r1, [r4, #32]
 8002e40:	602b      	str	r3, [r5, #0]
 8002e42:	d032      	beq.n	8002eaa <__sflush_r+0x9a>
 8002e44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	075a      	lsls	r2, r3, #29
 8002e4a:	d505      	bpl.n	8002e58 <__sflush_r+0x48>
 8002e4c:	6863      	ldr	r3, [r4, #4]
 8002e4e:	1ac0      	subs	r0, r0, r3
 8002e50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e52:	b10b      	cbz	r3, 8002e58 <__sflush_r+0x48>
 8002e54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e56:	1ac0      	subs	r0, r0, r3
 8002e58:	2300      	movs	r3, #0
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e5e:	6a21      	ldr	r1, [r4, #32]
 8002e60:	4628      	mov	r0, r5
 8002e62:	47b0      	blx	r6
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	89a3      	ldrh	r3, [r4, #12]
 8002e68:	d106      	bne.n	8002e78 <__sflush_r+0x68>
 8002e6a:	6829      	ldr	r1, [r5, #0]
 8002e6c:	291d      	cmp	r1, #29
 8002e6e:	d848      	bhi.n	8002f02 <__sflush_r+0xf2>
 8002e70:	4a29      	ldr	r2, [pc, #164]	; (8002f18 <__sflush_r+0x108>)
 8002e72:	40ca      	lsrs	r2, r1
 8002e74:	07d6      	lsls	r6, r2, #31
 8002e76:	d544      	bpl.n	8002f02 <__sflush_r+0xf2>
 8002e78:	2200      	movs	r2, #0
 8002e7a:	6062      	str	r2, [r4, #4]
 8002e7c:	6922      	ldr	r2, [r4, #16]
 8002e7e:	04d9      	lsls	r1, r3, #19
 8002e80:	6022      	str	r2, [r4, #0]
 8002e82:	d504      	bpl.n	8002e8e <__sflush_r+0x7e>
 8002e84:	1c42      	adds	r2, r0, #1
 8002e86:	d101      	bne.n	8002e8c <__sflush_r+0x7c>
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	b903      	cbnz	r3, 8002e8e <__sflush_r+0x7e>
 8002e8c:	6560      	str	r0, [r4, #84]	; 0x54
 8002e8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e90:	602f      	str	r7, [r5, #0]
 8002e92:	2900      	cmp	r1, #0
 8002e94:	d0c9      	beq.n	8002e2a <__sflush_r+0x1a>
 8002e96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e9a:	4299      	cmp	r1, r3
 8002e9c:	d002      	beq.n	8002ea4 <__sflush_r+0x94>
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f000 f8ec 	bl	800307c <_free_r>
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	6360      	str	r0, [r4, #52]	; 0x34
 8002ea8:	e7c0      	b.n	8002e2c <__sflush_r+0x1c>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	4628      	mov	r0, r5
 8002eae:	47b0      	blx	r6
 8002eb0:	1c41      	adds	r1, r0, #1
 8002eb2:	d1c8      	bne.n	8002e46 <__sflush_r+0x36>
 8002eb4:	682b      	ldr	r3, [r5, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0c5      	beq.n	8002e46 <__sflush_r+0x36>
 8002eba:	2b1d      	cmp	r3, #29
 8002ebc:	d001      	beq.n	8002ec2 <__sflush_r+0xb2>
 8002ebe:	2b16      	cmp	r3, #22
 8002ec0:	d101      	bne.n	8002ec6 <__sflush_r+0xb6>
 8002ec2:	602f      	str	r7, [r5, #0]
 8002ec4:	e7b1      	b.n	8002e2a <__sflush_r+0x1a>
 8002ec6:	89a3      	ldrh	r3, [r4, #12]
 8002ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ecc:	81a3      	strh	r3, [r4, #12]
 8002ece:	e7ad      	b.n	8002e2c <__sflush_r+0x1c>
 8002ed0:	690f      	ldr	r7, [r1, #16]
 8002ed2:	2f00      	cmp	r7, #0
 8002ed4:	d0a9      	beq.n	8002e2a <__sflush_r+0x1a>
 8002ed6:	0793      	lsls	r3, r2, #30
 8002ed8:	bf18      	it	ne
 8002eda:	2300      	movne	r3, #0
 8002edc:	680e      	ldr	r6, [r1, #0]
 8002ede:	bf08      	it	eq
 8002ee0:	694b      	ldreq	r3, [r1, #20]
 8002ee2:	eba6 0807 	sub.w	r8, r6, r7
 8002ee6:	600f      	str	r7, [r1, #0]
 8002ee8:	608b      	str	r3, [r1, #8]
 8002eea:	f1b8 0f00 	cmp.w	r8, #0
 8002eee:	dd9c      	ble.n	8002e2a <__sflush_r+0x1a>
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	463a      	mov	r2, r7
 8002ef4:	6a21      	ldr	r1, [r4, #32]
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002efa:	47b0      	blx	r6
 8002efc:	2800      	cmp	r0, #0
 8002efe:	dc06      	bgt.n	8002f0e <__sflush_r+0xfe>
 8002f00:	89a3      	ldrh	r3, [r4, #12]
 8002f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f06:	81a3      	strh	r3, [r4, #12]
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	e78e      	b.n	8002e2c <__sflush_r+0x1c>
 8002f0e:	4407      	add	r7, r0
 8002f10:	eba8 0800 	sub.w	r8, r8, r0
 8002f14:	e7e9      	b.n	8002eea <__sflush_r+0xda>
 8002f16:	bf00      	nop
 8002f18:	20400001 	.word	0x20400001

08002f1c <_fflush_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	690b      	ldr	r3, [r1, #16]
 8002f20:	4605      	mov	r5, r0
 8002f22:	460c      	mov	r4, r1
 8002f24:	b1db      	cbz	r3, 8002f5e <_fflush_r+0x42>
 8002f26:	b118      	cbz	r0, 8002f30 <_fflush_r+0x14>
 8002f28:	6983      	ldr	r3, [r0, #24]
 8002f2a:	b90b      	cbnz	r3, 8002f30 <_fflush_r+0x14>
 8002f2c:	f7ff fa90 	bl	8002450 <__sinit>
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <_fflush_r+0x48>)
 8002f32:	429c      	cmp	r4, r3
 8002f34:	d109      	bne.n	8002f4a <_fflush_r+0x2e>
 8002f36:	686c      	ldr	r4, [r5, #4]
 8002f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f3c:	b17b      	cbz	r3, 8002f5e <_fflush_r+0x42>
 8002f3e:	4621      	mov	r1, r4
 8002f40:	4628      	mov	r0, r5
 8002f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f46:	f7ff bf63 	b.w	8002e10 <__sflush_r>
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <_fflush_r+0x4c>)
 8002f4c:	429c      	cmp	r4, r3
 8002f4e:	d101      	bne.n	8002f54 <_fflush_r+0x38>
 8002f50:	68ac      	ldr	r4, [r5, #8]
 8002f52:	e7f1      	b.n	8002f38 <_fflush_r+0x1c>
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <_fflush_r+0x50>)
 8002f56:	429c      	cmp	r4, r3
 8002f58:	bf08      	it	eq
 8002f5a:	68ec      	ldreq	r4, [r5, #12]
 8002f5c:	e7ec      	b.n	8002f38 <_fflush_r+0x1c>
 8002f5e:	2000      	movs	r0, #0
 8002f60:	bd38      	pop	{r3, r4, r5, pc}
 8002f62:	bf00      	nop
 8002f64:	080031fc 	.word	0x080031fc
 8002f68:	0800321c 	.word	0x0800321c
 8002f6c:	080031dc 	.word	0x080031dc

08002f70 <_lseek_r>:
 8002f70:	b538      	push	{r3, r4, r5, lr}
 8002f72:	4605      	mov	r5, r0
 8002f74:	4608      	mov	r0, r1
 8002f76:	4611      	mov	r1, r2
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4c05      	ldr	r4, [pc, #20]	; (8002f90 <_lseek_r+0x20>)
 8002f7c:	6022      	str	r2, [r4, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f7fd fd77 	bl	8000a72 <_lseek>
 8002f84:	1c43      	adds	r3, r0, #1
 8002f86:	d102      	bne.n	8002f8e <_lseek_r+0x1e>
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	b103      	cbz	r3, 8002f8e <_lseek_r+0x1e>
 8002f8c:	602b      	str	r3, [r5, #0]
 8002f8e:	bd38      	pop	{r3, r4, r5, pc}
 8002f90:	20000124 	.word	0x20000124

08002f94 <__swhatbuf_r>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	460e      	mov	r6, r1
 8002f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f9c:	b096      	sub	sp, #88	; 0x58
 8002f9e:	2900      	cmp	r1, #0
 8002fa0:	4614      	mov	r4, r2
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	da07      	bge.n	8002fb6 <__swhatbuf_r+0x22>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	602b      	str	r3, [r5, #0]
 8002faa:	89b3      	ldrh	r3, [r6, #12]
 8002fac:	061a      	lsls	r2, r3, #24
 8002fae:	d410      	bmi.n	8002fd2 <__swhatbuf_r+0x3e>
 8002fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb4:	e00e      	b.n	8002fd4 <__swhatbuf_r+0x40>
 8002fb6:	466a      	mov	r2, sp
 8002fb8:	f000 f8be 	bl	8003138 <_fstat_r>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	dbf2      	blt.n	8002fa6 <__swhatbuf_r+0x12>
 8002fc0:	9a01      	ldr	r2, [sp, #4]
 8002fc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002fc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002fca:	425a      	negs	r2, r3
 8002fcc:	415a      	adcs	r2, r3
 8002fce:	602a      	str	r2, [r5, #0]
 8002fd0:	e7ee      	b.n	8002fb0 <__swhatbuf_r+0x1c>
 8002fd2:	2340      	movs	r3, #64	; 0x40
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	6023      	str	r3, [r4, #0]
 8002fd8:	b016      	add	sp, #88	; 0x58
 8002fda:	bd70      	pop	{r4, r5, r6, pc}

08002fdc <__smakebuf_r>:
 8002fdc:	898b      	ldrh	r3, [r1, #12]
 8002fde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fe0:	079d      	lsls	r5, r3, #30
 8002fe2:	4606      	mov	r6, r0
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	d507      	bpl.n	8002ff8 <__smakebuf_r+0x1c>
 8002fe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	6123      	str	r3, [r4, #16]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	6163      	str	r3, [r4, #20]
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	ab01      	add	r3, sp, #4
 8002ffa:	466a      	mov	r2, sp
 8002ffc:	f7ff ffca 	bl	8002f94 <__swhatbuf_r>
 8003000:	9900      	ldr	r1, [sp, #0]
 8003002:	4605      	mov	r5, r0
 8003004:	4630      	mov	r0, r6
 8003006:	f7ff faad 	bl	8002564 <_malloc_r>
 800300a:	b948      	cbnz	r0, 8003020 <__smakebuf_r+0x44>
 800300c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003010:	059a      	lsls	r2, r3, #22
 8003012:	d4ef      	bmi.n	8002ff4 <__smakebuf_r+0x18>
 8003014:	f023 0303 	bic.w	r3, r3, #3
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	81a3      	strh	r3, [r4, #12]
 800301e:	e7e3      	b.n	8002fe8 <__smakebuf_r+0xc>
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <__smakebuf_r+0x7c>)
 8003022:	62b3      	str	r3, [r6, #40]	; 0x28
 8003024:	89a3      	ldrh	r3, [r4, #12]
 8003026:	6020      	str	r0, [r4, #0]
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302c:	81a3      	strh	r3, [r4, #12]
 800302e:	9b00      	ldr	r3, [sp, #0]
 8003030:	6120      	str	r0, [r4, #16]
 8003032:	6163      	str	r3, [r4, #20]
 8003034:	9b01      	ldr	r3, [sp, #4]
 8003036:	b15b      	cbz	r3, 8003050 <__smakebuf_r+0x74>
 8003038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800303c:	4630      	mov	r0, r6
 800303e:	f000 f88d 	bl	800315c <_isatty_r>
 8003042:	b128      	cbz	r0, 8003050 <__smakebuf_r+0x74>
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	81a3      	strh	r3, [r4, #12]
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	431d      	orrs	r5, r3
 8003054:	81a5      	strh	r5, [r4, #12]
 8003056:	e7cd      	b.n	8002ff4 <__smakebuf_r+0x18>
 8003058:	08002419 	.word	0x08002419

0800305c <memchr>:
 800305c:	b510      	push	{r4, lr}
 800305e:	b2c9      	uxtb	r1, r1
 8003060:	4402      	add	r2, r0
 8003062:	4290      	cmp	r0, r2
 8003064:	4603      	mov	r3, r0
 8003066:	d101      	bne.n	800306c <memchr+0x10>
 8003068:	2300      	movs	r3, #0
 800306a:	e003      	b.n	8003074 <memchr+0x18>
 800306c:	781c      	ldrb	r4, [r3, #0]
 800306e:	3001      	adds	r0, #1
 8003070:	428c      	cmp	r4, r1
 8003072:	d1f6      	bne.n	8003062 <memchr+0x6>
 8003074:	4618      	mov	r0, r3
 8003076:	bd10      	pop	{r4, pc}

08003078 <__malloc_lock>:
 8003078:	4770      	bx	lr

0800307a <__malloc_unlock>:
 800307a:	4770      	bx	lr

0800307c <_free_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	4605      	mov	r5, r0
 8003080:	2900      	cmp	r1, #0
 8003082:	d043      	beq.n	800310c <_free_r+0x90>
 8003084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003088:	1f0c      	subs	r4, r1, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	bfb8      	it	lt
 800308e:	18e4      	addlt	r4, r4, r3
 8003090:	f7ff fff2 	bl	8003078 <__malloc_lock>
 8003094:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <_free_r+0x94>)
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	4610      	mov	r0, r2
 800309a:	b933      	cbnz	r3, 80030aa <_free_r+0x2e>
 800309c:	6063      	str	r3, [r4, #4]
 800309e:	6014      	str	r4, [r2, #0]
 80030a0:	4628      	mov	r0, r5
 80030a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030a6:	f7ff bfe8 	b.w	800307a <__malloc_unlock>
 80030aa:	42a3      	cmp	r3, r4
 80030ac:	d90b      	bls.n	80030c6 <_free_r+0x4a>
 80030ae:	6821      	ldr	r1, [r4, #0]
 80030b0:	1862      	adds	r2, r4, r1
 80030b2:	4293      	cmp	r3, r2
 80030b4:	bf01      	itttt	eq
 80030b6:	681a      	ldreq	r2, [r3, #0]
 80030b8:	685b      	ldreq	r3, [r3, #4]
 80030ba:	1852      	addeq	r2, r2, r1
 80030bc:	6022      	streq	r2, [r4, #0]
 80030be:	6063      	str	r3, [r4, #4]
 80030c0:	6004      	str	r4, [r0, #0]
 80030c2:	e7ed      	b.n	80030a0 <_free_r+0x24>
 80030c4:	4613      	mov	r3, r2
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	b10a      	cbz	r2, 80030ce <_free_r+0x52>
 80030ca:	42a2      	cmp	r2, r4
 80030cc:	d9fa      	bls.n	80030c4 <_free_r+0x48>
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	1858      	adds	r0, r3, r1
 80030d2:	42a0      	cmp	r0, r4
 80030d4:	d10b      	bne.n	80030ee <_free_r+0x72>
 80030d6:	6820      	ldr	r0, [r4, #0]
 80030d8:	4401      	add	r1, r0
 80030da:	1858      	adds	r0, r3, r1
 80030dc:	4282      	cmp	r2, r0
 80030de:	6019      	str	r1, [r3, #0]
 80030e0:	d1de      	bne.n	80030a0 <_free_r+0x24>
 80030e2:	6810      	ldr	r0, [r2, #0]
 80030e4:	6852      	ldr	r2, [r2, #4]
 80030e6:	4401      	add	r1, r0
 80030e8:	6019      	str	r1, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	e7d8      	b.n	80030a0 <_free_r+0x24>
 80030ee:	d902      	bls.n	80030f6 <_free_r+0x7a>
 80030f0:	230c      	movs	r3, #12
 80030f2:	602b      	str	r3, [r5, #0]
 80030f4:	e7d4      	b.n	80030a0 <_free_r+0x24>
 80030f6:	6820      	ldr	r0, [r4, #0]
 80030f8:	1821      	adds	r1, r4, r0
 80030fa:	428a      	cmp	r2, r1
 80030fc:	bf01      	itttt	eq
 80030fe:	6811      	ldreq	r1, [r2, #0]
 8003100:	6852      	ldreq	r2, [r2, #4]
 8003102:	1809      	addeq	r1, r1, r0
 8003104:	6021      	streq	r1, [r4, #0]
 8003106:	6062      	str	r2, [r4, #4]
 8003108:	605c      	str	r4, [r3, #4]
 800310a:	e7c9      	b.n	80030a0 <_free_r+0x24>
 800310c:	bd38      	pop	{r3, r4, r5, pc}
 800310e:	bf00      	nop
 8003110:	20000090 	.word	0x20000090

08003114 <_read_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	4605      	mov	r5, r0
 8003118:	4608      	mov	r0, r1
 800311a:	4611      	mov	r1, r2
 800311c:	2200      	movs	r2, #0
 800311e:	4c05      	ldr	r4, [pc, #20]	; (8003134 <_read_r+0x20>)
 8003120:	6022      	str	r2, [r4, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	f7fd fc48 	bl	80009b8 <_read>
 8003128:	1c43      	adds	r3, r0, #1
 800312a:	d102      	bne.n	8003132 <_read_r+0x1e>
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	b103      	cbz	r3, 8003132 <_read_r+0x1e>
 8003130:	602b      	str	r3, [r5, #0]
 8003132:	bd38      	pop	{r3, r4, r5, pc}
 8003134:	20000124 	.word	0x20000124

08003138 <_fstat_r>:
 8003138:	b538      	push	{r3, r4, r5, lr}
 800313a:	2300      	movs	r3, #0
 800313c:	4c06      	ldr	r4, [pc, #24]	; (8003158 <_fstat_r+0x20>)
 800313e:	4605      	mov	r5, r0
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	6023      	str	r3, [r4, #0]
 8003146:	f7fd fc7b 	bl	8000a40 <_fstat>
 800314a:	1c43      	adds	r3, r0, #1
 800314c:	d102      	bne.n	8003154 <_fstat_r+0x1c>
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	b103      	cbz	r3, 8003154 <_fstat_r+0x1c>
 8003152:	602b      	str	r3, [r5, #0]
 8003154:	bd38      	pop	{r3, r4, r5, pc}
 8003156:	bf00      	nop
 8003158:	20000124 	.word	0x20000124

0800315c <_isatty_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	2300      	movs	r3, #0
 8003160:	4c05      	ldr	r4, [pc, #20]	; (8003178 <_isatty_r+0x1c>)
 8003162:	4605      	mov	r5, r0
 8003164:	4608      	mov	r0, r1
 8003166:	6023      	str	r3, [r4, #0]
 8003168:	f7fd fc79 	bl	8000a5e <_isatty>
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d102      	bne.n	8003176 <_isatty_r+0x1a>
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	b103      	cbz	r3, 8003176 <_isatty_r+0x1a>
 8003174:	602b      	str	r3, [r5, #0]
 8003176:	bd38      	pop	{r3, r4, r5, pc}
 8003178:	20000124 	.word	0x20000124

0800317c <_init>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	bf00      	nop
 8003180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003182:	bc08      	pop	{r3}
 8003184:	469e      	mov	lr, r3
 8003186:	4770      	bx	lr

08003188 <_fini>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	bf00      	nop
 800318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318e:	bc08      	pop	{r3}
 8003190:	469e      	mov	lr, r3
 8003192:	4770      	bx	lr
